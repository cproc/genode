/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSAudioGain.h"

#include "AudioGain.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSAudioGainTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioGainConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioGainTable = { 2, 1, JSAudioGainTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSAudioGainConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioGainConstructorTable = { 1, 0, JSAudioGainConstructorTableValues, 0 };
const ClassInfo JSAudioGainConstructor::s_info = { "AudioGainConstructor", &Base::s_info, &JSAudioGainConstructorTable, 0, CREATE_METHOD_TABLE(JSAudioGainConstructor) };

JSAudioGainConstructor::JSAudioGainConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAudioGainConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSAudioGainPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSAudioGainConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAudioGainConstructor, JSDOMWrapper>(exec, &JSAudioGainConstructorTable, jsCast<JSAudioGainConstructor*>(cell), propertyName, slot);
}

bool JSAudioGainConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSAudioGainConstructor, JSDOMWrapper>(exec, &JSAudioGainConstructorTable, jsCast<JSAudioGainConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSAudioGainPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioGainPrototypeTable = { 1, 0, JSAudioGainPrototypeTableValues, 0 };
const ClassInfo JSAudioGainPrototype::s_info = { "AudioGainPrototype", &Base::s_info, &JSAudioGainPrototypeTable, 0, CREATE_METHOD_TABLE(JSAudioGainPrototype) };

JSObject* JSAudioGainPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioGain>(exec, globalObject);
}

const ClassInfo JSAudioGain::s_info = { "AudioGain", &Base::s_info, &JSAudioGainTable, 0 , CREATE_METHOD_TABLE(JSAudioGain) };

JSAudioGain::JSAudioGain(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AudioGain> impl)
    : JSAudioParam(structure, globalObject, impl)
{
}

void JSAudioGain::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSAudioGain::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSAudioGainPrototype::create(exec->globalData(), globalObject, JSAudioGainPrototype::createStructure(exec->globalData(), globalObject, JSAudioParamPrototype::self(exec, globalObject)));
}

bool JSAudioGain::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSAudioGain* thisObject = jsCast<JSAudioGain*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSAudioGain, Base>(exec, &JSAudioGainTable, thisObject, propertyName, slot);
}

bool JSAudioGain::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSAudioGain* thisObject = jsCast<JSAudioGain*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSAudioGain, Base>(exec, &JSAudioGainTable, thisObject, propertyName, descriptor);
}

JSValue jsAudioGainConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSAudioGain* domObject = jsCast<JSAudioGain*>(asObject(slotBase));
    return JSAudioGain::getConstructor(exec, domObject->globalObject());
}

JSValue JSAudioGain::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioGainConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, AudioGain* impl)
{
    return wrap<JSAudioGain>(exec, globalObject, impl);
}


}

#endif // ENABLE(WEB_AUDIO)
