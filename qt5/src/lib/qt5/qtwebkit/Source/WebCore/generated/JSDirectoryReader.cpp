/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILE_SYSTEM)

#include "JSDirectoryReader.h"

#include "DirectoryReader.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEntriesCallback.h"
#include "JSErrorCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSDirectoryReaderTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDirectoryReaderConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSDirectoryReaderTable = { 2, 1, JSDirectoryReaderTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSDirectoryReaderConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSDirectoryReaderConstructorTable = { 1, 0, JSDirectoryReaderConstructorTableValues, 0 };
static const HashTable* getJSDirectoryReaderConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSDirectoryReaderConstructorTable);
}

const ClassInfo JSDirectoryReaderConstructor::s_info = { "DirectoryReaderConstructor", &Base::s_info, 0, getJSDirectoryReaderConstructorTable, CREATE_METHOD_TABLE(JSDirectoryReaderConstructor) };

JSDirectoryReaderConstructor::JSDirectoryReaderConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSDirectoryReaderConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSDirectoryReaderPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSDirectoryReaderConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSDirectoryReaderConstructor, JSDOMWrapper>(exec, getJSDirectoryReaderConstructorTable(exec), jsCast<JSDirectoryReaderConstructor*>(cell), propertyName, slot);
}

bool JSDirectoryReaderConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSDirectoryReaderConstructor, JSDOMWrapper>(exec, getJSDirectoryReaderConstructorTable(exec), jsCast<JSDirectoryReaderConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSDirectoryReaderPrototypeTableValues[] =
{
    { "readEntries", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsDirectoryReaderPrototypeFunctionReadEntries), (intptr_t)2, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSDirectoryReaderPrototypeTable = { 2, 1, JSDirectoryReaderPrototypeTableValues, 0 };
static const HashTable* getJSDirectoryReaderPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSDirectoryReaderPrototypeTable);
}

const ClassInfo JSDirectoryReaderPrototype::s_info = { "DirectoryReaderPrototype", &Base::s_info, 0, getJSDirectoryReaderPrototypeTable, CREATE_METHOD_TABLE(JSDirectoryReaderPrototype) };

JSObject* JSDirectoryReaderPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDirectoryReader>(exec, globalObject);
}

bool JSDirectoryReaderPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDirectoryReaderPrototype* thisObject = jsCast<JSDirectoryReaderPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, getJSDirectoryReaderPrototypeTable(exec), thisObject, propertyName, slot);
}

bool JSDirectoryReaderPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSDirectoryReaderPrototype* thisObject = jsCast<JSDirectoryReaderPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, getJSDirectoryReaderPrototypeTable(exec), thisObject, propertyName, descriptor);
}

static const HashTable* getJSDirectoryReaderTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSDirectoryReaderTable);
}

const ClassInfo JSDirectoryReader::s_info = { "DirectoryReader", &Base::s_info, 0, getJSDirectoryReaderTable , CREATE_METHOD_TABLE(JSDirectoryReader) };

JSDirectoryReader::JSDirectoryReader(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<DirectoryReader> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSDirectoryReader::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSDirectoryReader::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSDirectoryReaderPrototype::create(exec->globalData(), globalObject, JSDirectoryReaderPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSDirectoryReader::destroy(JSC::JSCell* cell)
{
    JSDirectoryReader* thisObject = static_cast<JSDirectoryReader*>(cell);
    thisObject->JSDirectoryReader::~JSDirectoryReader();
}

JSDirectoryReader::~JSDirectoryReader()
{
    releaseImplIfNotNull();
}

bool JSDirectoryReader::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDirectoryReader* thisObject = jsCast<JSDirectoryReader*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSDirectoryReader, Base>(exec, getJSDirectoryReaderTable(exec), thisObject, propertyName, slot);
}

bool JSDirectoryReader::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSDirectoryReader* thisObject = jsCast<JSDirectoryReader*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSDirectoryReader, Base>(exec, getJSDirectoryReaderTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsDirectoryReaderConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSDirectoryReader* domObject = jsCast<JSDirectoryReader*>(asObject(slotBase));
    return JSDirectoryReader::getConstructor(exec, domObject->globalObject());
}

JSValue JSDirectoryReader::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDirectoryReaderConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDirectoryReaderPrototypeFunctionReadEntries(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSDirectoryReader::s_info))
        return throwVMTypeError(exec);
    JSDirectoryReader* castedThis = jsCast<JSDirectoryReader*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSDirectoryReader::s_info);
    DirectoryReader* impl = static_cast<DirectoryReader*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<EntriesCallback> successCallback = JSEntriesCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<ErrorCallback> errorCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        errorCallback = JSErrorCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    impl->readEntries(successCallback, errorCallback);
    return JSValue::encode(jsUndefined());
}

static inline bool isObservable(JSDirectoryReader* jsDirectoryReader)
{
    if (jsDirectoryReader->hasCustomProperties())
        return true;
    return false;
}

bool JSDirectoryReaderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSDirectoryReader* jsDirectoryReader = jsCast<JSDirectoryReader*>(handle.get().asCell());
    if (!isObservable(jsDirectoryReader))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSDirectoryReaderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSDirectoryReader* jsDirectoryReader = jsCast<JSDirectoryReader*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsDirectoryReader->impl(), jsDirectoryReader);
    jsDirectoryReader->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, DirectoryReader* impl)
{
    return wrap<JSDirectoryReader>(exec, globalObject, impl);
}

DirectoryReader* toDirectoryReader(JSC::JSValue value)
{
    return value.inherits(&JSDirectoryReader::s_info) ? jsCast<JSDirectoryReader*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(FILE_SYSTEM)
