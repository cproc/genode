/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBAny.h"

#include "IDBAny.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSIDBAnyTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBAnyConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIDBAnyTable = { 2, 1, JSIDBAnyTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSIDBAnyConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIDBAnyConstructorTable = { 1, 0, JSIDBAnyConstructorTableValues, 0 };
static const HashTable* getJSIDBAnyConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSIDBAnyConstructorTable);
}

const ClassInfo JSIDBAnyConstructor::s_info = { "IDBAnyConstructor", &Base::s_info, 0, getJSIDBAnyConstructorTable, CREATE_METHOD_TABLE(JSIDBAnyConstructor) };

JSIDBAnyConstructor::JSIDBAnyConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSIDBAnyConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSIDBAnyPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSIDBAnyConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSIDBAnyConstructor, JSDOMWrapper>(exec, getJSIDBAnyConstructorTable(exec), jsCast<JSIDBAnyConstructor*>(cell), propertyName, slot);
}

bool JSIDBAnyConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSIDBAnyConstructor, JSDOMWrapper>(exec, getJSIDBAnyConstructorTable(exec), jsCast<JSIDBAnyConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSIDBAnyPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIDBAnyPrototypeTable = { 1, 0, JSIDBAnyPrototypeTableValues, 0 };
static const HashTable* getJSIDBAnyPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSIDBAnyPrototypeTable);
}

const ClassInfo JSIDBAnyPrototype::s_info = { "IDBAnyPrototype", &Base::s_info, 0, getJSIDBAnyPrototypeTable, CREATE_METHOD_TABLE(JSIDBAnyPrototype) };

JSObject* JSIDBAnyPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBAny>(exec, globalObject);
}

static const HashTable* getJSIDBAnyTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSIDBAnyTable);
}

const ClassInfo JSIDBAny::s_info = { "IDBAny", &Base::s_info, 0, getJSIDBAnyTable , CREATE_METHOD_TABLE(JSIDBAny) };

JSIDBAny::JSIDBAny(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<IDBAny> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSIDBAny::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSIDBAny::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSIDBAnyPrototype::create(exec->globalData(), globalObject, JSIDBAnyPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSIDBAny::destroy(JSC::JSCell* cell)
{
    JSIDBAny* thisObject = static_cast<JSIDBAny*>(cell);
    thisObject->JSIDBAny::~JSIDBAny();
}

JSIDBAny::~JSIDBAny()
{
    releaseImplIfNotNull();
}

bool JSIDBAny::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSIDBAny* thisObject = jsCast<JSIDBAny*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSIDBAny, Base>(exec, getJSIDBAnyTable(exec), thisObject, propertyName, slot);
}

bool JSIDBAny::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSIDBAny* thisObject = jsCast<JSIDBAny*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSIDBAny, Base>(exec, getJSIDBAnyTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsIDBAnyConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSIDBAny* domObject = jsCast<JSIDBAny*>(asObject(slotBase));
    return JSIDBAny::getConstructor(exec, domObject->globalObject());
}

JSValue JSIDBAny::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBAnyConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSIDBAny* jsIDBAny)
{
    if (jsIDBAny->hasCustomProperties())
        return true;
    return false;
}

bool JSIDBAnyOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSIDBAny* jsIDBAny = jsCast<JSIDBAny*>(handle.get().asCell());
    if (!isObservable(jsIDBAny))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSIDBAnyOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSIDBAny* jsIDBAny = jsCast<JSIDBAny*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsIDBAny->impl(), jsIDBAny);
    jsIDBAny->releaseImpl();
}

IDBAny* toIDBAny(JSC::JSValue value)
{
    return value.inherits(&JSIDBAny::s_info) ? jsCast<JSIDBAny*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(INDEXED_DATABASE)
