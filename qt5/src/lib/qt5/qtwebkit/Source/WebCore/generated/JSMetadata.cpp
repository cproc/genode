/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILE_SYSTEM)

#include "JSMetadata.h"

#include "Metadata.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSMetadataTableValues[] =
{
    { "modificationTime", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMetadataModificationTime), (intptr_t)0, NoIntrinsic },
    { "size", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMetadataSize), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMetadataConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMetadataTable = { 8, 7, JSMetadataTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSMetadataConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMetadataConstructorTable = { 1, 0, JSMetadataConstructorTableValues, 0 };
static const HashTable* getJSMetadataConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSMetadataConstructorTable);
}

const ClassInfo JSMetadataConstructor::s_info = { "MetadataConstructor", &Base::s_info, 0, getJSMetadataConstructorTable, CREATE_METHOD_TABLE(JSMetadataConstructor) };

JSMetadataConstructor::JSMetadataConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSMetadataConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSMetadataPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSMetadataConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSMetadataConstructor, JSDOMWrapper>(exec, getJSMetadataConstructorTable(exec), jsCast<JSMetadataConstructor*>(cell), propertyName, slot);
}

bool JSMetadataConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSMetadataConstructor, JSDOMWrapper>(exec, getJSMetadataConstructorTable(exec), jsCast<JSMetadataConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSMetadataPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSMetadataPrototypeTable = { 1, 0, JSMetadataPrototypeTableValues, 0 };
static const HashTable* getJSMetadataPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSMetadataPrototypeTable);
}

const ClassInfo JSMetadataPrototype::s_info = { "MetadataPrototype", &Base::s_info, 0, getJSMetadataPrototypeTable, CREATE_METHOD_TABLE(JSMetadataPrototype) };

JSObject* JSMetadataPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMetadata>(exec, globalObject);
}

static const HashTable* getJSMetadataTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSMetadataTable);
}

const ClassInfo JSMetadata::s_info = { "Metadata", &Base::s_info, 0, getJSMetadataTable , CREATE_METHOD_TABLE(JSMetadata) };

JSMetadata::JSMetadata(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<Metadata> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSMetadata::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSMetadata::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSMetadataPrototype::create(exec->globalData(), globalObject, JSMetadataPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSMetadata::destroy(JSC::JSCell* cell)
{
    JSMetadata* thisObject = static_cast<JSMetadata*>(cell);
    thisObject->JSMetadata::~JSMetadata();
}

JSMetadata::~JSMetadata()
{
    releaseImplIfNotNull();
}

bool JSMetadata::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSMetadata* thisObject = jsCast<JSMetadata*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSMetadata, Base>(exec, getJSMetadataTable(exec), thisObject, propertyName, slot);
}

bool JSMetadata::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSMetadata* thisObject = jsCast<JSMetadata*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSMetadata, Base>(exec, getJSMetadataTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsMetadataModificationTime(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSMetadata* castedThis = jsCast<JSMetadata*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Metadata* impl = static_cast<Metadata*>(castedThis->impl());
    JSValue result = jsDateOrNull(exec, impl->modificationTime());
    return result;
}


JSValue jsMetadataSize(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSMetadata* castedThis = jsCast<JSMetadata*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    Metadata* impl = static_cast<Metadata*>(castedThis->impl());
    JSValue result = jsNumber(impl->size());
    return result;
}


JSValue jsMetadataConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSMetadata* domObject = jsCast<JSMetadata*>(asObject(slotBase));
    return JSMetadata::getConstructor(exec, domObject->globalObject());
}

JSValue JSMetadata::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMetadataConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSMetadata* jsMetadata)
{
    if (jsMetadata->hasCustomProperties())
        return true;
    return false;
}

bool JSMetadataOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSMetadata* jsMetadata = jsCast<JSMetadata*>(handle.get().asCell());
    if (!isObservable(jsMetadata))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSMetadataOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSMetadata* jsMetadata = jsCast<JSMetadata*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsMetadata->impl(), jsMetadata);
    jsMetadata->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, Metadata* impl)
{
    return wrap<JSMetadata>(exec, globalObject, impl);
}

Metadata* toMetadata(JSC::JSValue value)
{
    return value.inherits(&JSMetadata::s_info) ? jsCast<JSMetadata*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(FILE_SYSTEM)
