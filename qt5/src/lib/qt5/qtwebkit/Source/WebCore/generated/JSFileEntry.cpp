/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILE_SYSTEM)

#include "JSFileEntry.h"

#include "ExceptionCode.h"
#include "FileEntry.h"
#include "JSDOMBinding.h"
#include "JSErrorCallback.h"
#include "JSFileCallback.h"
#include "JSFileWriterCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSFileEntryTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileEntryConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileEntryTable = { 2, 1, JSFileEntryTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSFileEntryConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileEntryConstructorTable = { 1, 0, JSFileEntryConstructorTableValues, 0 };
static const HashTable* getJSFileEntryConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileEntryConstructorTable);
}

const ClassInfo JSFileEntryConstructor::s_info = { "FileEntryConstructor", &Base::s_info, 0, getJSFileEntryConstructorTable, CREATE_METHOD_TABLE(JSFileEntryConstructor) };

JSFileEntryConstructor::JSFileEntryConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSFileEntryConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSFileEntryPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSFileEntryConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSFileEntryConstructor, JSDOMWrapper>(exec, getJSFileEntryConstructorTable(exec), jsCast<JSFileEntryConstructor*>(cell), propertyName, slot);
}

bool JSFileEntryConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSFileEntryConstructor, JSDOMWrapper>(exec, getJSFileEntryConstructorTable(exec), jsCast<JSFileEntryConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSFileEntryPrototypeTableValues[] =
{
    { "createWriter", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsFileEntryPrototypeFunctionCreateWriter), (intptr_t)2, NoIntrinsic },
    { "file", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsFileEntryPrototypeFunctionFile), (intptr_t)2, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileEntryPrototypeTable = { 5, 3, JSFileEntryPrototypeTableValues, 0 };
static const HashTable* getJSFileEntryPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileEntryPrototypeTable);
}

const ClassInfo JSFileEntryPrototype::s_info = { "FileEntryPrototype", &Base::s_info, 0, getJSFileEntryPrototypeTable, CREATE_METHOD_TABLE(JSFileEntryPrototype) };

JSObject* JSFileEntryPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFileEntry>(exec, globalObject);
}

bool JSFileEntryPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSFileEntryPrototype* thisObject = jsCast<JSFileEntryPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, getJSFileEntryPrototypeTable(exec), thisObject, propertyName, slot);
}

bool JSFileEntryPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSFileEntryPrototype* thisObject = jsCast<JSFileEntryPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, getJSFileEntryPrototypeTable(exec), thisObject, propertyName, descriptor);
}

static const HashTable* getJSFileEntryTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileEntryTable);
}

const ClassInfo JSFileEntry::s_info = { "FileEntry", &Base::s_info, 0, getJSFileEntryTable , CREATE_METHOD_TABLE(JSFileEntry) };

JSFileEntry::JSFileEntry(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<FileEntry> impl)
    : JSEntry(structure, globalObject, impl)
{
}

void JSFileEntry::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSFileEntry::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSFileEntryPrototype::create(exec->globalData(), globalObject, JSFileEntryPrototype::createStructure(exec->globalData(), globalObject, JSEntryPrototype::self(exec, globalObject)));
}

bool JSFileEntry::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSFileEntry* thisObject = jsCast<JSFileEntry*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSFileEntry, Base>(exec, getJSFileEntryTable(exec), thisObject, propertyName, slot);
}

bool JSFileEntry::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSFileEntry* thisObject = jsCast<JSFileEntry*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSFileEntry, Base>(exec, getJSFileEntryTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsFileEntryConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSFileEntry* domObject = jsCast<JSFileEntry*>(asObject(slotBase));
    return JSFileEntry::getConstructor(exec, domObject->globalObject());
}

JSValue JSFileEntry::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFileEntryConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsFileEntryPrototypeFunctionCreateWriter(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileEntry::s_info))
        return throwVMTypeError(exec);
    JSFileEntry* castedThis = jsCast<JSFileEntry*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSFileEntry::s_info);
    FileEntry* impl = static_cast<FileEntry*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<FileWriterCallback> successCallback = JSFileWriterCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<ErrorCallback> errorCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        errorCallback = JSErrorCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    impl->createWriter(successCallback, errorCallback);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsFileEntryPrototypeFunctionFile(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileEntry::s_info))
        return throwVMTypeError(exec);
    JSFileEntry* castedThis = jsCast<JSFileEntry*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSFileEntry::s_info);
    FileEntry* impl = static_cast<FileEntry*>(castedThis->impl());
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<FileCallback> successCallback = JSFileCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<ErrorCallback> errorCallback;
    if (exec->argumentCount() > 1 && !exec->argument(1).isUndefinedOrNull()) {
        if (!exec->argument(1).isFunction())
            return throwVMTypeError(exec);
        errorCallback = JSErrorCallback::create(asObject(exec->argument(1)), castedThis->globalObject());
    }
    impl->file(successCallback, errorCallback);
    return JSValue::encode(jsUndefined());
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, FileEntry* impl)
{
    return wrap<JSFileEntry>(exec, globalObject, impl);
}

FileEntry* toFileEntry(JSC::JSValue value)
{
    return value.inherits(&JSFileEntry::s_info) ? jsCast<JSFileEntry*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(FILE_SYSTEM)
