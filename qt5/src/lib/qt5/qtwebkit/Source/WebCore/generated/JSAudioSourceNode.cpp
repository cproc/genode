/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSAudioSourceNode.h"

#include "AudioSourceNode.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSAudioSourceNodeTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAudioSourceNodeConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioSourceNodeTable = { 2, 1, JSAudioSourceNodeTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSAudioSourceNodeConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioSourceNodeConstructorTable = { 1, 0, JSAudioSourceNodeConstructorTableValues, 0 };
const ClassInfo JSAudioSourceNodeConstructor::s_info = { "AudioSourceNodeConstructor", &Base::s_info, &JSAudioSourceNodeConstructorTable, 0, CREATE_METHOD_TABLE(JSAudioSourceNodeConstructor) };

JSAudioSourceNodeConstructor::JSAudioSourceNodeConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSAudioSourceNodeConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSAudioSourceNodePrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSAudioSourceNodeConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSAudioSourceNodeConstructor, JSDOMWrapper>(exec, &JSAudioSourceNodeConstructorTable, jsCast<JSAudioSourceNodeConstructor*>(cell), propertyName, slot);
}

bool JSAudioSourceNodeConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSAudioSourceNodeConstructor, JSDOMWrapper>(exec, &JSAudioSourceNodeConstructorTable, jsCast<JSAudioSourceNodeConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSAudioSourceNodePrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSAudioSourceNodePrototypeTable = { 1, 0, JSAudioSourceNodePrototypeTableValues, 0 };
const ClassInfo JSAudioSourceNodePrototype::s_info = { "AudioSourceNodePrototype", &Base::s_info, &JSAudioSourceNodePrototypeTable, 0, CREATE_METHOD_TABLE(JSAudioSourceNodePrototype) };

JSObject* JSAudioSourceNodePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAudioSourceNode>(exec, globalObject);
}

const ClassInfo JSAudioSourceNode::s_info = { "AudioSourceNode", &Base::s_info, &JSAudioSourceNodeTable, 0 , CREATE_METHOD_TABLE(JSAudioSourceNode) };

JSAudioSourceNode::JSAudioSourceNode(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<AudioSourceNode> impl)
    : JSAudioNode(structure, globalObject, impl)
{
}

void JSAudioSourceNode::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSAudioSourceNode::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSAudioSourceNodePrototype::create(exec->globalData(), globalObject, JSAudioSourceNodePrototype::createStructure(exec->globalData(), globalObject, JSAudioNodePrototype::self(exec, globalObject)));
}

bool JSAudioSourceNode::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSAudioSourceNode* thisObject = jsCast<JSAudioSourceNode*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSAudioSourceNode, Base>(exec, &JSAudioSourceNodeTable, thisObject, propertyName, slot);
}

bool JSAudioSourceNode::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSAudioSourceNode* thisObject = jsCast<JSAudioSourceNode*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSAudioSourceNode, Base>(exec, &JSAudioSourceNodeTable, thisObject, propertyName, descriptor);
}

JSValue jsAudioSourceNodeConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSAudioSourceNode* domObject = jsCast<JSAudioSourceNode*>(asObject(slotBase));
    return JSAudioSourceNode::getConstructor(exec, domObject->globalObject());
}

JSValue JSAudioSourceNode::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAudioSourceNodeConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(WEB_AUDIO)
