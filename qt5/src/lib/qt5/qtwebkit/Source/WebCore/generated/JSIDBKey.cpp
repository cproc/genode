/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBKey.h"

#include "IDBKey.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSIDBKeyTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBKeyConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIDBKeyTable = { 2, 1, JSIDBKeyTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSIDBKeyConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIDBKeyConstructorTable = { 1, 0, JSIDBKeyConstructorTableValues, 0 };
static const HashTable* getJSIDBKeyConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSIDBKeyConstructorTable);
}

const ClassInfo JSIDBKeyConstructor::s_info = { "IDBKeyConstructor", &Base::s_info, 0, getJSIDBKeyConstructorTable, CREATE_METHOD_TABLE(JSIDBKeyConstructor) };

JSIDBKeyConstructor::JSIDBKeyConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSIDBKeyConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSIDBKeyPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSIDBKeyConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSIDBKeyConstructor, JSDOMWrapper>(exec, getJSIDBKeyConstructorTable(exec), jsCast<JSIDBKeyConstructor*>(cell), propertyName, slot);
}

bool JSIDBKeyConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSIDBKeyConstructor, JSDOMWrapper>(exec, getJSIDBKeyConstructorTable(exec), jsCast<JSIDBKeyConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSIDBKeyPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSIDBKeyPrototypeTable = { 1, 0, JSIDBKeyPrototypeTableValues, 0 };
static const HashTable* getJSIDBKeyPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSIDBKeyPrototypeTable);
}

const ClassInfo JSIDBKeyPrototype::s_info = { "IDBKeyPrototype", &Base::s_info, 0, getJSIDBKeyPrototypeTable, CREATE_METHOD_TABLE(JSIDBKeyPrototype) };

JSObject* JSIDBKeyPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBKey>(exec, globalObject);
}

static const HashTable* getJSIDBKeyTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSIDBKeyTable);
}

const ClassInfo JSIDBKey::s_info = { "IDBKey", &Base::s_info, 0, getJSIDBKeyTable , CREATE_METHOD_TABLE(JSIDBKey) };

JSIDBKey::JSIDBKey(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<IDBKey> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSIDBKey::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSIDBKey::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSIDBKeyPrototype::create(exec->globalData(), globalObject, JSIDBKeyPrototype::createStructure(globalObject->globalData(), globalObject, globalObject->objectPrototype()));
}

void JSIDBKey::destroy(JSC::JSCell* cell)
{
    JSIDBKey* thisObject = static_cast<JSIDBKey*>(cell);
    thisObject->JSIDBKey::~JSIDBKey();
}

JSIDBKey::~JSIDBKey()
{
    releaseImplIfNotNull();
}

bool JSIDBKey::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSIDBKey* thisObject = jsCast<JSIDBKey*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSIDBKey, Base>(exec, getJSIDBKeyTable(exec), thisObject, propertyName, slot);
}

bool JSIDBKey::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSIDBKey* thisObject = jsCast<JSIDBKey*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSIDBKey, Base>(exec, getJSIDBKeyTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsIDBKeyConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSIDBKey* domObject = jsCast<JSIDBKey*>(asObject(slotBase));
    return JSIDBKey::getConstructor(exec, domObject->globalObject());
}

JSValue JSIDBKey::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBKeyConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSIDBKey* jsIDBKey)
{
    if (jsIDBKey->hasCustomProperties())
        return true;
    return false;
}

bool JSIDBKeyOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSIDBKey* jsIDBKey = jsCast<JSIDBKey*>(handle.get().asCell());
    if (!isObservable(jsIDBKey))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSIDBKeyOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSIDBKey* jsIDBKey = jsCast<JSIDBKey*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsIDBKey->impl(), jsIDBKey);
    jsIDBKey->releaseImpl();
}

IDBKey* toIDBKey(JSC::JSValue value)
{
    return value.inherits(&JSIDBKey::s_info) ? jsCast<JSIDBKey*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(INDEXED_DATABASE)
