/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILE_SYSTEM)

#include "JSFileEntrySync.h"

#include "ExceptionCode.h"
#include "File.h"
#include "FileEntrySync.h"
#include "FileWriterSync.h"
#include "JSDOMBinding.h"
#include "JSFile.h"
#include "JSFileWriterSync.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSFileEntrySyncTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileEntrySyncConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileEntrySyncTable = { 2, 1, JSFileEntrySyncTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSFileEntrySyncConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileEntrySyncConstructorTable = { 1, 0, JSFileEntrySyncConstructorTableValues, 0 };
static const HashTable* getJSFileEntrySyncConstructorTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileEntrySyncConstructorTable);
}

const ClassInfo JSFileEntrySyncConstructor::s_info = { "FileEntrySyncConstructor", &Base::s_info, 0, getJSFileEntrySyncConstructorTable, CREATE_METHOD_TABLE(JSFileEntrySyncConstructor) };

JSFileEntrySyncConstructor::JSFileEntrySyncConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSFileEntrySyncConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->globalData());
    ASSERT(inherits(&s_info));
    putDirect(exec->globalData(), exec->propertyNames().prototype, JSFileEntrySyncPrototype::self(exec, globalObject), DontDelete | ReadOnly);
}

bool JSFileEntrySyncConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSFileEntrySyncConstructor, JSDOMWrapper>(exec, getJSFileEntrySyncConstructorTable(exec), jsCast<JSFileEntrySyncConstructor*>(cell), propertyName, slot);
}

bool JSFileEntrySyncConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSFileEntrySyncConstructor, JSDOMWrapper>(exec, getJSFileEntrySyncConstructorTable(exec), jsCast<JSFileEntrySyncConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSFileEntrySyncPrototypeTableValues[] =
{
    { "file", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsFileEntrySyncPrototypeFunctionFile), (intptr_t)0, NoIntrinsic },
    { "createWriter", DontDelete | JSC::Function, (intptr_t)static_cast<NativeFunction>(jsFileEntrySyncPrototypeFunctionCreateWriter), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSFileEntrySyncPrototypeTable = { 5, 3, JSFileEntrySyncPrototypeTableValues, 0 };
static const HashTable* getJSFileEntrySyncPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileEntrySyncPrototypeTable);
}

const ClassInfo JSFileEntrySyncPrototype::s_info = { "FileEntrySyncPrototype", &Base::s_info, 0, getJSFileEntrySyncPrototypeTable, CREATE_METHOD_TABLE(JSFileEntrySyncPrototype) };

JSObject* JSFileEntrySyncPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFileEntrySync>(exec, globalObject);
}

bool JSFileEntrySyncPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSFileEntrySyncPrototype* thisObject = jsCast<JSFileEntrySyncPrototype*>(cell);
    return getStaticFunctionSlot<JSObject>(exec, getJSFileEntrySyncPrototypeTable(exec), thisObject, propertyName, slot);
}

bool JSFileEntrySyncPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSFileEntrySyncPrototype* thisObject = jsCast<JSFileEntrySyncPrototype*>(object);
    return getStaticFunctionDescriptor<JSObject>(exec, getJSFileEntrySyncPrototypeTable(exec), thisObject, propertyName, descriptor);
}

static const HashTable* getJSFileEntrySyncTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->globalData(), &JSFileEntrySyncTable);
}

const ClassInfo JSFileEntrySync::s_info = { "FileEntrySync", &Base::s_info, 0, getJSFileEntrySyncTable , CREATE_METHOD_TABLE(JSFileEntrySync) };

JSFileEntrySync::JSFileEntrySync(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<FileEntrySync> impl)
    : JSEntrySync(structure, globalObject, impl)
{
}

void JSFileEntrySync::finishCreation(JSGlobalData& globalData)
{
    Base::finishCreation(globalData);
    ASSERT(inherits(&s_info));
}

JSObject* JSFileEntrySync::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSFileEntrySyncPrototype::create(exec->globalData(), globalObject, JSFileEntrySyncPrototype::createStructure(exec->globalData(), globalObject, JSEntrySyncPrototype::self(exec, globalObject)));
}

bool JSFileEntrySync::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSFileEntrySync* thisObject = jsCast<JSFileEntrySync*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSFileEntrySync, Base>(exec, getJSFileEntrySyncTable(exec), thisObject, propertyName, slot);
}

bool JSFileEntrySync::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSFileEntrySync* thisObject = jsCast<JSFileEntrySync*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSFileEntrySync, Base>(exec, getJSFileEntrySyncTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsFileEntrySyncConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSFileEntrySync* domObject = jsCast<JSFileEntrySync*>(asObject(slotBase));
    return JSFileEntrySync::getConstructor(exec, domObject->globalObject());
}

JSValue JSFileEntrySync::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFileEntrySyncConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsFileEntrySyncPrototypeFunctionFile(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileEntrySync::s_info))
        return throwVMTypeError(exec);
    JSFileEntrySync* castedThis = jsCast<JSFileEntrySync*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSFileEntrySync::s_info);
    FileEntrySync* impl = static_cast<FileEntrySync*>(castedThis->impl());
    ExceptionCode ec = 0;

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->file(ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsFileEntrySyncPrototypeFunctionCreateWriter(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSFileEntrySync::s_info))
        return throwVMTypeError(exec);
    JSFileEntrySync* castedThis = jsCast<JSFileEntrySync*>(asObject(thisValue));
    ASSERT_GC_OBJECT_INHERITS(castedThis, &JSFileEntrySync::s_info);
    FileEntrySync* impl = static_cast<FileEntrySync*>(castedThis->impl());
    ExceptionCode ec = 0;

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->createWriter(ec)));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, FileEntrySync* impl)
{
    return wrap<JSFileEntrySync>(exec, globalObject, impl);
}

FileEntrySync* toFileEntrySync(JSC::JSValue value)
{
    return value.inherits(&JSFileEntrySync::s_info) ? jsCast<JSFileEntrySync*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(FILE_SYSTEM)
