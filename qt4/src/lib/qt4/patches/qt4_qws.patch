qt4_qws.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>


---
 include/QtCore/qconfig.h                           |    2 -
 .../JavaScriptCore/runtime/Collector.cpp           |   21 +++++++
 .../JavaScriptCore/wtf/FastMalloc.cpp              |    2 -
 .../javascriptcore/JavaScriptCore/wtf/Platform.h   |   19 +++++-
 .../JavaScriptCore/wtf/TCSystemAlloc.cpp           |   21 +++++++
 src/3rdparty/webkit/Source/JavaScriptCore/config.h |    2 -
 .../Source/JavaScriptCore/wtf/FastMalloc.cpp       |    4 +
 .../webkit/Source/JavaScriptCore/wtf/Platform.h    |   25 +++++++-
 .../Source/JavaScriptCore/wtf/StackBounds.cpp      |   12 ++++
 .../Source/JavaScriptCore/wtf/TCSystemAlloc.cpp    |   21 +++++++
 .../Source/WebCore/generated/JSDOMWindow.cpp       |    4 +
 .../Source/WebCore/generated/JSWorkerContext.cpp   |    4 +
 .../webkit/Source/WebCore/loader/icon/IconRecord.h |    2 -
 src/3rdparty/webkit/Source/WebCore/page/Page.h     |    2 -
 .../platform/network/ResourceResponseBase.h        |    2 -
 src/corelib/codecs/qtextcodec.cpp                  |    2 -
 src/corelib/global/qglobal.cpp                     |    6 ++
 src/corelib/global/qglobal.h                       |    5 +-
 src/corelib/io/qprocess.cpp                        |   63 ++++++++++++++++++++
 src/corelib/io/qprocess_p.h                        |   45 ++++++++++++++
 src/corelib/io/qresource.cpp                       |    2 -
 src/corelib/kernel/qcoreapplication.cpp            |   10 +++
 src/corelib/kernel/qtranslator.cpp                 |    2 -
 src/corelib/plugin/qpluginloader.cpp               |   43 ++++++++++++-
 src/corelib/plugin/qpluginloader.h                 |   13 +++-
 src/corelib/thread/qmutex_p.h                      |   10 +++
 src/corelib/thread/qthread.cpp                     |    5 ++
 src/corelib/thread/qthread_p.h                     |   56 +++++++++++++++++-
 src/corelib/tools/qdatetime.cpp                    |   12 ++++
 src/gui/dialogs/qfiledialog.cpp                    |    2 -
 src/gui/embedded/qscreendriverfactory_qws.cpp      |   14 ++++
 src/gui/embedded/qwindowsystem_qws.cpp             |    9 +++
 src/gui/image/qpnghandler.cpp                      |   33 +++++++---
 src/gui/image/qxpmhandler.cpp                      |    8 +++
 src/gui/kernel/qapplication.cpp                    |   64 ++++++++++++++++++--
 src/gui/kernel/qapplication_qws.cpp                |   14 ++++
 src/gui/kernel/qeventdispatcher_qws.cpp            |   20 ++++++
 src/gui/kernel/qeventdispatcher_qws_p.h            |   12 ++++
 src/gui/text/qfontdatabase_qws.cpp                 |   37 ++++++++++++
 src/gui/text/qfontengine_qws.cpp                   |   25 ++++++++
 src/network/access/qnetworkaccessfilebackend.cpp   |    5 ++
 src/network/kernel/qhostinfo_unix.cpp              |    7 ++
 tools/designer/src/lib/uilib/formbuilder.cpp       |    5 +-
 tools/designer/src/uitools/quiloader.cpp           |    3 +
 44 files changed, 618 insertions(+), 57 deletions(-)

diff --git a/src/gui/embedded/qscreendriverfactory_qws.cpp b/src/gui/embedded/qscreendriverfactory_qws.cpp
index 6726064..5726a90 100644
--- a/src/gui/embedded/qscreendriverfactory_qws.cpp
+++ b/src/gui/embedded/qscreendriverfactory_qws.cpp
@@ -49,6 +49,9 @@
 #include "qscreenmulti_qws_p.h"
 #include "qscreenqnx_qws.h"
 #include "qscreenintegrityfb_qws.h"
+#ifdef Q_OS_GENODE
+#include "qscreennitpicker_qws.h"
+#endif
 #include <stdlib.h>
 #include "private/qfactoryloader_p.h"
 #include "qscreendriverplugin_qws.h"
@@ -141,6 +144,12 @@ QScreen *QScreenDriverFactory::create(const QString& key, int displayId)
     if (driver == QLatin1String("multi"))
         return new QMultiScreen(displayId);
 #endif
+#ifdef Q_OS_GENODE
+#ifndef QT_NO_QWS_NITPICKER
+    if (driver == QLatin1String("nitpicker") || driver.isEmpty())
+        return new QNitpickerScreen(displayId);
+#endif
+#endif
 #if !defined(Q_OS_WIN32) || defined(QT_MAKEDLL)
 #ifndef QT_NO_LIBRARY
 
@@ -182,6 +191,11 @@ QStringList QScreenDriverFactory::keys()
 #ifndef QT_NO_QWS_MULTISCREEN
     list << QLatin1String("Multi");
 #endif
+#ifdef Q_OS_GENODE
+#ifndef QT_NO_QWS_NITPICKER
+    list << QLatin1String("Nitpicker");
+#endif
+#endif
 
 #if !defined(Q_OS_WIN32) || defined(QT_MAKEDLL)
 #ifndef QT_NO_LIBRARY
diff --git a/src/gui/embedded/qwindowsystem_qws.cpp b/src/gui/embedded/qwindowsystem_qws.cpp
index 9027232..2ea5695 100644
--- a/src/gui/embedded/qwindowsystem_qws.cpp
+++ b/src/gui/embedded/qwindowsystem_qws.cpp
@@ -3360,8 +3360,15 @@ QWSWindow* QWSServerPrivate::findWindow(int windowid, QWSClient* client)
 void QWSServerPrivate::raiseWindow(QWSWindow *changingw, int /*alt*/)
 {
     Q_Q(QWSServer);
-    if (changingw == windows.first())
+
+    if (changingw == windows.first()) {
+#ifndef QT_NO_QWS_NITPICKER
+        // make sure that the Nitpicker view is on top, too
+        emit q->windowEvent(changingw, QWSServer::Raise);
+#endif
         return;
+    }
+
     QWSWindow::State oldstate = changingw->d->state;
     changingw->d->state = QWSWindow::Raising;
     // Expose regions previously overlapped by transparent windows
diff --git a/src/gui/kernel/qapplication.cpp b/src/gui/kernel/qapplication.cpp
index d0db0d9..edc6800 100644
--- a/src/gui/kernel/qapplication.cpp
+++ b/src/gui/kernel/qapplication.cpp
@@ -733,11 +733,23 @@ void QApplicationPrivate::process_cmdline()
 */
 
 QApplication::QApplication(int &argc, char **argv)
-    : QCoreApplication(*new QApplicationPrivate(argc, argv, GuiClient, 0x040000))
+    : QCoreApplication(*new QApplicationPrivate(argc, argv,
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	, 0x040000))
 { Q_D(QApplication); d->construct(); }
 
 QApplication::QApplication(int &argc, char **argv, int _internal)
-    : QCoreApplication(*new QApplicationPrivate(argc, argv, GuiClient, _internal))
+    : QCoreApplication(*new QApplicationPrivate(argc, argv,
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	, _internal))
 { Q_D(QApplication); d->construct(); }
 
 
@@ -767,11 +779,23 @@ QApplication::QApplication(int &argc, char **argv, int _internal)
 */
 
 QApplication::QApplication(int &argc, char **argv, bool GUIenabled )
-    : QCoreApplication(*new QApplicationPrivate(argc, argv, GUIenabled ? GuiClient : Tty, 0x040000))
+    : QCoreApplication(*new QApplicationPrivate(argc, argv, GUIenabled ?
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	: Tty, 0x040000))
 { Q_D(QApplication); d->construct(); }
 
 QApplication::QApplication(int &argc, char **argv, bool GUIenabled , int _internal)
-    : QCoreApplication(*new QApplicationPrivate(argc, argv, GUIenabled ? GuiClient : Tty, _internal))
+    : QCoreApplication(*new QApplicationPrivate(argc, argv, GUIenabled ?
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	: Tty, _internal))
 { Q_D(QApplication); d->construct();}
 
 
@@ -905,7 +929,13 @@ static char *aargv[] = { (char*)"unknown", 0 };
     This function is only available on X11.
 */
 QApplication::QApplication(Display* dpy, Qt::HANDLE visual, Qt::HANDLE colormap)
-    : QCoreApplication(*new QApplicationPrivate(aargc, aargv, GuiClient, 0x040000))
+    : QCoreApplication(*new QApplicationPrivate(aargc, aargv,
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	, 0x040000))
 {
     if (! dpy)
         qWarning("QApplication: Invalid Display* argument");
@@ -914,7 +944,13 @@ QApplication::QApplication(Display* dpy, Qt::HANDLE visual, Qt::HANDLE colormap)
 }
 
 QApplication::QApplication(Display* dpy, Qt::HANDLE visual, Qt::HANDLE colormap, int _internal)
-    : QCoreApplication(*new QApplicationPrivate(aargc, aargv, GuiClient, _internal))
+    : QCoreApplication(*new QApplicationPrivate(aargc, aargv,
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	, _internal))
 {
     if (! dpy)
         qWarning("QApplication: Invalid Display* argument");
@@ -939,7 +975,13 @@ QApplication::QApplication(Display* dpy, Qt::HANDLE visual, Qt::HANDLE colormap,
 */
 QApplication::QApplication(Display *dpy, int &argc, char **argv,
                            Qt::HANDLE visual, Qt::HANDLE colormap)
-    : QCoreApplication(*new QApplicationPrivate(argc, argv, GuiClient, 0x040000))
+    : QCoreApplication(*new QApplicationPrivate(argc, argv,
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+    	, 0x040000))
 {
     if (! dpy)
         qWarning("QApplication: Invalid Display* argument");
@@ -949,7 +991,13 @@ QApplication::QApplication(Display *dpy, int &argc, char **argv,
 
 QApplication::QApplication(Display *dpy, int &argc, char **argv,
                            Qt::HANDLE visual, Qt::HANDLE colormap, int _internal)
-    : QCoreApplication(*new QApplicationPrivate(argc, argv, GuiClient, _internal))
+    : QCoreApplication(*new QApplicationPrivate(argc, argv,
+#ifndef Q_OS_GENODE
+        GuiClient
+#else
+        GuiServer
+#endif
+        , _internal))
 {
     if (! dpy)
         qWarning("QApplication: Invalid Display* argument");
diff --git a/src/gui/kernel/qapplication_qws.cpp b/src/gui/kernel/qapplication_qws.cpp
index 3ac3544..25851d5 100644
--- a/src/gui/kernel/qapplication_qws.cpp
+++ b/src/gui/kernel/qapplication_qws.cpp
@@ -196,6 +196,7 @@ QString qws_dataDir()
     WaitForFileSystemInitialization();
 #endif
 
+#ifndef Q_OS_GENODE
     if (QT_MKDIR(dataDir, 0700)) {
         if (errno != EEXIST) {
             qFatal("Cannot create Qt for Embedded Linux data directory: %s", dataDir.constData());
@@ -216,6 +217,7 @@ QString qws_dataDir()
     if ((buf.st_mode & 0677) != 0600)
         qFatal("Qt for Embedded Linux data directory has incorrect permissions: %s", dataDir.constData());
 #endif
+#endif /* Q_OS_GENODE */
 
     result.append(QLatin1Char('/'));
     return result;
@@ -463,7 +465,11 @@ void QApplicationPrivate::createEventDispatcher()
 #endif
     eventDispatcher = (q->type() != QApplication::Tty
                        ? new QEventDispatcherQWS(q)
+#ifdef Q_OS_GENODE
+                       : new QEventDispatcherGenode(q));
+#else
                        : new QEventDispatcherUNIX(q));
+#endif
 }
 
 // Single-process stuff. This should maybe move into qwindowsystem_qws.cpp
@@ -2896,9 +2902,15 @@ int QApplication::qwsProcessEvent(QWSEvent* event)
                 // The server has grabbed the mouse for us.
                 // Remember which of my widgets has it.
                 qt_pressGrab = w;
-                if (!widget->isActiveWindow() &&
+                if (
+#ifdef QT_NO_QWS_NITPICKER  // make sure that the Nitpicker view is on top, too
+                    !widget->isActiveWindow() &&
+#endif
                     (!app_do_modal || QApplication::activeModalWidget() == widget) &&
                     !((widget->windowFlags() & Qt::FramelessWindowHint) || (widget->windowType() == Qt::Tool))) {
+#ifndef QT_NO_QWS_NITPICKER
+                    if (!widget->isActiveWindow())
+#endif
                     widget->activateWindow();
                     if (widget->raiseOnClick())
                         widget->raise();
diff --git a/src/gui/kernel/qeventdispatcher_qws.cpp b/src/gui/kernel/qeventdispatcher_qws.cpp
index e26aabc..e64776e 100644
--- a/src/gui/kernel/qeventdispatcher_qws.cpp
+++ b/src/gui/kernel/qeventdispatcher_qws.cpp
@@ -46,7 +46,11 @@
 #include "qwsevent_qws.h"
 #include "qwindowsystem_qws.h"
 #include "qeventdispatcher_qws_p.h"
+#ifdef Q_OS_GENODE
+#include "private/qeventdispatcher_genode_p.h"
+#else
 #include "private/qeventdispatcher_unix_p.h"
+#endif
 #ifndef QT_NO_THREAD
 #  include "qmutex.h"
 #endif
@@ -57,7 +61,11 @@ QT_BEGIN_NAMESPACE
 
 QT_USE_NAMESPACE
 
+#ifdef Q_OS_GENODE
+class QEventDispatcherQWSPrivate : public QEventDispatcherGenodePrivate
+#else
 class QEventDispatcherQWSPrivate : public QEventDispatcherUNIXPrivate
+#endif
 {
     Q_DECLARE_PUBLIC(QEventDispatcherQWS)
 public:
@@ -68,7 +76,11 @@ public:
 
 
 QEventDispatcherQWS::QEventDispatcherQWS(QObject *parent)
+#ifdef Q_OS_GENODE
+    : QEventDispatcherGenode(*new QEventDispatcherQWSPrivate, parent)
+#else
     : QEventDispatcherUNIX(*new QEventDispatcherQWSPrivate, parent)
+#endif
 { }
 
 QEventDispatcherQWS::~QEventDispatcherQWS()
@@ -129,7 +141,11 @@ bool QEventDispatcherQWS::processEvents(QEventLoop::ProcessEventsFlags flags)
             QWSServer::processEventQueue();
         }
 
+#ifdef Q_OS_GENODE
+        if (QEventDispatcherGenode::processEvents(flags))
+#else
         if (QEventDispatcherUNIX::processEvents(flags))
+#endif
             return true;
     }
     return (nevents > 0);
@@ -158,11 +174,11 @@ void QEventDispatcherQWS::flush()
     (void)qt_fbdpy->eventPending(); // flush
 }
 
-
+#ifndef Q_OS_GENODE
 int QEventDispatcherQWS::select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
                                 timeval *timeout)
 {
     return QEventDispatcherUNIX::select(nfds, readfds, writefds, exceptfds, timeout);
 }
-
+#endif
 QT_END_NAMESPACE
diff --git a/src/gui/kernel/qeventdispatcher_qws_p.h b/src/gui/kernel/qeventdispatcher_qws_p.h
index 703057d..64b0469 100644
--- a/src/gui/kernel/qeventdispatcher_qws_p.h
+++ b/src/gui/kernel/qeventdispatcher_qws_p.h
@@ -53,13 +53,23 @@
 // We mean it.
 //
 
+#include "qplatformdefs.h"
+
+#ifdef Q_OS_GENODE
+#include "private/qeventdispatcher_genode_p.h"
+#else
 #include "private/qeventdispatcher_unix_p.h"
+#endif
 
 QT_BEGIN_NAMESPACE
 
 class QEventDispatcherQWSPrivate;
 
+#ifdef Q_OS_GENODE
+class QEventDispatcherQWS : public QEventDispatcherGenode
+#else
 class QEventDispatcherQWS : public QEventDispatcherUNIX
+#endif
 {
     Q_OBJECT
     Q_DECLARE_PRIVATE(QEventDispatcherQWS)
@@ -77,8 +87,10 @@ public:
     void closingDown();
 
 protected:
+#ifndef Q_OS_GENODE
     int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
                timeval *timeout);
+#endif
 };
 
 QT_END_NAMESPACE
diff --git a/src/gui/text/qfontdatabase_qws.cpp b/src/gui/text/qfontdatabase_qws.cpp
index ec925e9..7afcd0a 100644
--- a/src/gui/text/qfontdatabase_qws.cpp
+++ b/src/gui/text/qfontdatabase_qws.cpp
@@ -393,6 +393,43 @@ static void initializeDb()
 
     }
 #endif
+
+    QDir dir(fontpath, QLatin1String("*.qpf"));
+    for (int i=0; i<int(dir.count()); i++) {
+        int u0 = dir[i].indexOf(QLatin1Char('_'));
+        int u1 = dir[i].indexOf(QLatin1Char('_'), u0+1);
+        int u2 = dir[i].indexOf(QLatin1Char('_'), u1+1);
+        int u3 = dir[i].indexOf(QLatin1Char('.'), u1+1);
+        if (u2 < 0) u2 = u3;
+
+        QString familyname = dir[i].left(u0);
+        int pixelSize = dir[i].mid(u0+1,u1-u0-1).toInt()/10;
+        bool italic = dir[i].mid(u2-1,1) == QLatin1String("i");
+        int weight = dir[i].mid(u1+1,u2-u1-1-(italic?1:0)).toInt();
+
+        db->addFont(familyname, /*foundry*/ "qt", weight, italic, pixelSize, QFile::encodeName(dir.absoluteFilePath(dir[i])),
+                    /*fileIndex*/ 0, /*antialiased*/ true);
+    }
+
+#ifndef QT_NO_FREETYPE
+    dir.setNameFilters(QStringList() << QLatin1String("*.ttf")
+                       << QLatin1String("*.ttc") << QLatin1String("*.pfa")
+                       << QLatin1String("*.pfb"));
+    dir.refresh();
+    for (int i = 0; i < int(dir.count()); ++i) {
+        const QByteArray file = QFile::encodeName(dir.absoluteFilePath(dir[i]));
+//        qDebug() << "looking at" << file;
+        QByteArray data;
+        QFile f(file);
+        if (!(f.fileEngine()->fileFlags(QAbstractFileEngine::FlagsMask) & QAbstractFileEngine::LocalDiskFlag)) {
+            if (!f.open(QIODevice::ReadOnly))
+                continue;
+            data = f.readAll();
+        }
+        db->addTTFile(file, data);
+    }
+#endif
+
 #ifndef QT_NO_QWS_QPF2
     QDir dir(fontpath, QLatin1String("*.qpf2"));
     for (int i = 0; i < int(dir.count()); ++i) {
diff --git a/src/gui/text/qfontengine_qws.cpp b/src/gui/text/qfontengine_qws.cpp
index 9b89fae..ec242b7 100644
--- a/src/gui/text/qfontengine_qws.cpp
+++ b/src/gui/text/qfontengine_qws.cpp
@@ -304,6 +304,23 @@ QFontEngineQPF1::QFontEngineQPF1(const QFontDef&, const QString &fn)
 {
     cache_cost = 1;
 
+#ifdef Q_OS_GENODE
+
+    QFile ff(fn);
+    if (!ff.open(QIODevice::ReadOnly)) {
+      qFatal("Failed to open %s", QFile::encodeName(fn).data());
+    }
+
+    uchar* data = new uchar[ff.size()];
+
+    for (int i = 0; i < ff.size(); i++) {
+      ff.getChar(reinterpret_cast<char*>(&data[i]));
+    }
+
+    ff.close();
+
+#else
+
     int fd = QT_OPEN(QFile::encodeName(fn).constData(), O_RDONLY, 0);
     if (fd == -1)
         qFatal("Failed to open '%s'", QFile::encodeName(fn).constData());
@@ -312,7 +329,11 @@ QFontEngineQPF1::QFontEngineQPF1(const QFontDef&, const QString &fn)
     if (QT_FSTAT(fd, &st) != 0)
         qFatal("Failed to stat '%s'", QFile::encodeName(fn).constData());
 
+#endif /* Q_OS_GENODE */
+
     d = new QFontEngineQPF1Data;
+
+#ifndef Q_OS_GENODE
     d->mmapStart = 0;
     d->mmapLength = st.st_size;
 
@@ -338,7 +359,7 @@ QFontEngineQPF1::QFontEngineQPF1(const QFontDef&, const QString &fn)
 
     if (d->mmapStart) {
         uchar* data = d->mmapStart;
-
+#endif /* Q_OS_GENODE */
         memcpy(reinterpret_cast<char*>(&d->fm), data, sizeof(d->fm));
         data += sizeof(d->fm);
 
@@ -356,7 +377,9 @@ QFontEngineQPF1::QFontEngineQPF1(const QFontDef&, const QString &fn)
              << "underlinepos" << d->fm.underlinepos
              << "underlinewidth" << d->fm.underlinewidth;
 #endif
+#ifndef Q_OS_GENODE
     }
+#endif /* Q_OS_GENODE */
 }
 
 QFontEngineQPF1::~QFontEngineQPF1()
