#
# Build
#

build {
	core
	init
	drivers/input/ps2
	drivers/pci
	drivers/framebuffer
	drivers/timer
	server/nitpicker
	server/loader
	server/tar_rom
	test/nitpicker
	test/qpluginwidget
	app/gdb_monitor
	drivers/uart
}

create_boot_directory

#
# Generate config
#

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route> }

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="PCI"/></provides>
	</start>}

append_if [have_spec vesa] config {
	<start name="vesa_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec pl11x] config {
	<start name="pl11x_drv">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
	</start>
	<start name="loader">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Loader"/></provides>
	</start>
	<start name="uart_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Terminal"/> </provides>
		<config>
			<policy label="gdb_monitor" uart="1"/>
		</config>
	</start>
	<start name="gdb_monitor">
		<resource name="RAM" quantum="60M"/>
		<config>
			<target name="test-qpluginwidget"/>
			<preserve name="RAM" quantum="30M"/>
		</config>
	</start>
	
</config>
}

install_config $config

#
# Boot modules
#

exec sh -c "ln -sf ../test/qpluginwidget/test-plugin.tar bin/"

# generic modules
set boot_modules {
	core
	init
	timer
	nitpicker
	loader
	tar_rom
	testnit
	test-qpluginwidget
	dejavusans.lib.so
	freetype.lib.so
	ld.lib.so
	libc.lib.so
	libc_lock_pipe.lib.so
	libm.lib.so
	libpng.lib.so
	jpeg.lib.so
	qt_core.lib.so
	qt_gui.lib.so
	qt_network.lib.so
	zlib.lib.so
	qnitpickerviewwidget.lib.so
	qpluginwidget.lib.so
	test-plugin.tar
	stdcxx.lib.so
	libc_terminal.lib.so
	uart_drv
	gdb_monitor
	libc_log.lib.so
}

# platform-specific modules
lappend_if [have_spec linux] boot_modules fb_sdl
lappend_if [have_spec pci]   boot_modules pci_drv
lappend_if [have_spec vesa]  boot_modules vesa_drv
lappend_if [have_spec ps2]   boot_modules ps2_drv
lappend_if [have_spec pl11x] boot_modules pl11x_drv

build_boot_image $boot_modules

append qemu_args " -m 128"

#
# Execute test case
#
#
set local_port 5555

# connect comport 0 to stdio
append qemu_args " -serial mon:stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait "

run_genode_until {.*Remote debugging using /dev/terminal.*} 30

puts "GDB monitor is up, starting GDB in a new terminal"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds "-ex \"target remote localhost:$local_port\" "

#
# The test breaks into the 'main()' function of the dynamically linked test
# application by using the following gdb command sequence. It's important that
# the 'main()' breakpoint gets set before the 'sharedlibrary' command is
# executed. Otherwise the breakpoint would get set in ld.lib.so's main()
# function.
#

# don't ask for y/n when loading a new symbol file
append gdb_cmds {-ex "set interactive-mode off" }

# load the symbols of ld.lib.so
append gdb_cmds {-ex "symbol-file bin/ld.lib.so" }

# set a breakpoint in the 'call_main()' function
append gdb_cmds {-ex "b call_main" }

# continue execution until the breakpoint triggers
append gdb_cmds {-ex "c" }

# delete the 'call_main()' breakpoint
append gdb_cmds {-ex "delete 1" }

# load the symbols of the test application
append gdb_cmds {-ex "symbol-file bin/test-qpluginwidget" }

# set a breakpoint in the application's 'main()' function
append gdb_cmds {-ex "b main" }

# load the symbols of loaded shared libraries
append gdb_cmds {-ex "sharedlibrary" }

# continue execution until the breakpoint triggers
append gdb_cmds {-ex "c" }

# delete the 'main()' breakpoint
append gdb_cmds {-ex "delete 2" }

# ask the user for confirmations again
append gdb_cmds {-ex "set interactive-mode auto" }

puts "command: [gdb] bin/test-qpluginwidget $gdb_cmds"

exec [terminal] -e "[gdb] bin/test-qpluginwidget $gdb_cmds" &

interact
