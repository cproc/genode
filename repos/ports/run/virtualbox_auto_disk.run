# Tested for nova. 
assert_spec nova
 
set vdi_image "win7.vdi"
# Write overlay back to harddisk if set to 0
set use_ram_fs 0

set build_components { }
set boot_modules { vm_auto_disk.vbox }

set config_of_app {
	<start name="vbox" priority="-2">
		<binary name="virtualbox" />
		<resource name="RAM" quantum="1570M"/>
		<config vbox_file="vm_auto_disk.vbox" vm_name="AutoDisk">
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs>}

append_if [expr $use_ram_fs] config_of_app {
					<dir name="ram">  <fs label="from_ram_fs"/> </dir>}

append config_of_app {
					<dir name="dev"> <log/> </dir>
					<rom name="vm_auto_disk.vbox" />
					<fs />
				</vfs>
			</libc>
		</config>
		<route>}

append_if [expr $use_ram_fs] config_of_app {
			<service name="File_system">
				<if-arg key="label" value="from_ram_fs" />
				<child name="ram_fs"/>
			</service>}

append config_of_app {
			<service name="File_system"> <child name="rump_fs"/> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
}

# copy vbox configuration to bin directory
exec cp ${genode_dir}/repos/ports/run/vm_auto_disk.vbox bin/.

source ${genode_dir}/repos/ports/run/virtualbox_auto.inc

run_genode_until "fb resize : 1024x768@16 -> 720x400@0" 40
run_genode_until "fb resize : 720x400@16 -> 640x480@0"  25 $spawn_id
run_genode_until "fb resize : 640x480@16 -> 800x600@16" 45 $spawn_id
run_genode_until "fb resize : 800x600@16 -> 720x400@0"  120 $spawn_id
run_genode_until "fb resize : 720x400@16 -> 800x600@16" 10 $spawn_id
run_genode_until "fb resize : 800x600@16 -> 720x400@0"  10 $spawn_id
run_genode_until "fb resize : 720x400@16 -> 800x600@16" 10 $spawn_id

# cleanup bin directory - remove vbox file
exec rm bin/vm_auto_disk.vbox

puts "\nTest succeeded"
