if { [have_include "power_on/qemu"] || ![have_spec nova] || ![have_spec x86_64]} {
	puts "Run script is only supported on 64-bit NOVA on real hardware"
	exit 0
}

set build_components {
	drivers/audio
	drivers/framebuffer
	drivers/ps2
	server/log_terminal
	server/fs_rom
	server/vfs lib/vfs/import
	server/report_rom
	virtualbox6
}

source ${genode_dir}/repos/base/run/platform_drv.inc

# override defaults of platform_drv.inc
proc platform_drv_priority {} { return { priority="-1"} }

append_platform_drv_build_components

build $build_components

create_boot_directory

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/src/init \
                  [depot_user]/src/nitpicker \
                  [depot_user]/src/vfs_pipe \
                  [depot_user]/src/jpeg


set config {
<config prio_levels="4">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="VM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="150"/>}

append_platform_drv_config

append config {

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
<!--
	<start name="ps2_drv" priority="-1">
		<resource name="RAM" quantum="1M"/>
		<config/>
	</start>

	<start name="fb_drv" priority="-1">
		<binary name="vesa_fb_drv"/>
		<resource name="RAM" quantum="16M"/>
		<config/>
	</start>
	<start name="nitpicker" priority="-1">
		<resource name="RAM" quantum="12M"/>
		<provides>
			<service name="Gui"/> <service name="Capture"/> <service name="Event"/>
		</provides>
		<route>
			<service name="Report"> <child name="report_rom" /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
		<config>
			<capture/> <event/>
			<report focus="yes" hover="yes" />

			<domain name="pointer"  layer="1" content="client" label="no" origin="pointer" />
			<domain name="cpu_load" layer="2" content="client" label="no" />
			<domain name=""         layer="3" content="client" label="no" focus="click" hover="always" />

			<policy label_prefix="pointer"          domain="pointer"/>
			<policy label_prefix="cpu_load_display" domain="cpu_load"/>
			<default-policy domain=""/>
		</config>
	</start>
	<start name="pointer" priority="-1">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Report"/> </provides>
		<config shapes="yes"/>
		<route>
			<service name="Gui"> <child name="nitpicker"/> </service>
			<service name="ROM" label="hover"> <child name="report_rom"/> </service>
			<service name="ROM" label="xray"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>
-->
	<start name="log_terminal" priority="-1">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Terminal"/>
		</provides>
	</start>
<!--
	<start name="report_rom" priority="-1">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes">
			<policy label="pointer -> hover"                    report="nitpicker -> hover"/>
			<policy label="pointer -> xray"                     report="nitpicker -> xray"/>
		</config>
	</start>
-->
	<start name="audio_drv" priority="-1">
		<binary name="} [audio_drv_binary] {"/>
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="Audio_out"/>
			<service name="Audio_in"/>
		</provides>
		<config verbose="no">
			<mixer field="outputs.master" value="8"/>

			<mixer field="record.adc-0:1_source" value="sel2"/>
			<mixer field="record.adc-0:1" value="255"/>
			<mixer field="record.enable" value="on"/>

		</config>
	</start>

	<start name="virtualbox" caps="800" priority="-2">
		<binary name="virtualbox6"/>
		<resource name="RAM" quantum="4096M"/>
		<config vbox_file="vm_genode_oss.vbox6" vm_name="TestVM" xhci="no">
			<vfs>
				<dir name="dev">
					<log/> <null/> <zero/> <oss name="dsp"/> <terminal/>
					<inline name="rtc">2021-10-26 00:01</inline> 
				</dir>
				<dir name="pipe"> <pipe/> </dir>
				<rom name="vm_genode_oss.vbox6" />
				<rom name="oss.iso" />
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" pipe="/pipe" rtc="/dev/rtc">
				 <pthread placement="single-cpu"/>
			</libc>
			<arg value="virtualbox"/>
			<env key="VBOX_USER_HOME" value="/"/>
			<env key="VBOX_LOG_DEST" value="file=/dev/log"/>
			<env key="VBOX_LOG" value="-*.e.l.f"/>
			<env key="VBOX_RELEASE_LOG_DEST" value="file=/dev/log"/>
			<env key="VBOX_RELEASE_LOG" value="-*.e.l.f"/>
		</config>
		<route>
			<service name="Report"><child name="report_rom" /></service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
</config>
}

install_config $config

puts "--- executing the 'oss' run script to generate the 'oss.iso' image ---"

global specs
global repositories

exec -ignorestderr \
     $::argv0 \
     --genode-dir [genode_dir] \
     --name oss \
     --specs "$specs" \
     --board "$board_var" \
     --repositories "$repositories" \
     --cross-dev-prefix "[cross_dev_prefix]" \
     --include boot_dir/nova \
     --include image/iso \
     --include [repository_contains /run/oss.run]/run/oss.run

exec ln -sf ${genode_dir}/repos/ports/run/vm_genode_oss.vbox6 bin/
exec ln -sf ../../oss.iso bin/

set boot_modules {
	core
	init
	timer
	vesa_fb_drv
	ps2_drv
	log_terminal
	fs_rom
	vfs vfs.lib.so vfs_import.lib.so
	report_rom
	virtualbox6
	oss.iso
	vm_genode_oss.vbox6
	ld.lib.so libc.lib.so libm.lib.so
	libiconv.lib.so stdcxx.lib.so
	qemu-usb.lib.so
	libyuv.lib.so jpeg.lib.so
	vfs_oss.lib.so
}

append boot_modules [audio_drv_binary]

append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until forever
