#
# \brief  Test for using the GDB monitor
# \author Christian Prochaska
# \author Norman Feske
# \date   2011-05-24
#

if {![have_include "power_on/qemu"] ||
    !([have_spec nova])} {
	 puts "Run script is only supported for NOVA in Qemu"; exit 0
}

set build_components {
	core lib/ld init timer
	lib/libc lib/vfs lib/stdcxx lib/vfs_pipe lib/posix
	drivers/uart
	app/gdb_monitor
	test/gdb_monitor
}

lappend build_components "lib/gdbserver_platform-$::env(KERNEL)"

build $build_components

create_boot_directory

install_config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="pc_uart_drv">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Terminal"/>
			<service name="Uart"/>
		</provides>
		<config>
			<policy label_prefix="gdb_monitor" uart="1"/>
		</config>
	</start>
	<start name="gdb_monitor" caps="1000">
		<resource name="RAM" quantum="9M"/>
		<config>
			<target name="test-gdb_monitor">
				<config>
					<vfs> <dir name="dev"> <log/> </dir> </vfs>
					<libc stdout="/dev/log" stderr="/dev/log"/>
				</config>
			</target>
			<preserve name="RAM" quantum="5M"/>
			<vfs>
				<dir name="dev">
					<log/>
					<terminal raw="yes"/>
					<inline name="rtc">2021-01-01 00:01</inline>
				</dir>
				<dir name="pipe"> <pipe/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" pipe="/pipe" rtc="/dev/rtc"/>
		</config>
	</start>
</config>
}

# evaluated by the run tool
proc binary_name_gdbserver_platform_lib_so { } {
	return "gdbserver_platform-$::env(KERNEL).lib.so"
}

build_boot_image [build_artifacts]

#
# Execute test case
#

set local_port 5555

# qemu config
append qemu_args " -display none "

# connect comport 0 to stdio
append qemu_args " -serial stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait,ipv4 "

run_genode_until {.*Remote debugging using /dev/terminal.*} 30

puts "GDB monitor is up, starting GDB in a new terminal"

source ${genode_dir}/repos/ports/run/gdb_monitor.inc

# GDB loads symbols from 'debug/ld.lib.so'
if { [have_spec nova] } {
	exec ln -sf ld-nova.lib.so debug/ld.lib.so
}
if { [have_spec foc] } {
	exec ln -sf ld-foc.lib.so debug/ld.lib.so
}

set gdb_target_binary "test-gdb_monitor"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds "-ex \"target remote localhost:$local_port\" "

append gdb_cmds [gdb_initial_breakpoint_cmds $gdb_target_binary]

# ask the user for confirmations again
append gdb_cmds {-ex "set interactive-mode auto" }

puts "command: [gdb] debug/ld.lib.so $gdb_cmds"

exec [terminal] -e "bash -lc \'[gdb] debug/ld.lib.so $gdb_cmds\'" &

interact -i [output_spawn_id]

# vi: set ft=tcl :
