if {![have_spec x86_32]} {
	puts "\nNoux is supported on the x86_32 architecture only\n"
	exit 0
}

#
# Uncomment the following line when working on the VIM source code. Otherwise,
# VIM may get recompiled, yet it does not get reinstalled into 'bin/bash'.
#
#exec rm -rf noux-pkg/bash bin/bash

set build_components {
	core init drivers/timer noux lib/libc_noux
	drivers/framebuffer drivers/pci drivers/input
	server/terminal
}
lappend build_components noux-pkg/bash
lappend build_components noux-pkg/coreutils
lappend build_components test/libports/ncurses

build $build_components

exec tar cfv bin/bash.tar -h -C bin/bash .
exec tar rfv bin/bash.tar -h -C bin/coreutils .

create_boot_directory

append config {
	<config verbose="yes">
		<parent-provides>
			<service name="ROM"/>
			<service name="LOG"/>
			<service name="CAP"/>
			<service name="RAM"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="PD"/>
			<service name="IRQ"/>
			<service name="IO_PORT"/>
			<service name="IO_MEM"/>
			<service name="SIGNAL"/>
		</parent-provides>
		<default-route>
			<any-service> <any-child/> <parent/> </any-service>
		</default-route>
		<start name="timer">
			<resource name="RAM" quantum="512K"/>
			<provides><service name="Timer"/></provides>
		</start> }

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="PCI"/></provides>
	</start>}

append_if [have_spec vesa] config {
	<start name="vesa_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec pl11x] config {
	<start name="pl11x_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
		<start name="terminal">
			<resource name="RAM" quantum="2M"/>
			<provides><service name="Terminal"/></provides>
			<config>
				<keyboard layout="de"/>
			</config>
		</start>
		<start name="noux">
			<resource name="RAM" quantum="1G"/>
			<config>
				<fstab> <tar name="bash.tar" at="/"/> </fstab>
				<start name="/bin/bash">
					<env name="TERM" value="linux" />
				</start>
			</config>
		</start>
	</config>
}

install_config $config


#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer ld.lib.so noux terminal
	libc.lib.so libm.lib.so libc_noux.lib.so ncurses.lib.so
	bash.tar
}

# platform-specific modules
lappend_if [have_spec linux] boot_modules fb_sdl
lappend_if [have_spec pci]   boot_modules pci_drv
lappend_if [have_spec vesa]  boot_modules vesa_drv
lappend_if [have_spec ps2]   boot_modules ps2_drv
lappend_if [have_spec pl11x] boot_modules pl11x_drv

build_boot_image $boot_modules

run_genode_until forever

exec rm bin/bash.tar
