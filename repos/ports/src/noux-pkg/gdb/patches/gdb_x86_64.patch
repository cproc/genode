gdb_x86_64.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>


---
 gdb/amd64-tdep.c |   14 ++++++++++++++
 gdb/i386-tdep.c  |    5 +++++
 gdb/osabi.c      |    6 ++++++
 gdb/osabi.h      |    1 +
 4 files changed, 26 insertions(+)

diff --git a/gdb/amd64-tdep.c b/gdb/amd64-tdep.c
index 2c437084..129d45ba 100644
--- a/gdb/amd64-tdep.c
+++ b/gdb/amd64-tdep.c
@@ -50,6 +50,7 @@
 #include "osabi.h"
 #include "x86-tdep.h"
 
+#include "osabi.h"
 #include "solib-svr4.h"
 
 /* Note that the AMD64 architecture was previously known as x86-64.
@@ -3339,7 +3340,15 @@ amd64_target_description (uint64_t xcr0, bool segments)
   return *tdesc;
 }
 
+static void
+amd64_genode_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
+{
+  amd64_init_abi (info, gdbarch,
+		  amd64_target_description (X86_XSTATE_SSE_MASK, false));
+}
+
 void _initialize_amd64_tdep ();
+
 void
 _initialize_amd64_tdep ()
 {
@@ -3347,6 +3356,11 @@ _initialize_amd64_tdep ()
  			  amd64_none_init_abi);
   gdbarch_register_osabi (bfd_arch_i386, bfd_mach_x64_32, GDB_OSABI_NONE,
  			  amd64_x32_none_init_abi);
+
+  /* Genode */
+  gdbarch_register_osabi(bfd_arch_i386, bfd_mach_x86_64,
+                         GDB_OSABI_GENODE, amd64_genode_init_abi);
+  /* /Genode */
 }
 
 
diff --git a/gdb/i386-tdep.c b/gdb/i386-tdep.c
index 5718fd7e..4f15d9a1 100644
--- a/gdb/i386-tdep.c
+++ b/gdb/i386-tdep.c
@@ -9097,6 +9097,11 @@ Show Intel Memory Protection Extensions specific variables."),
   gdbarch_register_osabi (bfd_arch_i386, 0, GDB_OSABI_SVR4,
 			  i386_svr4_init_abi);
 
+  /* Genode */
+  gdbarch_register_osabi(bfd_arch_i386, 0,  GDB_OSABI_GENODE,
+                         i386_elf_init_abi);
+  /* /Genode */
+
   /* Initialize the i386-specific register groups.  */
   i386_init_reggroups ();
 
diff --git a/gdb/osabi.c b/gdb/osabi.c
index 627b9d98..9eb8a912 100644
--- a/gdb/osabi.c
+++ b/gdb/osabi.c
@@ -82,6 +82,7 @@ static const struct osabi_names gdb_osabi_names[] =
   { "Newlib", NULL },
   { "SDE", NULL },
   { "PikeOS", NULL },
+  { "Genode", NULL },
 
   { "<invalid>", NULL }
 };
@@ -564,6 +565,11 @@ generic_elf_osabi_sniffer (bfd *abfd)
       bfd_map_over_sections (abfd,
 			     generic_elf_osabi_sniff_abi_tag_sections,
 			     &osabi);
+/* Genode */
+      if (osabi == GDB_OSABI_UNKNOWN)
+        osabi = GDB_OSABI_GENODE;
+/* /Genode */
+
       break;
 
     case ELFOSABI_FREEBSD:
diff --git a/gdb/osabi.h b/gdb/osabi.h
index a7e6a10d..52da236e 100644
--- a/gdb/osabi.h
+++ b/gdb/osabi.h
@@ -47,6 +47,7 @@ enum gdb_osabi
   GDB_OSABI_NEWLIB,
   GDB_OSABI_SDE,
   GDB_OSABI_PIKEOS,
+  GDB_OSABI_GENODE,
 
   GDB_OSABI_INVALID		/* keep this last */
 };
