gdbserver_genode.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>


---
 gdb/gdbserver/linux-arm-low.c |    4 +
 gdb/gdbserver/linux-low.c     |  311 +++++++++++++++++++++++++++++++++++++++++
 gdb/gdbserver/linux-low.h     |    6 +
 gdb/gdbserver/linux-x86-low.c |   49 ++++++
 gdb/gdbserver/remote-utils.c  |   14 +-
 gdb/gdbserver/server.c        |   35 ++++-
 gdb/gdbserver/server.h        |    4 -
 7 files changed, 406 insertions(+), 17 deletions(-)

diff --git a/gdb/gdbserver/linux-arm-low.c b/gdb/gdbserver/linux-arm-low.c
index babb20c..3a4efcd 100644
--- a/gdb/gdbserver/linux-arm-low.c
+++ b/gdb/gdbserver/linux-arm-low.c
@@ -25,6 +25,7 @@
 #ifndef ELFMAG0
 #include <elf.h>
 #endif
+#include <sys/procfs.h>
 #include <sys/ptrace.h>
 
 /* Defined in auto-generated files.  */
@@ -306,6 +307,8 @@ static void
 arm_arch_setup (void)
 {
   arm_hwcap = 0;
+
+#ifndef __GENODE__
   if (arm_get_hwcap (&arm_hwcap) == 0)
     {
       init_registers_arm ();
@@ -347,6 +350,7 @@ arm_arch_setup (void)
 
       return;
     }
+#endif
 
   /* The default configuration uses legacy FPA registers, probably
      simulated.  */
diff --git a/gdb/gdbserver/linux-low.c b/gdb/gdbserver/linux-low.c
index e597e2f..88f14e8 100644
--- a/gdb/gdbserver/linux-low.c
+++ b/gdb/gdbserver/linux-low.c
@@ -20,6 +20,10 @@
 #include "server.h"
 #include "linux-low.h"
 
+#ifdef __GENODE__
+#include "genode-low.h"
+#endif
+
 #include <sys/wait.h>
 #include <stdio.h>
 #include <sys/param.h>
@@ -146,13 +150,17 @@ static int stabilizing_threads;
    control of gdbserver have the same architecture.  */
 static int new_inferior;
 
+static void linux_request_interrupt (void);
 static void linux_resume_one_lwp (struct lwp_info *lwp,
 				  int step, int signal, siginfo_t *info);
 static void linux_resume (struct thread_resume *resume_info, size_t n);
 static void stop_all_lwps (int suspend, struct lwp_info *except);
 static void unstop_all_lwps (int unsuspend, struct lwp_info *except);
 static int linux_wait_for_event (ptid_t ptid, int *wstat, int options);
-static void *add_lwp (ptid_t ptid);
+#ifndef __GENODE__
+static
+#endif
+void *add_lwp (ptid_t ptid);
 static int linux_stopped_by_watchpoint (void);
 static void mark_lwp_dead (struct lwp_info *lwp, int wstat);
 static int linux_core_of_thread (ptid_t ptid);
@@ -281,6 +289,9 @@ elf_64_file_p (const char *file)
 static void
 delete_lwp (struct lwp_info *lwp)
 {
+  if (debug_threads)
+    printf("delete_lwp(%lu)\n", lwpid_of(lwp));
+
   remove_thread (get_lwp_thread (lwp));
   remove_inferior (&all_lwps, &lwp->head);
   free (lwp->arch_private);
@@ -314,6 +325,10 @@ linux_add_process (int pid, int attached)
 static int
 my_waitpid (int pid, int *status, int flags)
 {
+
+  if (debug_threads)
+    fprintf (stderr, "my_waitpid (%d, 0x%x)\n", pid, flags);
+
   int ret, out_errno;
 
   if (debug_threads)
@@ -390,13 +405,19 @@ my_waitpid (int pid, int *status, int flags)
 static void
 handle_extended_wait (struct lwp_info *event_child, int wstat)
 {
+#ifndef __GENODE__
   int event = wstat >> 16;
+#endif
   struct lwp_info *new_lwp;
 
+#ifndef __GENODE__
   if (event == PTRACE_EVENT_CLONE)
+#endif
     {
       ptid_t ptid;
       unsigned long new_pid;
+
+#ifndef __GENODE__
       int ret, status = W_STOPCODE (SIGSTOP);
 
       ptrace (PTRACE_GETEVENTMSG, lwpid_of (event_child), 0, &new_pid);
@@ -416,6 +437,23 @@ handle_extended_wait (struct lwp_info *event_child, int wstat)
 	  else if (!WIFSTOPPED (status))
 	    warning ("wait returned unexpected status 0x%x", status);
 	}
+#else
+      int status = W_STOPCODE (SIGSTOP);
+
+      /* read the lwpid of the new thread from the pipe */
+      read(genode_new_thread_pipe_read_fd(), &new_pid, sizeof(new_pid));
+
+      fprintf(stderr, "new thread has lwpid %lu\n", new_pid);
+
+      /* consume the SIGTRAP signal caused by initial single-stepping */
+      {
+        int signal;
+        read(genode_thread_signal_pipe_read_fd(new_pid), &signal, sizeof(signal));
+        fprintf(stderr, "new thread received signal %d\n", signal);
+        if (signal != SIGTRAP)
+          fprintf(stderr, "Error: first signal received by the new thread was not SIGTRAP\n");
+      }
+#endif
 
       linux_enable_event_reporting (new_pid);
 
@@ -532,9 +570,16 @@ get_stop_pc (struct lwp_info *lwp)
   return stop_pc;
 }
 
-static void *
+#ifndef __GENODE__
+static
+#endif
+void *
 add_lwp (ptid_t ptid)
 {
+
+  if (debug_threads)
+    printf("add_lwp(%u, %lu, %lu)\n", ptid.pid, ptid.lwp, ptid.tid);
+
   struct lwp_info *lwp;
 
   lwp = (struct lwp_info *) xmalloc (sizeof (*lwp));
@@ -550,6 +595,32 @@ add_lwp (ptid_t ptid)
   return lwp;
 }
 
+static int genode_create_inferior(char *program, char **allargs)
+{
+  void *genode_child_resources = genode_start_inferior();
+
+  if (!genode_child_resources)
+    return -1;
+
+  /* wait until the target's main thread is ready */
+  genode_wait_for_target_main_thread();
+
+fprintf(stderr, "main thread ready\n");
+
+  /* attach to child */
+  int pid = GENODE_LWP_BASE;
+  linux_add_process(pid, 0);
+  ptid_t ptid = ptid_build(pid, pid, 0);
+  struct lwp_info *new_lwp = add_lwp(ptid);
+  add_thread(ptid, new_lwp);
+
+  struct process_info *pi = current_process();
+  struct process_info_private *pip = pi->private;
+  pip->genode_child_resources = genode_child_resources;
+
+  return pid;
+}
+
 /* Start an inferior process and returns its pid.
    ALLARGS is a vector of program-name and args. */
 
@@ -606,6 +677,7 @@ linux_attach_lwp_1 (unsigned long lwpid, int initial)
   ptid_t ptid;
   struct lwp_info *new_lwp;
 
+#ifndef __GENODE__
   if (ptrace (PTRACE_ATTACH, lwpid, 0, 0) != 0)
     {
       if (!initial)
@@ -621,6 +693,7 @@ linux_attach_lwp_1 (unsigned long lwpid, int initial)
 	error ("Cannot attach to lwp %ld: %s (%d)\n", lwpid,
 	       strerror (errno), errno);
     }
+#endif
 
   if (initial)
     /* NOTE/FIXME: This lwp might have not been the tgid.  */
@@ -637,6 +710,9 @@ linux_attach_lwp_1 (unsigned long lwpid, int initial)
   new_lwp = (struct lwp_info *) add_lwp (ptid);
   add_thread (ptid, new_lwp);
 
+#ifdef __GENODE__
+  new_lwp->stopped = 1;
+#else
   /* We need to wait for SIGSTOP before being able to make the next
      ptrace call on this LWP.  */
   new_lwp->must_set_ptrace_flags = 1;
@@ -675,6 +751,7 @@ linux_attach_lwp_1 (unsigned long lwpid, int initial)
      end of the list, and so the new thread has not yet reached
      wait_for_sigstop (but will).  */
   new_lwp->stop_expected = 1;
+#endif
 }
 
 void
@@ -689,6 +766,10 @@ linux_attach (unsigned long pid)
   linux_attach_lwp_1 (pid, 1);
   linux_add_process (pid, 1);
 
+  /* must be called after 'add_thread()', because 'current_inferior' must be set */
+  the_low_target.arch_setup();
+
+#ifndef __GENODE__
   if (!non_stop)
     {
       struct thread_info *thread;
@@ -698,6 +779,7 @@ linux_attach (unsigned long pid)
       thread = find_thread_ptid (ptid_build (pid, pid, 0));
       thread->last_resume_kind = resume_stop;
     }
+#endif
 
   return 0;
 }
@@ -812,7 +894,11 @@ linux_kill (int pid)
   return 0;
 }
 
+#ifdef __GENODE__
+int
+#else
 static int
+#endif
 linux_detach_one_lwp (struct inferior_list_entry *entry, void *args)
 {
   struct thread_info *thread = (struct thread_info *) entry;
@@ -822,6 +908,7 @@ linux_detach_one_lwp (struct inferior_list_entry *entry, void *args)
   if (ptid_get_pid (entry->id) != pid)
     return 0;
 
+#ifndef __GENODE__
   /* If this process is stopped but is expecting a SIGSTOP, then make
      sure we take care of that now.  This isn't absolutely guaranteed
      to collect the SIGSTOP, but is fairly likely to.  */
@@ -833,13 +920,16 @@ linux_detach_one_lwp (struct inferior_list_entry *entry, void *args)
       linux_resume_one_lwp (lwp, 0, 0, NULL);
       linux_wait_for_event (lwp->head.id, &wstat, __WALL);
     }
+#endif
 
   /* Flush any pending changes to the process's registers.  */
   regcache_invalidate_one ((struct inferior_list_entry *)
 			   get_lwp_thread (lwp));
 
+#ifndef __GENODE__
   /* Finally, let it resume.  */
   ptrace (PTRACE_DETACH, lwpid_of (lwp), 0, 0);
+#endif
 
   delete_lwp (lwp);
   return 0;
@@ -1071,6 +1161,10 @@ retry:
 
   if (WIFSTOPPED (*wstatp) && WSTOPSIG (*wstatp) == SIGTRAP)
     {
+#ifdef __GENODE__
+      /* no watchpoint support yet */
+	  child->stopped_by_watchpoint = 0;
+#else
       if (the_low_target.stopped_by_watchpoint == NULL)
 	{
 	  child->stopped_by_watchpoint = 0;
@@ -1096,7 +1190,8 @@ retry:
 
 	  current_inferior = saved_inferior;
 	}
-    }
+#endif
+	}
 
   /* Store the STOP_PC, with adjustment applied.  This depends on the
      architecture being defined already (so that CHILD has a valid
@@ -1608,9 +1703,19 @@ linux_wait_for_event_1 (ptid_t ptid, int *wstat, int options)
 	  event_child->must_set_ptrace_flags = 0;
 	}
 
+#ifdef __GENODE__
+      /*
+       * FreeBSD libc's WSTOPSIG() does not mask out ptrace event codes, so
+       * the comparison with SIGTRAP would not match. So, on Genode SIGINFO
+       * is used instead of PTRACE_EVENT_CLONE to announce new threads.
+       */
+      if (WIFSTOPPED (*wstat) && WSTOPSIG (*wstat) == SIGINFO)
+#else
       if (WIFSTOPPED (*wstat) && WSTOPSIG (*wstat) == SIGTRAP
 	  && *wstat >> 16 != 0)
+#endif
 	{
+	  fprintf(stderr, "calling handle_extended_wait()\n");
 	  handle_extended_wait (event_child, *wstat);
 	  continue;
 	}
@@ -2469,18 +2574,22 @@ linux_wait (ptid_t ptid,
   if (debug_threads)
     fprintf (stderr, "linux_wait: [%s]\n", target_pid_to_str (ptid));
 
+#ifndef __GENODE__
   /* Flush the async file first.  */
   if (target_is_async_p ())
     async_file_flush ();
+#endif
 
   event_ptid = linux_wait_1 (ptid, ourstatus, target_options);
 
+#ifndef __GENODE__
   /* If at least one stop was reported, there may be more.  A single
      SIGCHLD can signal more than one child stop.  */
   if (target_is_async_p ()
       && (target_options & TARGET_WNOHANG) != 0
       && !ptid_equal (event_ptid, null_ptid))
     async_file_mark ();
+#endif
 
   return event_ptid;
 }
@@ -2490,6 +2599,11 @@ linux_wait (ptid_t ptid,
 static int
 kill_lwp (unsigned long lwpid, int signo)
 {
+#ifdef __GENODE__
+
+	return genode_send_signal_to_thread(lwpid, signo, 0);
+
+#else
   /* Use tkill, if possible, in case we are using nptl threads.  If tkill
      fails, then we are not using nptl threads and we should be using kill.  */
 
@@ -2511,6 +2625,7 @@ kill_lwp (unsigned long lwpid, int signo)
 #endif
 
   return kill (lwpid, signo);
+#endif
 }
 
 void
@@ -2785,6 +2900,10 @@ static void
 linux_resume_one_lwp (struct lwp_info *lwp,
 		      int step, int signal, siginfo_t *info)
 {
+  if (debug_threads)
+	  printf("linux_resume_one_lwp(lwpid = %lu, step = %d, signal = %d)\n",
+	         lwpid_of(lwp), step, signal);
+
   struct thread_info *saved_inferior;
   int fast_tp_collecting;
 
@@ -2958,10 +3077,25 @@ lwp %ld wants to get out of fast tracepoint jump pad single-stepping\n",
   lwp->stopped = 0;
   lwp->stopped_by_watchpoint = 0;
   lwp->stepping = step;
+
+#ifdef __GENODE__
+
+  /*
+   * On Linux, the thread would get stopped immediately after resuming
+   * if a SIGSTOP is pending. This is not the case on Genode, so we
+   * just keep the thread stopped.
+   */
+  if (lwp->stop_expected)
+	return;
+
+  genode_continue_thread(lwpid_of(lwp), step);
+
+#else
   ptrace (step ? PTRACE_SINGLESTEP : PTRACE_CONT, lwpid_of (lwp), 0,
 	  /* Coerce to a uintptr_t first to avoid potential gcc warning
 	     of coercing an 8 byte integer to a 4 byte pointer.  */
 	  (PTRACE_ARG4_TYPE) (uintptr_t) signal);
+#endif
 
   current_inferior = saved_inferior;
   if (errno)
@@ -3325,6 +3459,8 @@ finish_step_over (struct lwp_info *lwp)
 static int
 linux_resume_one_thread (struct inferior_list_entry *entry, void *arg)
 {
+  if (debug_threads) printf("linux_resume_one_thread()\n");
+
   struct lwp_info *lwp;
   struct thread_info *thread;
   int step;
@@ -3436,6 +3572,8 @@ linux_resume_one_thread (struct inferior_list_entry *entry, void *arg)
 static void
 linux_resume (struct thread_resume *resume_info, size_t n)
 {
+  if (debug_threads) printf("linux_resume(%zd)\n", n);
+
   struct thread_resume_array array = { resume_info, n };
   struct lwp_info *need_step_over = NULL;
   int any_pending;
@@ -3484,6 +3622,8 @@ linux_resume (struct thread_resume *resume_info, size_t n)
 
   if (need_step_over)
     start_step_over (need_step_over);
+
+  if (debug_threads) printf("linux_resume() finished\n");
 }
 
 /* This function is called once per thread.  We check the thread's
@@ -3958,6 +4098,28 @@ linux_fetch_registers (struct regcache *regcache, int regno)
 #endif
 }
 
+#ifdef __GENODE__
+static void
+genode_fetch_registers (struct regcache *regcache, int regno)
+{
+	unsigned long reg_content = 0;
+
+	if (regno == -1) {
+		for (regno = 0; regno < the_low_target.num_regs; regno++) {
+			if (genode_fetch_register(regno, &reg_content) == 0)
+				supply_register(regcache, regno, &reg_content);
+			else
+				supply_register(regcache, regno, 0);
+		}
+	} else {
+		if (genode_fetch_register(regno, &reg_content) == 0)
+			supply_register(regcache, regno, &reg_content);
+		else
+			supply_register(regcache, regno, 0);
+	}
+}
+#endif
+
 void
 linux_store_registers (struct regcache *regcache, int regno)
 {
@@ -3970,6 +4132,29 @@ linux_store_registers (struct regcache *regcache, int regno)
 #endif
 }
 
+#ifdef __GENODE__
+void
+genode_store_registers (struct regcache *regcache, int regno)
+{
+	if (debug_threads) printf("genode_store_registers(): regno = %d\n", regno);
+
+	unsigned long reg_content = 0;
+
+	if (regno == -1) {
+		for (regno = 0; regno < the_low_target.num_regs; regno++) {
+			if (register_size(regno) <= sizeof(reg_content)) {
+				collect_register(regcache, regno, &reg_content);
+				genode_store_register(regno, reg_content);
+			}
+		}
+	} else {
+		if (register_size(regno) <= sizeof(reg_content)) {
+			collect_register(regcache, regno, &reg_content);
+			genode_store_register(regno, reg_content);
+		}
+	}
+}
+#endif
 
 /* Copy LEN bytes from inferior's memory starting at MEMADDR
    to debugger memory starting at MYADDR.  */
@@ -4040,6 +4225,21 @@ linux_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)
   return 0;
 }
 
+#ifdef __GENODE__
+static int
+genode_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)
+{
+  int i;
+  if (debug_threads) printf("genode_read_memory(%llx, %p, %d)\n", memaddr, myaddr, len);
+  if (myaddr)
+    for (i = 0; i < len; i++)
+      if (genode_read_memory_byte((void*)(unsigned long)memaddr + i,
+                                  &myaddr[i]) < 0)
+        return EFAULT;
+  return 0;
+}
+#endif
+
 /* Copy LEN bytes of data from debugger memory at MYADDR to inferior's
    memory at MEMADDR.  On failure (cannot write to the inferior)
    returns the value of errno.  */
@@ -4121,6 +4321,37 @@ linux_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)
   return 0;
 }
 
+#ifdef __GENODE__
+static int
+genode_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)
+{
+  int i;
+
+  if (debug_threads)
+    printf("genode_write_memory(%llx, %p, %d)\n", memaddr, myaddr, len);
+
+  if (myaddr && (len > 0)) {
+    if (debug_threads) {
+        /* Dump up to four bytes.  */
+        unsigned int val = * (unsigned int *) myaddr;
+        if (len == 1)
+          val = val & 0xff;
+        else if (len == 2)
+          val = val & 0xffff;
+        else if (len == 3)
+          val = val & 0xffffff;
+        fprintf (stderr, "Writing %0*x to 0x%08lx\n", 2 * ((len < 4) ? len : 4),
+                 val, (long)memaddr);
+    }
+    for (i = 0; i < len; i++)
+      if (genode_write_memory_byte((void*)(unsigned long)memaddr + i,
+          myaddr[i]) < 0)
+        return EFAULT;
+  }
+  return 0;
+}
+#endif
+
 /* Non-zero if the kernel supports PTRACE_O_TRACEFORK.  */
 static int linux_supports_tracefork_flag;
 
@@ -5009,6 +5240,13 @@ linux_core_of_thread (ptid_t ptid)
 static void
 linux_process_qsupported (const char *query)
 {
+#ifdef __GENODE__
+  /*
+   * 'qSupported' is the first command sent by GDB when attaching to the
+   * server, so when at this location, GDB has just (re-)attached itself.
+   */
+  genode_stop_all_threads();
+#endif
   if (the_low_target.process_qsupported != NULL)
     the_low_target.process_qsupported (query);
 }
@@ -5108,28 +5346,62 @@ linux_emit_ops (void)
 }
 
 static struct target_ops linux_target_ops = {
+#ifndef __GENODE__
   linux_create_inferior,
+#else
+  genode_create_inferior,
+#endif
   linux_attach,
+#ifndef __GENODE__
   linux_kill,
   linux_detach,
   linux_mourn,
   linux_join,
+#else
+  genode_kill,
+  genode_detach,
+  NULL,
+  NULL,
+#endif
   linux_thread_alive,
   linux_resume,
   linux_wait,
+#ifndef __GENODE__
   linux_fetch_registers,
   linux_store_registers,
+#else
+  genode_fetch_registers,
+  genode_store_registers,
+#endif
   linux_prepare_to_access_memory,
   linux_done_accessing_memory,
+#ifndef __GENODE__
   linux_read_memory,
   linux_write_memory,
+#else
+  genode_read_memory,
+  genode_write_memory,
+#endif
+#ifndef __GENODE__
   linux_look_up_symbols,
+#else
+  NULL,
+#endif
   linux_request_interrupt,
+#ifndef __GENODE__
   linux_read_auxv,
+#else
+  NULL,
+#endif
   linux_insert_point,
   linux_remove_point,
+#ifndef __GENODE__
   linux_stopped_by_watchpoint,
   linux_stopped_data_address,
+#else
+  NULL,
+  NULL,
+#endif
 #if defined(__UCLIBC__) && defined(HAS_NOMMU)
   linux_read_offsets,
 #else
@@ -5140,6 +5412,7 @@ static struct target_ops linux_target_ops = {
 #else
   NULL,
 #endif
+#ifndef __GENODE__
   linux_qxfer_spu,
   hostio_last_error_from_errno,
   linux_qxfer_osdata,
@@ -5148,13 +5421,28 @@ static struct target_ops linux_target_ops = {
   linux_async,
   linux_start_non_stop,
   linux_supports_multi_process,
+#else
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+#endif
 #ifdef USE_THREAD_DB
   thread_db_handle_monitor_command,
 #else
   NULL,
 #endif
+#ifndef __GENODE__
   linux_core_of_thread,
+#else
+  NULL,
+#endif
   linux_process_qsupported,
+#ifndef __GENODE__
   linux_supports_tracepoints,
   linux_read_pc,
   linux_write_pc,
@@ -5166,6 +5454,19 @@ static struct target_ops linux_target_ops = {
   linux_stabilize_threads,
   linux_install_fast_tracepoint_jump_pad,
   linux_emit_ops
+#else
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL,
+  NULL
+#endif
 };
 
 static void
@@ -5181,11 +5482,14 @@ linux_init_signals ()
 void
 initialize_low (void)
 {
+#ifndef __GENODE__
   struct sigaction sigchld_action;
   memset (&sigchld_action, 0, sizeof (sigchld_action));
+#endif
   set_target_ops (&linux_target_ops);
   set_breakpoint_data (the_low_target.breakpoint,
 		       the_low_target.breakpoint_len);
+#ifndef __GENODE__
   linux_init_signals ();
   linux_test_for_tracefork ();
 #ifdef HAVE_LINUX_REGSETS
@@ -5198,4 +5502,5 @@ initialize_low (void)
   sigemptyset (&sigchld_action.sa_mask);
   sigchld_action.sa_flags = SA_RESTART;
   sigaction (SIGCHLD, &sigchld_action, NULL);
+#endif
 }
diff --git a/gdb/gdbserver/linux-low.h b/gdb/gdbserver/linux-low.h
index d449e1b..48a3481 100644
--- a/gdb/gdbserver/linux-low.h
+++ b/gdb/gdbserver/linux-low.h
@@ -22,7 +22,9 @@
 #endif
 
 #include <signal.h>
+#ifndef __GENODE__
 #include "gdb_proc_service.h"
+#endif
 
 #ifdef HAVE_LINUX_REGSETS
 typedef void (*regset_fill_func) (struct regcache *, void *);
@@ -55,6 +57,10 @@ struct process_info_private
   /* libthread_db-specific additions.  Not NULL if this process has loaded
      thread_db, and it is active.  */
   struct thread_db *thread_db;
+
+#ifdef __GENODE__
+  void *genode_child_resources;
+#endif
 };
 
 struct lwp_info;
diff --git a/gdb/gdbserver/linux-x86-low.c b/gdb/gdbserver/linux-x86-low.c
index 82dcf83..e5802a7 100644
--- a/gdb/gdbserver/linux-x86-low.c
+++ b/gdb/gdbserver/linux-x86-low.c
@@ -28,8 +28,17 @@
 #include "i386-xstate.h"
 #include "elf/common.h"
 
+#ifndef __GENODE__
 #include "gdb_proc_service.h"
+#endif
 
+#ifdef __GENODE__
+/* Defined in auto-generated file i386.c.  */
+void init_registers_i386 (void);
+static inline void init_registers_i386_linux(void) { init_registers_i386(); }
+void init_registers_i386_avx (void);
+static inline void init_registers_i386_avx_linux(void) { init_registers_i386_avx(); }
+#else
 /* Defined in auto-generated file i386-linux.c.  */
 void init_registers_i386_linux (void);
 /* Defined in auto-generated file amd64-linux.c.  */
@@ -40,11 +49,22 @@ void init_registers_i386_avx_linux (void);
 void init_registers_amd64_avx_linux (void);
 /* Defined in auto-generated file i386-mmx-linux.c.  */
 void init_registers_i386_mmx_linux (void);
+#endif
 
 static unsigned char jump_insn[] = { 0xe9, 0, 0, 0, 0 };
 
 /* Backward compatibility for gdb without XML support.  */
+#ifdef __GENODE__
+static const char *xmltarget_i386_linux_no_xml = "@<target>\
+<architecture>i386</architecture>\
+</target>";
 
+#ifdef __x86_64__
+static const char *xmltarget_amd64_linux_no_xml = "@<target>\
+<architecture>i386:x86-64</architecture>\
+</target>";
+#endif
+#else
 static const char *xmltarget_i386_linux_no_xml = "@<target>\
 <architecture>i386</architecture>\
 <osabi>GNU/Linux</osabi>\
@@ -56,8 +76,15 @@ static const char *xmltarget_amd64_linux_no_xml = "@<target>\
 <osabi>GNU/Linux</osabi>\
 </target>";
 #endif
+#endif
 
+#ifdef __GENODE__
+#ifndef __x86_64__
+#include "i386.h"
+#endif /* __x86_64__ */
+#else
 #include <sys/reg.h>
+#endif
 #include <sys/procfs.h>
 #include <sys/ptrace.h>
 #include <sys/uio.h>
@@ -273,8 +300,10 @@ x86_fill_gregset (struct regcache *regcache, void *buf)
   for (i = 0; i < I386_NUM_REGS; i++)
     collect_register (regcache, i, ((char *) buf) + i386_regmap[i]);
 
+#ifndef __GENODE__
   collect_register_by_name (regcache, "orig_eax",
 			    ((char *) buf) + ORIG_EAX * 4);
+#endif
 }
 
 static void
@@ -295,8 +324,10 @@ x86_store_gregset (struct regcache *regcache, const void *buf)
   for (i = 0; i < I386_NUM_REGS; i++)
     supply_register (regcache, i, ((char *) buf) + i386_regmap[i]);
 
+#ifndef __GENODE__
   supply_register_by_name (regcache, "orig_eax",
 			   ((char *) buf) + ORIG_EAX * 4);
+#endif
 }
 
 static void
@@ -414,7 +445,15 @@ x86_set_pc (struct regcache *regcache, CORE_ADDR pc)
     }
 }
 
+#ifdef __GENODE__
+/* The 'INT3' instruction is used by some kernel debuggers and thus cannot
+ * serve as breakpoint instruction for the GDB monitor. Instead, the 'HLT'
+ * instruction gets used. It's a privileged instruction which triggers an
+ * exception when executed in user mode */
+static const unsigned char x86_breakpoint[] = { 0xF4 };
+#else
 static const unsigned char x86_breakpoint[] = { 0xCC };
+#endif
 #define x86_breakpoint_len 1
 
 static int
@@ -423,7 +462,7 @@ x86_breakpoint_at (CORE_ADDR pc)
   unsigned char c;
 
   (*the_target->read_memory) (pc, &c, 1);
-  if (c == 0xCC)
+  if (c == x86_breakpoint[0])
     return 1;
 
   return 0;
@@ -2561,7 +2600,11 @@ struct linux_target_ops the_low_target =
   x86_breakpoint,
   x86_breakpoint_len,
   NULL,
+#ifndef __GENODE__
   1,
+#else
+  0, /* With the HLT instruction, the PC does not get incremented */
+#endif
   x86_breakpoint_at,
   x86_insert_point,
   x86_remove_point,
@@ -2576,7 +2619,11 @@ struct linux_target_ops the_low_target =
   x86_siginfo_fixup,
   x86_linux_new_process,
   x86_linux_new_thread,
+#ifndef __GENODE__
   x86_linux_prepare_to_resume,
+#else
+  NULL,
+#endif
   x86_linux_process_qsupported,
   x86_supports_tracepoints,
   x86_get_thread_area,
diff --git a/gdb/gdbserver/remote-utils.c b/gdb/gdbserver/remote-utils.c
index 650ddf8..124bdda 100644
--- a/gdb/gdbserver/remote-utils.c
+++ b/gdb/gdbserver/remote-utils.c
@@ -21,6 +21,12 @@
 #include "server.h"
 #include "terminal.h"
 #include "target.h"
+
+#ifdef __GENODE__
+#include <sys/types.h>
+#include "genode-low.h"
+#endif
+
 #include <stdio.h>
 #include <string.h>
 #if HAVE_SYS_IOCTL_H
@@ -106,8 +112,10 @@ struct sym_cache
 
 int remote_debug = 0;
 struct ui_file *gdb_stdlog;
-
-static gdb_fildes_t remote_desc = INVALID_DESCRIPTOR;
+#ifndef __GENODE__
+static
+#endif
+gdb_fildes_t remote_desc = INVALID_DESCRIPTOR;
 static gdb_fildes_t listen_desc = INVALID_DESCRIPTOR;
 
 /* FIXME headerize? */
@@ -171,7 +179,6 @@ handle_accept_event (int err, gdb_client_data client_data)
 
 #ifndef USE_WIN32API
   close (listen_desc);		/* No longer need this */
-
   signal (SIGPIPE, SIG_IGN);	/* If we don't do this, then gdbserver simply
 				   exits when the remote side dies.  */
 #else
@@ -280,6 +287,7 @@ remote_open (char *name)
 
       /* Register the event loop handler.  */
       add_file_handler (remote_desc, handle_serial_event, NULL);
+
 #endif /* USE_WIN32API */
     }
   else
diff --git a/gdb/gdbserver/server.c b/gdb/gdbserver/server.c
index 2f4484f..4f31330 100644
--- a/gdb/gdbserver/server.c
+++ b/gdb/gdbserver/server.c
@@ -20,6 +20,11 @@
 
 #include "server.h"
 
+#ifdef __GENODE__
+#include "genode-low.h"
+#include "linux-low.h"
+#endif
+
 #if HAVE_UNISTD_H
 #include <unistd.h>
 #endif
@@ -47,7 +52,7 @@ static char **program_argv, **wrapper_argv;
 
 /* Enable miscellaneous debugging output.  The name is historical - it
    was originally used to debug LinuxThreads support.  */
-int debug_threads;
+int debug_threads = 1;
 
 /* Enable debugging of h/w breakpoint/watchpoint support.  */
 int debug_hw_points;
@@ -1740,6 +1745,7 @@ static void gdb_wants_all_threads_stopped (void);
 void
 handle_v_cont (char *own_buf)
 {
+  if (debug_threads) printf("handle_v_cont()\n");
   char *p, *q;
   int n = 0, i = 0;
   struct thread_resume *resume_info;
@@ -2055,11 +2061,11 @@ handle_v_requests (char *own_buf, int packet_len, int *new_packet_len)
 	  return;
 	}
     }
-
+#ifndef __GENODE__
   if (strncmp (own_buf, "vFile:", 6) == 0
       && handle_vFile (own_buf, packet_len, new_packet_len))
     return;
-
+#endif
   if (strncmp (own_buf, "vAttach;", 8) == 0)
     {
       if (!multi_process && target_running ())
@@ -2114,6 +2120,7 @@ handle_v_requests (char *own_buf, int packet_len, int *new_packet_len)
 static void
 myresume (char *own_buf, int step, int sig)
 {
+  if (debug_threads) printf("myresume()\n");
   struct thread_resume resume_info[2];
   int n = 0;
   int valid_cont_thread;
@@ -2250,6 +2257,7 @@ gdb_reattached_process (struct inferior_list_entry *entry)
 static void
 handle_status (char *own_buf)
 {
+	if (debug_threads) printf("handle_status()\n");
   /* GDB is connected, don't forward events to the target anymore.  */
   for_each_inferior (&all_processes, gdb_reattached_process);
 
@@ -2329,7 +2337,6 @@ gdbserver_show_disableable (FILE *stream)
 	   "  threads     \tAll of the above\n");
 }
 
-
 #undef require_running
 #define require_running(BUF)			\
   if (!target_running ())			\
@@ -2449,8 +2456,13 @@ join_inferiors_callback (struct inferior_list_entry *entry)
 }
 
 int
+#ifdef __GENODE__
+gdbserver_main (int argc, char *argv[])
+#else
 main (int argc, char *argv[])
+#endif
 {
+fprintf(stderr, "gdbserver_main()\n");
   int bad_attach;
   int pid;
   char *arg_end, *port;
@@ -2584,7 +2596,7 @@ main (int argc, char *argv[])
       gdbserver_usage (stderr);
       exit (1);
     }
-
+fprintf(stderr, "calling initialize_inferiors()\n");
   initialize_inferiors ();
   initialize_async_io ();
   initialize_low ();
@@ -2755,6 +2767,7 @@ process_serial_event (void)
 
   i = 0;
   ch = own_buf[i++];
+  /*if (debug_threads)*/ printf("GDB command = %s\n", own_buf);
   switch (ch)
     {
     case 'q':
@@ -2844,7 +2857,9 @@ process_serial_event (void)
 		 gone.  */
 	      for_each_inferior (&all_processes,
 				 join_inferiors_callback);
+#ifndef __GENODE__
 	      exit (0);
+#endif
 	    }
 	}
       break;
@@ -3076,7 +3091,11 @@ process_serial_event (void)
 	  return 0;
 	}
       else
+#ifndef __GENODE__
 	exit (0);
+#else
+      return 0;
+#endif
 
     case 'T':
       {
@@ -3140,14 +3159,14 @@ process_serial_event (void)
       own_buf[0] = '\0';
       break;
     }
-
+  /*if (debug_threads)*/ printf("GDBserver response = %s\n", own_buf);
   if (new_packet_len != -1)
     putpkt_binary (own_buf, new_packet_len);
   else
     putpkt (own_buf);
 
   response_needed = 0;
-
+#ifndef __GENODE__
   if (!extended_protocol && have_ran && !target_running ())
     {
       /* In non-stop, defer exiting until GDB had a chance to query
@@ -3159,7 +3178,7 @@ process_serial_event (void)
 	  exit (0);
 	}
     }
-
+#endif
   if (exit_requested)
     return -1;
 
diff --git a/gdb/gdbserver/server.h b/gdb/gdbserver/server.h
index 77f5dd6..897abed 100644
--- a/gdb/gdbserver/server.h
+++ b/gdb/gdbserver/server.h
@@ -664,8 +664,8 @@ struct emit_ops
 /* Returns the address of the get_raw_reg function in the IPA.  */
 CORE_ADDR get_raw_reg_func_addr (void);
 
-CORE_ADDR current_insn_ptr;
-int emit_error;
+extern CORE_ADDR current_insn_ptr;
+extern int emit_error;
 
 /* Version information, from version.c.  */
 extern const char version[];
