+++ src/app/virtualbox/include/VBox/com/array.h
@@ -219,10 +219,10 @@
 protected:
 
     /** Initializes memory for aElem. */
-    static void Init(T &aElem) { aElem = 0; }
+    static void Init(T &aElem) { /*aElem = 0; */ }
 
     /** Initializes memory occupied by aElem. */
-    static void Uninit(T &aElem) { aElem = 0; }
+    static void Uninit(T &aElem) { /* aElem = 0; */ }
 
     /** Creates a deep copy of aFrom and stores it in aTo. */
     static void Copy(const T &aFrom, T &aTo) { aTo = aFrom; }
+++ src/app/virtualbox/include/VBox/com/ErrorInfo.h
@@ -31,8 +31,8 @@
 #include "VBox/com/Guid.h"
 #include "VBox/com/assert.h"
 
-struct IProgress;
-struct IVirtualBoxErrorInfo;
+//struct IProgress;
+//struct IVirtualBoxErrorInfo;
 
 namespace com
 {
+++ src/app/virtualbox/include/VBox/com/string.h
@@ -109,11 +109,13 @@
     }
 
 #if defined(VBOX_WITH_XPCOM)
+/*
     Bstr(const wchar_t *that)
     {
         AssertCompile(sizeof(wchar_t) == sizeof(OLECHAR));
         copyFrom((const OLECHAR *)that);
     }
+*/
 #endif
 
     Bstr(const RTCString &that)
@@ -151,12 +153,14 @@
     }
 
 #if defined(VBOX_WITH_XPCOM)
+/*
     Bstr& operator=(const wchar_t *that)
     {
         cleanup();
         copyFrom((const OLECHAR *)that);
         return *this;
     }
+*/
 #endif
 
     Bstr& setNull()
@@ -247,7 +251,7 @@
      *  returns a pointer to a global variable containing an empty BSTR with a proper zero
      *  length prefix so that Windows is happy.
      */
-    CBSTR raw() const
+    BSTR raw() const
     {
         if (m_bstr)
             return m_bstr;
+++ src/app/virtualbox/include/VBox/vmm/hm_vmx.h
@@ -1859,10 +1859,10 @@
        ".byte    0xF3, 0x0F, 0xC7, 0x34, 0x24  # VMXON [esp]    \n\t"
        "ja       2f                                             \n\t"
        "je       1f                                             \n\t"
-       "movl     $"RT_XSTR(VERR_VMX_INVALID_VMXON_PTR)", %0     \n\t"
+       "movl     $" RT_XSTR(VERR_VMX_INVALID_VMXON_PTR)", %0     \n\t"
        "jmp      2f                                             \n\t"
        "1:                                                      \n\t"
-       "movl     $"RT_XSTR(VERR_VMX_VMXON_FAILED)", %0          \n\t"
+       "movl     $" RT_XSTR(VERR_VMX_VMXON_FAILED)", %0          \n\t"
        "2:                                                      \n\t"
        "add      $8, %%esp                                      \n\t"
        :"=rm"(rc)
@@ -1952,7 +1952,7 @@
        "push    %2                                              \n\t"
        ".byte   0x66, 0x0F, 0xC7, 0x34, 0x24  # VMCLEAR [esp]   \n\t"
        "jnc     1f                                              \n\t"
-       "movl    $"RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0       \n\t"
+       "movl    $" RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0       \n\t"
        "1:                                                      \n\t"
        "add     $8, %%esp                                       \n\t"
        :"=rm"(rc)
@@ -2009,7 +2009,7 @@
        "push    %2                                              \n\t"
        ".byte   0x0F, 0xC7, 0x34, 0x24  # VMPTRLD [esp]         \n\t"
        "jnc     1f                                              \n\t"
-       "movl    $"RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0       \n\t"
+       "movl    $" RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0       \n\t"
        "1:                                                      \n\t"
        "add     $8, %%esp                                       \n\t"
        :"=rm"(rc)
@@ -2079,10 +2079,10 @@
        ".byte  0x0F, 0x79, 0xC2        # VMWRITE eax, edx       \n\t"
        "ja     2f                                               \n\t"
        "je     1f                                               \n\t"
-       "movl   $"RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0        \n\t"
+       "movl   $" RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0        \n\t"
        "jmp    2f                                               \n\t"
        "1:                                                      \n\t"
-       "movl   $"RT_XSTR(VERR_VMX_INVALID_VMCS_FIELD)", %0      \n\t"
+       "movl   $" RT_XSTR(VERR_VMX_INVALID_VMCS_FIELD)", %0      \n\t"
        "2:                                                      \n\t"
        :"=rm"(rc)
        :"0"(VINF_SUCCESS),
@@ -2207,14 +2207,14 @@
 # if RT_INLINE_ASM_GNU_STYLE
     int rc = VINF_SUCCESS;
     __asm__ __volatile__ (
-       "movl   $"RT_XSTR(VINF_SUCCESS)", %0                      \n\t"
+       "movl   $" RT_XSTR(VINF_SUCCESS)", %0                      \n\t"
        ".byte  0x0F, 0x78, 0xc2        # VMREAD eax, edx         \n\t"
        "ja     2f                                                \n\t"
        "je     1f                                                \n\t"
-       "movl   $"RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0         \n\t"
+       "movl   $" RT_XSTR(VERR_VMX_INVALID_VMCS_PTR)", %0         \n\t"
        "jmp    2f                                                \n\t"
        "1:                                                       \n\t"
-       "movl   $"RT_XSTR(VERR_VMX_INVALID_VMCS_FIELD)", %0       \n\t"
+       "movl   $" RT_XSTR(VERR_VMX_INVALID_VMCS_FIELD)", %0       \n\t"
        "2:                                                       \n\t"
        :"=&r"(rc),
         "=d"(*pData)
