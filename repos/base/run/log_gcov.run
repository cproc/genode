build "core init server/lx_fs test/log_gcov app/gcov"

create_boot_directory

install_config {
	<config>
		<parent-provides>
			<service name="LOG"/>
			<service name="PD"/>
			<service name="CPU"/>
			<service name="ROM"/>
		</parent-provides>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>
		<default caps="50"/>
		<start name="lx_fs" caps="200" ld="no">
			<resource name="RAM" quantum="4M"/>
			<provides> <service name="File_system"/> </provides>
			<config>
				<policy label="test-log_gcov -> gcov_data" root="/gcov_data" writeable="yes"/>
				<policy label_prefix="gcov" root="/gcov_data/test/log" writeable="yes"/>
			</config>
		</start>

		<start name="test-log_gcov" caps="100">
			<resource name="RAM" quantum="10M"/>
		</start>

<!--
		<start name="gcov" caps="100">
			<resource name="RAM" quantum="10M"/>
			<config>
				<arg value="gcov"/>
				<arg value="-f"/>
				<arg value="-m"/>
				<arg value="main"/>
				<arg value="func"/>
				<vfs>
					<dir name="dev"> <log/> </dir>
					<fs/>
				</vfs>
				<libc stdout="/dev/log" stderr="/dev/log"/>
			</config>
		</start>
-->
	</config>
}

exec mkdir -p bin/gcov_data

build_boot_image "core ld.lib.so init lx_fs test-log_gcov gcov_data
                  gcov gmp.lib.so libc.lib.so stdcxx.lib.so vfs.lib.so libm.lib.so posix.lib.so"

append qemu_args "-nographic "
append xen_args  { sdl="0" }

run_genode_until "Test done.*\n" 20

grep_output {\[init -\> test-log}

compare_output_to {
[init -> test-log_gcov] hex range:          [0e00,1680)
[init -> test-log_gcov] empty hex range:    [0abc0000,0abc0000) (empty!)
[init -> test-log_gcov] hex range to limit: [f8,ff]
[init -> test-log_gcov] invalid hex range:  [f8,08) (overflow!)
[init -> test-log_gcov] negative hex char:  0xfe
[init -> test-log_gcov] positive hex char:  0x02
[init -> test-log_gcov] multiarg string:    "parent -> child.7"
[init -> test-log_gcov] String(Hex(3)):     0x3
[init -> test-log_gcov] Very long messages:
[init -> test-log_gcov -> log] 1.....................................................................................................................................................................................................................................2
[init -> test-log_gcov] 3.....................................................................................................................................................................................................................................4
[init -> test-log_gcov] 5.....................................................................................................................................................................................................................................6
[init -> test-log_gcov] 
[init -> test-log_gcov] Test done.
}
