header_generation.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>

Avoid errors on header generation during port preparation.
---
 qtbase/mkspecs/features/qmake_use.prf              |    4 ++--
 qtbase/mkspecs/features/qt.prf                     |    2 +-
 .../Tools/qmake/mkspecs/features/default_pre.prf   |    8 ++++----
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/qtbase/mkspecs/features/qmake_use.prf b/qtbase/mkspecs/features/qmake_use.prf
index f81d1cece4..8677926ede 100644
--- a/qtbase/mkspecs/features/qmake_use.prf
+++ b/qtbase/mkspecs/features/qmake_use.prf
@@ -5,8 +5,8 @@ for(ever) {
         use = $$split(use, /)
         name = $$take_first(use)
         nu = $$upper($$name)
-        !defined(QMAKE_LIBS_$$nu, var): \
-            error("Library '$$name' is not defined.")
+        #!defined(QMAKE_LIBS_$$nu, var): \
+        #    error("Library '$$name' is not defined.")
 
         !contains(use, nolink) {
             QMAKE_LIBDIR += $$eval(QMAKE_LIBDIR_$$nu)
diff --git a/qtbase/mkspecs/features/qt.prf b/qtbase/mkspecs/features/qt.prf
index b57afcf72d..e7ce2a72b8 100644
--- a/qtbase/mkspecs/features/qt.prf
+++ b/qtbase/mkspecs/features/qt.prf
@@ -260,7 +260,7 @@ for(ever) {
                 WINRT_MANIFEST.capabilities_device_default += $$MODULE_WINRT_CAPABILITIES_DEVICE
         }
     }
-    !isEmpty(BAD_QT):error("Unknown module(s) in QT$$var_sfx: $$replace(BAD_QT, _private$, -private)")
+    #!isEmpty(BAD_QT):error("Unknown module(s) in QT$$var_sfx: $$replace(BAD_QT, _private$, -private)")
 
     !isEmpty(var_sfx): break()
     var_sfx = _PRIVATE
diff --git a/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf b/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf
index 5c36e93131..5a520920df 100644
--- a/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf
+++ b/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf
@@ -67,10 +67,10 @@ else: PYTHON = python
 CONFIG += production_build
 
 # Run configure before making decisions that depend on the result
-root_project_file {
-    load(configure)
-    runConfigure()
-}
+#root_project_file {
+#    load(configure)
+#    runConfigure()
+#}
 
 unix:config_gccdepends {
     # We have a compiler that supports the -MD option (and neither
