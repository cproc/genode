header_generation.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>

Avoid errors on header generation during port preparation.
---
 qtbase/configure                                   |   10 +++++-----
 qtbase/mkspecs/features/qmake_use.prf              |    4 ++--
 qtbase/mkspecs/features/qt.prf                     |    2 +-
 qtbase/mkspecs/features/qt_configure.prf           |   16 ++++++++--------
 .../Tools/qmake/mkspecs/features/default_pre.prf   |    8 ++++----
 5 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/qtbase/configure b/qtbase/configure
index d6da4dd847..042805c493 100755
--- a/qtbase/configure
+++ b/qtbase/configure
@@ -89,11 +89,11 @@ if [ x"$1" = x"-top-level" ]; then
     relpathMangled=`dirname "$relpath"`
     outpathPrefix=../
     shift
-else
-    if [ -f ../.qmake.super ]; then
-        echo >&2 "ERROR: You cannot configure qtbase separately within a top-level build."
-        exit 1
-    fi
+#else
+#    if [ -f ../.qmake.super ]; then
+#        echo >&2 "ERROR: You cannot configure qtbase separately within a top-level build."
+#        exit 1
+#    fi
 fi
 
 OPT_CMDLINE=  # expanded version for the script
diff --git a/qtbase/mkspecs/features/qmake_use.prf b/qtbase/mkspecs/features/qmake_use.prf
index f81d1cece4..8677926ede 100644
--- a/qtbase/mkspecs/features/qmake_use.prf
+++ b/qtbase/mkspecs/features/qmake_use.prf
@@ -5,8 +5,8 @@ for(ever) {
         use = $$split(use, /)
         name = $$take_first(use)
         nu = $$upper($$name)
-        !defined(QMAKE_LIBS_$$nu, var): \
-            error("Library '$$name' is not defined.")
+        #!defined(QMAKE_LIBS_$$nu, var): \
+        #    error("Library '$$name' is not defined.")
 
         !contains(use, nolink) {
             QMAKE_LIBDIR += $$eval(QMAKE_LIBDIR_$$nu)
diff --git a/qtbase/mkspecs/features/qt.prf b/qtbase/mkspecs/features/qt.prf
index b57afcf72d..e7ce2a72b8 100644
--- a/qtbase/mkspecs/features/qt.prf
+++ b/qtbase/mkspecs/features/qt.prf
@@ -260,7 +260,7 @@ for(ever) {
                 WINRT_MANIFEST.capabilities_device_default += $$MODULE_WINRT_CAPABILITIES_DEVICE
         }
     }
-    !isEmpty(BAD_QT):error("Unknown module(s) in QT$$var_sfx: $$replace(BAD_QT, _private$, -private)")
+    #!isEmpty(BAD_QT):error("Unknown module(s) in QT$$var_sfx: $$replace(BAD_QT, _private$, -private)")
 
     !isEmpty(var_sfx): break()
     var_sfx = _PRIVATE
diff --git a/qtbase/mkspecs/features/qt_configure.prf b/qtbase/mkspecs/features/qt_configure.prf
index 4039bba431..68bd3a47d8 100644
--- a/qtbase/mkspecs/features/qt_configure.prf
+++ b/qtbase/mkspecs/features/qt_configure.prf
@@ -1911,14 +1911,14 @@ defineTest(qtConfProcessOutput) {
 
 !isEmpty(_QMAKE_SUPER_CACHE_):!equals(OUT_PWD, $$dirname(_QMAKE_SUPER_CACHE_)) {
     # sub-repo within a top-level build; no need to configure anything.
-    !isEmpty(QMAKE_EXTRA_ARGS) {
-        # sub-projects don't get the extra args passed down automatically,
-        # so we can use their presence to detect misguided attempts to
-        # configure the repositories separately.
-        # caveat: a plain qmake call is indistinguishable from a recursion
-        # (by design), so we cannot detect this case.
-        error("You cannot configure $$TARGET separately within a top-level build.")
-    }
+#    !isEmpty(QMAKE_EXTRA_ARGS) {
+#        # sub-projects don't get the extra args passed down automatically,
+#        # so we can use their presence to detect misguided attempts to
+#        # configure the repositories separately.
+#        # caveat: a plain qmake call is indistinguishable from a recursion
+#        # (by design), so we cannot detect this case.
+#        error("You cannot configure $$TARGET separately within a top-level build.")
+#    }
     return()
 }
 
diff --git a/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf b/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf
index 5c36e93131..5a520920df 100644
--- a/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf
+++ b/qtwebkit/Tools/qmake/mkspecs/features/default_pre.prf
@@ -67,10 +67,10 @@ else: PYTHON = python
 CONFIG += production_build
 
 # Run configure before making decisions that depend on the result
-root_project_file {
-    load(configure)
-    runConfigure()
-}
+#root_project_file {
+#    load(configure)
+#    runConfigure()
+#}
 
 unix:config_gccdepends {
     # We have a compiler that supports the -MD option (and neither
