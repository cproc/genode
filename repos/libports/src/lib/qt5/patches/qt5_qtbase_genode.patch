qt5_qtbase_genode.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>

Genode-specific adaptations
---
 qtbase/src/corelib/codecs/qtextcodec.cpp           |    4 +
 qtbase/src/corelib/global/qcompilerdetection.h     |    4 +
 qtbase/src/corelib/global/qsystemdetection.h       |    5 +-
 qtbase/src/corelib/global/qversiontagging.cpp      |    2 -
 qtbase/src/corelib/io/qresource.cpp                |    2 -
 qtbase/src/corelib/kernel/qcoreapplication.cpp     |    2 -
 .../src/corelib/kernel/qeventdispatcher_unix.cpp   |   14 +++++
 qtbase/src/corelib/kernel/qtranslator.cpp          |    2 -
 qtbase/src/corelib/thread/qthread.cpp              |    4 +
 qtbase/src/corelib/thread/qthread_p.h              |   55 ++++++++++++++++++++
 qtbase/src/corelib/tools/qdatetime.cpp             |    3 +
 qtbase/src/gui/image/qxpmhandler.cpp               |    8 +++
 .../network/access/qnetworkaccessfilebackend.cpp   |    5 ++
 qtbase/src/network/kernel/qhostinfo.cpp            |    5 ++
 qtbase/src/network/kernel/qhostinfo_unix.cpp       |    7 ++-
 qtbase/src/widgets/dialogs/qfiledialog.cpp         |    2 -
 qtbase/src/widgets/styles/qstylefactory.cpp        |    7 +++
 17 files changed, 123 insertions(+), 8 deletions(-)

diff --git a/qtbase/src/corelib/codecs/qtextcodec.cpp b/qtbase/src/corelib/codecs/qtextcodec.cpp
index c55f93b..9d69f16 100644
--- a/qtbase/src/corelib/codecs/qtextcodec.cpp
+++ b/qtbase/src/corelib/codecs/qtextcodec.cpp
@@ -198,7 +198,11 @@ static QTextCodec *setupLocaleMapper()
         // First part is getting that locale name.  First try setlocale() which
         // definitely knows it, but since we cannot fully trust it, get ready
         // to fall back to environment variables.
+#ifdef Q_OS_GENODE
+    	const QByteArray ctype;
+#else
         const QByteArray ctype = setlocale(LC_CTYPE, 0);
+#endif /* Q_OS_GENODE */
 
         // Get the first nonempty value from $LC_ALL, $LC_CTYPE, and $LANG
         // environment variables.
diff --git a/qtbase/src/corelib/global/qcompilerdetection.h b/qtbase/src/corelib/global/qcompilerdetection.h
index 2d9e046..aac1d7b 100644
--- a/qtbase/src/corelib/global/qcompilerdetection.h
+++ b/qtbase/src/corelib/global/qcompilerdetection.h
@@ -826,7 +826,9 @@
 #      define Q_COMPILER_ALIGNAS
 #      define Q_COMPILER_ALIGNOF
 #      define Q_COMPILER_INHERITING_CONSTRUCTORS
-#      define Q_COMPILER_THREAD_LOCAL
+#      ifndef __GENODE__
+#         define Q_COMPILER_THREAD_LOCAL
+#      endif
 #      if Q_CC_GNU > 408 || __GNUC_PATCHLEVEL__ >= 1
 #         define Q_COMPILER_REF_QUALIFIERS
 #      endif
diff --git a/qtbase/src/corelib/global/qsystemdetection.h b/qtbase/src/corelib/global/qsystemdetection.h
index de95ae3..7b6aaa6 100644
--- a/qtbase/src/corelib/global/qsystemdetection.h
+++ b/qtbase/src/corelib/global/qsystemdetection.h
@@ -41,6 +41,7 @@
 /*
    The operating system, must be one of: (Q_OS_x)
 
+     GENODE   - Genode
      DARWIN   - Any Darwin system
      MACOS    - macOS
      IOS      - iOS
@@ -86,7 +87,9 @@
               - Q_OS_FREEBSD_KERNEL is always defined on FreeBSD, even if the userland is from GNU
 */
 
-#if defined(__APPLE__) && (defined(__GNUC__) || defined(__xlC__) || defined(__xlc__))
+#if defined(__GENODE__)
+#  define Q_OS_GENODE
+#elif defined(__APPLE__) && (defined(__GNUC__) || defined(__xlC__) || defined(__xlc__))
 #  define Q_OS_DARWIN
 #  define Q_OS_BSD4
 #  ifdef __LP64__
diff --git a/qtbase/src/corelib/global/qversiontagging.cpp b/qtbase/src/corelib/global/qversiontagging.cpp
index e7524f3..e31f8b3 100644
--- a/qtbase/src/corelib/global/qversiontagging.cpp
+++ b/qtbase/src/corelib/global/qversiontagging.cpp
@@ -36,7 +36,7 @@
 #define SYM QT_MANGLE_NAMESPACE(qt_version_tag)
 //#define SSYM QT_STRINGIFY(SYM)
 
-#if defined(Q_CC_GNU) && defined(Q_OF_ELF) && !defined(Q_OS_ANDROID)
+#if defined(Q_CC_GNU) && defined(Q_OF_ELF) && !defined(Q_OS_ANDROID) && !defined(Q_OS_GENODE)
 #  define make_versioned_symbol2(sym, m, n, separator)     \
     Q_CORE_EXPORT extern const char sym ## _ ## m ## _ ## n = 0; \
     asm(".symver " QT_STRINGIFY(sym) "_" QT_STRINGIFY(m) "_" QT_STRINGIFY(n) ", " \
diff --git a/qtbase/src/corelib/io/qresource.cpp b/qtbase/src/corelib/io/qresource.cpp
index c584933..615a7d5 100644
--- a/qtbase/src/corelib/io/qresource.cpp
+++ b/qtbase/src/corelib/io/qresource.cpp
@@ -922,7 +922,7 @@ public:
     }
 };
 
-#if defined(Q_OS_UNIX) && !defined (Q_OS_NACL) && !defined(Q_OS_INTEGRITY)
+#if defined(Q_OS_UNIX) && !defined (Q_OS_NACL) && !defined(Q_OS_INTEGRITY) && !defined(Q_OS_GENODE)
 #define QT_USE_MMAP
 #endif
 
diff --git a/qtbase/src/corelib/kernel/qcoreapplication.cpp b/qtbase/src/corelib/kernel/qcoreapplication.cpp
index f5b1520..5ae76c5 100644
--- a/qtbase/src/corelib/kernel/qcoreapplication.cpp
+++ b/qtbase/src/corelib/kernel/qcoreapplication.cpp
@@ -602,7 +602,7 @@ void QCoreApplicationPrivate::initLocale()
     if (qt_locale_initialized)
         return;
     qt_locale_initialized = true;
-#ifdef Q_OS_UNIX
+#if defined(Q_OS_UNIX) && !defined(Q_OS_GENODE)
     setlocale(LC_ALL, "");
 #endif
 }
diff --git a/qtbase/src/corelib/kernel/qeventdispatcher_unix.cpp b/qtbase/src/corelib/kernel/qeventdispatcher_unix.cpp
index 155f7b7..2e32ddb 100644
--- a/qtbase/src/corelib/kernel/qeventdispatcher_unix.cpp
+++ b/qtbase/src/corelib/kernel/qeventdispatcher_unix.cpp
@@ -66,6 +66,11 @@
 #  include <sys/times.h>
 #endif
 
+#ifdef Q_OS_GENODE
+#include <timer_session/connection.h>
+#define perror Genode::error
+#endif /* Q_OS_GENODE */
+
 QT_BEGIN_NAMESPACE
 
 #if defined(Q_OS_INTEGRITY) || defined(Q_OS_VXWORKS)
@@ -279,6 +284,9 @@ int QEventDispatcherUNIXPrivate::processThreadWakeUp(int nsel)
         char c[16];
         ::read(thread_pipe[0], c, sizeof(c));
         ::ioctl(thread_pipe[0], FIOFLUSH, 0);
+#elif defined(Q_OS_GENODE)
+		char c[16];
+        ::read(thread_pipe[0], c, sizeof(c)); // FIXME: the while loop only works in non-blocking mode
 #else
 #  ifndef QT_NO_EVENTFD
         if (thread_pipe[1] == -1) {
@@ -317,6 +325,12 @@ QEventDispatcherUNIX::~QEventDispatcherUNIX()
 int QEventDispatcherUNIX::select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
                                  timespec *timeout)
 {
+#ifdef Q_OS_GENODE
+	/* if < 10ms round up to the 10ms minimum granularity supported by
+	 * the timed semaphore */
+	if (timeout && (timeout->tv_sec == 0) && (timeout->tv_nsec > 0) && (timeout->tv_nsec < 10*1000*1000))
+		timeout->tv_nsec = 10*1000*1000;
+#endif /* Q_OS_GENODE */
     return qt_safe_select(nfds, readfds, writefds, exceptfds, timeout);
 }
 
diff --git a/qtbase/src/corelib/kernel/qtranslator.cpp b/qtbase/src/corelib/kernel/qtranslator.cpp
index 794a4aa..953d63c 100644
--- a/qtbase/src/corelib/kernel/qtranslator.cpp
+++ b/qtbase/src/corelib/kernel/qtranslator.cpp
@@ -51,7 +51,7 @@
 #include "qendian.h"
 #include "qresource.h"
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_INTEGRITY)
+#if defined(Q_OS_UNIX) && !defined(Q_OS_INTEGRITY) && !defined(Q_OS_GENODE)
 #define QT_USE_MMAP
 #include "private/qcore_unix_p.h"
 #endif
diff --git a/qtbase/src/corelib/thread/qthread.cpp b/qtbase/src/corelib/thread/qthread.cpp
index 8ea487e..2a8ee31 100644
--- a/qtbase/src/corelib/thread/qthread.cpp
+++ b/qtbase/src/corelib/thread/qthread.cpp
@@ -142,6 +142,10 @@ QThreadPrivate::QThreadPrivate(QThreadData *d)
       exited(false), returnCode(-1),
       stackSize(0), priority(QThread::InheritPriority), data(d)
 {
+#ifdef Q_OS_GENODE
+	genode_thread = 0;
+#endif /* Q_OS_GENODE */
+
 #if defined (Q_OS_WIN)
     handle = 0;
 #  ifndef Q_OS_WINRT
diff --git a/qtbase/src/corelib/thread/qthread_p.h b/qtbase/src/corelib/thread/qthread_p.h
index a56b879..c23862b 100644
--- a/qtbase/src/corelib/thread/qthread_p.h
+++ b/qtbase/src/corelib/thread/qthread_p.h
@@ -46,6 +46,10 @@
 //
 //
 
+#ifdef Q_OS_GENODE
+#include <thread_qt.h>
+#endif
+
 #include "qplatformdefs.h"
 #include "QtCore/qthread.h"
 #include "QtCore/qmutex.h"
@@ -169,11 +173,62 @@ public:
     static QThread *threadForId(int id);
 
 #ifdef Q_OS_UNIX
+#ifdef Q_OS_GENODE
+
+    class Genode_thread : public Genode::Thread_qt
+    {
+        private:
+
+    	    /*
+    	     * The '_finished_lock' is necessary because 'QThreadPrivate::mutex'
+    	     * uses a 'Genode::Timed_semaphore' internally and it isn't safe
+    	     * to delete a Genode thread that just called 'Semaphore::up()',
+    	     * because the 'Semaphore::_meta_lock' could still be locked.
+    	     */
+            Genode::Lock _finished_lock;
+            QThread *_qthread;
+
+        public:
+
+            Genode_thread(QThread *qthread)
+            : _finished_lock(Genode::Lock::LOCKED),
+              _qthread(qthread) { }
+
+            virtual void entry()
+            {
+                QThreadPrivate::start(_qthread);
+                QThreadPrivate::finish(_qthread);
+                _finished_lock.unlock();
+            }
+
+            void join()
+            {
+                _finished_lock.lock();
+            }
+    };
+
+    Genode_thread *genode_thread;
+
+    struct tls_struct {
+      QThreadData *data;
+      bool termination_enabled;
+    };
+
+    static QHash<Qt::HANDLE, struct tls_struct> tls;
+
+    Qt::HANDLE thread_id;
+    QWaitCondition thread_done;
+
+    static void *start(void *arg);
+    static void finish(void *arg);
+
+#else // Q_OS_UNIX && !Q_OS_GENODE
     QWaitCondition thread_done;
 
     static void *start(void *arg);
     static void finish(void *);
 
+#endif // Q_OS_GENODE
 #endif // Q_OS_UNIX
 
 #ifdef Q_OS_WIN
diff --git a/qtbase/src/corelib/tools/qdatetime.cpp b/qtbase/src/corelib/tools/qdatetime.cpp
index e6d0b97..da15640 100644
--- a/qtbase/src/corelib/tools/qdatetime.cpp
+++ b/qtbase/src/corelib/tools/qdatetime.cpp
@@ -2145,6 +2145,9 @@ static int qt_timezone()
         long offset;
         _get_timezone(&offset);
         return offset;
+#elif defined(Q_OS_GENODE)
+		/* no timezone support on Genode */
+		return 0;
 #elif defined(Q_OS_BSD4) && !defined(Q_OS_DARWIN)
         time_t clock = time(NULL);
         struct tm t;
diff --git a/qtbase/src/gui/image/qxpmhandler.cpp b/qtbase/src/gui/image/qxpmhandler.cpp
index b673ae5..6df45c3 100644
--- a/qtbase/src/gui/image/qxpmhandler.cpp
+++ b/qtbase/src/gui/image/qxpmhandler.cpp
@@ -842,8 +842,16 @@ static bool read_xpm_header(
 #if defined(_MSC_VER) && _MSC_VER >= 1400 && !defined(Q_OS_WINCE)
         if (sscanf_s(buf, "%d %d %d %d", w, h, ncols, cpp) < 4)
 #else
+#ifdef Q_OS_GENODE
+    *w = QString(buf).section(" ", 0, 0, QString::SectionSkipEmpty).toInt();
+    *h = QString(buf).section(" ", 1, 1, QString::SectionSkipEmpty).toInt();
+    *ncols = QString(buf).section(" ", 2, 2, QString::SectionSkipEmpty).toInt();
+    *cpp = QString(buf).section(" ", 3, 3, QString::SectionSkipEmpty).toInt();
+    if (*w <= 0 || *h <= 0 || *ncols <= 0 || *cpp <= 0)
+#else
     if (sscanf(buf, "%d %d %d %d", w, h, ncols, cpp) < 4)
 #endif
+#endif
         return false;                                        // < 4 numbers parsed
 
     return true;
diff --git a/qtbase/src/network/access/qnetworkaccessfilebackend.cpp b/qtbase/src/network/access/qnetworkaccessfilebackend.cpp
index bb97bae..38de88b 100644
--- a/qtbase/src/network/access/qnetworkaccessfilebackend.cpp
+++ b/qtbase/src/network/access/qnetworkaccessfilebackend.cpp
@@ -118,6 +118,7 @@ void QNetworkAccessFileBackend::open()
         url.setPath(QLatin1String("/"));
     setUrl(url);
 
+#ifndef Q_OS_GENODE
     QString fileName = url.toLocalFile();
     if (fileName.isEmpty()) {
         if (url.scheme() == QLatin1String("qrc")) {
@@ -131,6 +132,10 @@ void QNetworkAccessFileBackend::open()
                 fileName = url.toString(QUrl::RemoveAuthority | QUrl::RemoveFragment | QUrl::RemoveQuery);
         }
     }
+#else
+    QString fileName = QLatin1String(":") + url.path();
+#endif
+
     file.setFileName(fileName);
 
     if (operation() == QNetworkAccessManager::GetOperation) {
diff --git a/qtbase/src/network/kernel/qhostinfo.cpp b/qtbase/src/network/kernel/qhostinfo.cpp
index c6c0954..934ebc3 100644
--- a/qtbase/src/network/kernel/qhostinfo.cpp
+++ b/qtbase/src/network/kernel/qhostinfo.cpp
@@ -512,7 +512,12 @@ QHostInfoLookupManager::QHostInfoLookupManager() : mutex(QMutex::Recursive), was
 {
     moveToThread(QCoreApplicationPrivate::mainThread());
     connect(QCoreApplication::instance(), SIGNAL(destroyed()), SLOT(waitForThreadPoolDone()), Qt::DirectConnection);
+#ifdef Q_OS_GENODE
+    /* 'getaddrinfo()' is currently not thread-safe on Genode */
+    threadPool.setMaxThreadCount(1);
+#else
     threadPool.setMaxThreadCount(20); // do up to 20 DNS lookups in parallel
+#endif
 }
 
 QHostInfoLookupManager::~QHostInfoLookupManager()
diff --git a/qtbase/src/network/kernel/qhostinfo_unix.cpp b/qtbase/src/network/kernel/qhostinfo_unix.cpp
index dabf191..ce3da10 100644
--- a/qtbase/src/network/kernel/qhostinfo_unix.cpp
+++ b/qtbase/src/network/kernel/qhostinfo_unix.cpp
@@ -142,6 +142,11 @@ QHostInfo QHostInfoAgent::fromName(const QString &hostName)
     QHostAddress address;
     if (address.setAddress(hostName)) {
         // Reverse lookup
+#ifdef Q_OS_GENODE
+    results.setError(QHostInfo::HostNotFound);
+    results.setErrorString(tr("Reverse lookup is not implemented because of missing support in lwip."));
+    return results;
+#else
 // Reverse lookups using getnameinfo are broken on darwin, use gethostbyaddr instead.
 #if !defined (QT_NO_GETADDRINFO) && !defined (Q_OS_DARWIN)
         sockaddr_in sa4;
@@ -172,7 +177,7 @@ QHostInfo QHostInfoAgent::fromName(const QString &hostName)
         if (ent)
             results.setHostName(QString::fromLatin1(ent->h_name));
 #endif
-
+#endif
         if (results.hostName().isEmpty())
             results.setHostName(address.toString());
         results.setAddresses(QList<QHostAddress>() << address);
diff --git a/qtbase/src/widgets/dialogs/qfiledialog.cpp b/qtbase/src/widgets/dialogs/qfiledialog.cpp
index bc2de89..ce3a97e 100644
--- a/qtbase/src/widgets/dialogs/qfiledialog.cpp
+++ b/qtbase/src/widgets/dialogs/qfiledialog.cpp
@@ -1106,7 +1106,7 @@ Q_AUTOTEST_EXPORT QString qt_tildeExpansion(const QString &path, bool *expanded
         userName.remove(0, 1);
 #if defined(Q_OS_VXWORKS)
         const QString homePath = QDir::homePath();
-#elif defined(_POSIX_THREAD_SAFE_FUNCTIONS) && !defined(Q_OS_OPENBSD)
+#elif defined(_POSIX_THREAD_SAFE_FUNCTIONS) && !defined(Q_OS_OPENBSD) && !defined(Q_OS_GENODE)
         passwd pw;
         passwd *tmpPw;
         char buf[200];
diff --git a/qtbase/src/widgets/styles/qstylefactory.cpp b/qtbase/src/widgets/styles/qstylefactory.cpp
index 520e303..8226dd2 100644
--- a/qtbase/src/widgets/styles/qstylefactory.cpp
+++ b/qtbase/src/widgets/styles/qstylefactory.cpp
@@ -184,6 +184,13 @@ QStringList QStyleFactory::keys()
     for (PluginKeyMap::const_iterator it = keyMap.constBegin(); it != cend; ++it)
         list.append(it.value());
 #endif
+#ifdef Q_OS_GENODE
+/* on Genode, the first style in the list gets selected by default and we want the "Fusion" style */
+#ifndef QT_NO_STYLE_FUSION
+    if (!list.contains(QLatin1String("Fusion")))
+        list << QLatin1String("Fusion");
+#endif
+#endif
 #ifndef QT_NO_STYLE_WINDOWS
     if (!list.contains(QLatin1String("Windows")))
         list << QLatin1String("Windows");
