qtdeclarative_generated.patch

From: Christian Prochaska <christian.prochaska@genode-labs.com>


---
 .../QtQml/5.12.4/QtQml/private/qqmljsgrammar_p.h   |    1 
 .../QtQml/5.12.4/QtQml/private/qqmljsparser_p.h    |    1 
 .../QtQml/5.12.4/QtQml/private/qtqml-config_p.h    |    1 
 qtdeclarative/include/QtQml/QtQmlDepends           |    5 
 qtdeclarative/include/QtQml/qtqml-config.h         |    1 
 .../5.12.4/QtQuick/private/qtquick-config_p.h      |    1 
 qtdeclarative/include/QtQuick/QtQuickDepends       |    6 
 qtdeclarative/include/QtQuick/qtquick-config.h     |    1 
 .../QtQuickParticles/QtQuickParticlesDepends       |    7 
 .../include/QtQuickShapes/QtQuickShapesDepends     |    7 
 .../include/QtQuickTest/QtQuickTestDepends         |    6 
 .../include/QtQuickWidgets/QtQuickWidgetsDepends   |    8 
 qtdeclarative/src/qml/qml_compile_hash_p.h         |    3 
 qtdeclarative/src/qml/qqmljsgrammar.cpp            | 1917 +++++++++++
 qtdeclarative/src/qml/qqmljsgrammar_p.h            |  222 +
 qtdeclarative/src/qml/qqmljsparser.cpp             | 3457 ++++++++++++++++++++
 qtdeclarative/src/qml/qqmljsparser_p.h             |  316 ++
 qtdeclarative/src/qml/qtqml-config.h               |    2 
 qtdeclarative/src/qml/qtqml-config_p.h             |   11 
 qtdeclarative/src/qml/qtqml_tracepoints_p.h        |    1 
 qtdeclarative/src/quick/qtquick-config.h           |    1 
 qtdeclarative/src/quick/qtquick-config_p.h         |   16 
 22 files changed, 5991 insertions(+)
 create mode 100644 qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsgrammar_p.h
 create mode 100644 qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsparser_p.h
 create mode 100644 qtdeclarative/include/QtQml/5.12.4/QtQml/private/qtqml-config_p.h
 create mode 100644 qtdeclarative/include/QtQml/QtQmlDepends
 create mode 100644 qtdeclarative/include/QtQml/qtqml-config.h
 create mode 100644 qtdeclarative/include/QtQuick/5.12.4/QtQuick/private/qtquick-config_p.h
 create mode 100644 qtdeclarative/include/QtQuick/QtQuickDepends
 create mode 100644 qtdeclarative/include/QtQuick/qtquick-config.h
 create mode 100644 qtdeclarative/include/QtQuickParticles/QtQuickParticlesDepends
 create mode 100644 qtdeclarative/include/QtQuickShapes/QtQuickShapesDepends
 create mode 100644 qtdeclarative/include/QtQuickTest/QtQuickTestDepends
 create mode 100644 qtdeclarative/include/QtQuickWidgets/QtQuickWidgetsDepends
 create mode 100644 qtdeclarative/src/qml/qml_compile_hash_p.h
 create mode 100644 qtdeclarative/src/qml/qqmljsgrammar.cpp
 create mode 100644 qtdeclarative/src/qml/qqmljsgrammar_p.h
 create mode 100644 qtdeclarative/src/qml/qqmljsparser.cpp
 create mode 100644 qtdeclarative/src/qml/qqmljsparser_p.h
 create mode 100644 qtdeclarative/src/qml/qtqml-config.h
 create mode 100644 qtdeclarative/src/qml/qtqml-config_p.h
 create mode 100644 qtdeclarative/src/qml/qtqml_tracepoints_p.h
 create mode 100644 qtdeclarative/src/quick/qtquick-config.h
 create mode 100644 qtdeclarative/src/quick/qtquick-config_p.h

diff --git a/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsgrammar_p.h b/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsgrammar_p.h
new file mode 100644
index 0000000..ab3ad73
--- /dev/null
+++ b/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsgrammar_p.h
@@ -0,0 +1 @@
+#include "../../../../../src/qml/qqmljsgrammar_p.h"
diff --git a/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsparser_p.h b/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsparser_p.h
new file mode 100644
index 0000000..deb9e72
--- /dev/null
+++ b/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qqmljsparser_p.h
@@ -0,0 +1 @@
+#include "../../../../../src/qml/qqmljsparser_p.h"
diff --git a/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qtqml-config_p.h b/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qtqml-config_p.h
new file mode 100644
index 0000000..1fdbd71
--- /dev/null
+++ b/qtdeclarative/include/QtQml/5.12.4/QtQml/private/qtqml-config_p.h
@@ -0,0 +1 @@
+#include "../../../../../src/qml/qtqml-config_p.h"
diff --git a/qtdeclarative/include/QtQml/QtQmlDepends b/qtdeclarative/include/QtQml/QtQmlDepends
new file mode 100644
index 0000000..bdbffd6
--- /dev/null
+++ b/qtdeclarative/include/QtQml/QtQmlDepends
@@ -0,0 +1,5 @@
+/* This file was generated by qmake with the info from <root>/src/qml/qml.pro. */
+#ifdef __cplusplus /* create empty PCH in C mode */
+#include <QtCore/QtCore>
+#include <QtNetwork/QtNetwork>
+#endif
diff --git a/qtdeclarative/include/QtQml/qtqml-config.h b/qtdeclarative/include/QtQml/qtqml-config.h
new file mode 100644
index 0000000..48fe1f2
--- /dev/null
+++ b/qtdeclarative/include/QtQml/qtqml-config.h
@@ -0,0 +1 @@
+#include "../../src/qml/qtqml-config.h"
diff --git a/qtdeclarative/include/QtQuick/5.12.4/QtQuick/private/qtquick-config_p.h b/qtdeclarative/include/QtQuick/5.12.4/QtQuick/private/qtquick-config_p.h
new file mode 100644
index 0000000..fcdf423
--- /dev/null
+++ b/qtdeclarative/include/QtQuick/5.12.4/QtQuick/private/qtquick-config_p.h
@@ -0,0 +1 @@
+#include "../../../../../src/quick/qtquick-config_p.h"
diff --git a/qtdeclarative/include/QtQuick/QtQuickDepends b/qtdeclarative/include/QtQuick/QtQuickDepends
new file mode 100644
index 0000000..d39ee68
--- /dev/null
+++ b/qtdeclarative/include/QtQuick/QtQuickDepends
@@ -0,0 +1,6 @@
+/* This file was generated by qmake with the info from <root>/src/quick/quick.pro. */
+#ifdef __cplusplus /* create empty PCH in C mode */
+#include <QtCore/QtCore>
+#include <QtGui/QtGui>
+#include <QtQml/QtQml>
+#endif
diff --git a/qtdeclarative/include/QtQuick/qtquick-config.h b/qtdeclarative/include/QtQuick/qtquick-config.h
new file mode 100644
index 0000000..2ab295b
--- /dev/null
+++ b/qtdeclarative/include/QtQuick/qtquick-config.h
@@ -0,0 +1 @@
+#include "../../src/quick/qtquick-config.h"
diff --git a/qtdeclarative/include/QtQuickParticles/QtQuickParticlesDepends b/qtdeclarative/include/QtQuickParticles/QtQuickParticlesDepends
new file mode 100644
index 0000000..ae06770
--- /dev/null
+++ b/qtdeclarative/include/QtQuickParticles/QtQuickParticlesDepends
@@ -0,0 +1,7 @@
+/* This file was generated by qmake with the info from <root>/src/particles/particles.pro. */
+#ifdef __cplusplus /* create empty PCH in C mode */
+#include <QtCore/QtCore>
+#include <QtGui/QtGui>
+#include <QtQml/QtQml>
+#include <QtQuick/QtQuick>
+#endif
diff --git a/qtdeclarative/include/QtQuickShapes/QtQuickShapesDepends b/qtdeclarative/include/QtQuickShapes/QtQuickShapesDepends
new file mode 100644
index 0000000..f1be23e
--- /dev/null
+++ b/qtdeclarative/include/QtQuickShapes/QtQuickShapesDepends
@@ -0,0 +1,7 @@
+/* This file was generated by qmake with the info from <root>/src/quickshapes/quickshapes.pro. */
+#ifdef __cplusplus /* create empty PCH in C mode */
+#include <QtCore/QtCore>
+#include <QtGui/QtGui>
+#include <QtQml/QtQml>
+#include <QtQuick/QtQuick>
+#endif
diff --git a/qtdeclarative/include/QtQuickTest/QtQuickTestDepends b/qtdeclarative/include/QtQuickTest/QtQuickTestDepends
new file mode 100644
index 0000000..a2d1dcf
--- /dev/null
+++ b/qtdeclarative/include/QtQuickTest/QtQuickTestDepends
@@ -0,0 +1,6 @@
+/* This file was generated by qmake with the info from <root>/src/qmltest/qmltest.pro. */
+#ifdef __cplusplus /* create empty PCH in C mode */
+#include <QtCore/QtCore>
+#include <QtTest/QtTest>
+#include <QtWidgets/QtWidgets>
+#endif
diff --git a/qtdeclarative/include/QtQuickWidgets/QtQuickWidgetsDepends b/qtdeclarative/include/QtQuickWidgets/QtQuickWidgetsDepends
new file mode 100644
index 0000000..6b0980a
--- /dev/null
+++ b/qtdeclarative/include/QtQuickWidgets/QtQuickWidgetsDepends
@@ -0,0 +1,8 @@
+/* This file was generated by qmake with the info from <root>/src/quickwidgets/quickwidgets.pro. */
+#ifdef __cplusplus /* create empty PCH in C mode */
+#include <QtCore/QtCore>
+#include <QtGui/QtGui>
+#include <QtQml/QtQml>
+#include <QtQuick/QtQuick>
+#include <QtWidgets/QtWidgets>
+#endif
diff --git a/qtdeclarative/src/qml/qml_compile_hash_p.h b/qtdeclarative/src/qml/qml_compile_hash_p.h
new file mode 100644
index 0000000..cd99a8f
--- /dev/null
+++ b/qtdeclarative/src/qml/qml_compile_hash_p.h
@@ -0,0 +1,3 @@
+// Generated file, DO NOT EDIT
+#define QML_COMPILE_HASH "48b4df598c88782f031f3df62964e159feeb20fb"
+#define QML_COMPILE_HASH_LENGTH 40
diff --git a/qtdeclarative/src/qml/qqmljsgrammar.cpp b/qtdeclarative/src/qml/qqmljsgrammar.cpp
new file mode 100644
index 0000000..7588561
--- /dev/null
+++ b/qtdeclarative/src/qml/qqmljsgrammar.cpp
@@ -0,0 +1,1917 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:GPL-EXCEPT$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3 as published by the Free Software
+** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+// This file was generated by qlalr - DO NOT EDIT!
+#include "qqmljsgrammar_p.h"
+
+QT_BEGIN_NAMESPACE
+
+const char *const QQmlJSGrammar::spell [] = {
+    "end of file", "&", "&&", "&=", "break", "case", "catch", ":", ",", "continue",
+    "default", "delete", "/", "/=", "do", ".", "else", "=", "==", "===",
+    "finally", "for", "function", ">=", ">", ">>", ">>=", ">>>", ">>>=", "identifier",
+    "if", "in", "instanceof", "{", "[", "<=", "(", "<", "<<", "<<=",
+    "-", "-=", "--", "new", "!", "!=", "!==", "numeric literal", "|", "|=",
+    "||", "+", "+=", "++", "?", "}", "]", "%", "%=", "return",
+    ")", ";", 0, "*", "**", "**=", "*=", "string literal", "property", "signal",
+    "readonly", "switch", "this", "throw", "~", "try", "typeof", "var", "void", "while",
+    "with", "^", "^=", "null", "true", "false", "const", "let", "debugger", "reserved word",
+    "multiline string literal", "comment", 0, "=>", "enum", "...", "yield", "super", "class", "extends",
+    "static", "export", "from", "(no subst template)", "(template head)", "(template middle)", "(template tail)", "public", "import", "pragma",
+    "as", "of", "get", "set", 0, 0, 0, 0, 0, 0,
+    0, "(force decl)", "(force block)", "(for lookahead ok)", 0, 0
+};
+
+const short QQmlJSGrammar::lhs [] = {
+    126, 126, 126, 126, 126, 126, 127, 133, 133, 136,
+    136, 136, 136, 139, 137, 137, 141, 138, 138, 138,
+    138, 138, 138, 138, 138, 143, 135, 134, 146, 146,
+    147, 147, 148, 148, 145, 130, 130, 130, 130, 151,
+    151, 153, 153, 153, 153, 153, 153, 153, 153, 153,
+    130, 161, 161, 161, 161, 162, 162, 163, 163, 130,
+    130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
+    130, 130, 130, 130, 130, 130, 130, 130, 130, 149,
+    130, 166, 166, 166, 166, 144, 144, 144, 144, 144,
+    144, 144, 144, 144, 140, 140, 140, 140, 140, 140,
+    140, 140, 140, 140, 140, 167, 168, 169, 169, 169,
+    169, 169, 169, 169, 169, 169, 169, 169, 178, 178,
+    178, 178, 170, 170, 170, 170, 170, 170, 176, 176,
+    171, 171, 171, 183, 183, 183, 183, 183, 185, 185,
+    182, 182, 186, 172, 172, 172, 152, 188, 152, 188,
+    190, 190, 191, 189, 190, 190, 194, 194, 196, 193,
+    196, 193, 196, 198, 198, 199, 199, 199, 199, 199,
+    199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
+    199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
+    199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
+    199, 199, 199, 197, 200, 192, 201, 202, 201, 202,
+    177, 203, 203, 177, 142, 204, 142, 142, 205, 142,
+    142, 142, 142, 206, 208, 208, 209, 142, 209, 209,
+    209, 209, 209, 207, 207, 207, 210, 210, 210, 210,
+    211, 211, 212, 212, 212, 212, 212, 213, 213, 213,
+    213, 213, 213, 213, 213, 214, 214, 215, 215, 216,
+    216, 216, 217, 217, 217, 218, 218, 218, 218, 219,
+    220, 219, 220, 221, 221, 221, 221, 221, 219, 222,
+    223, 222, 223, 224, 224, 224, 224, 225, 226, 225,
+    226, 227, 228, 227, 228, 229, 230, 229, 230, 231,
+    232, 231, 232, 233, 234, 233, 234, 235, 236, 235,
+    236, 187, 184, 187, 184, 187, 184, 187, 184, 187,
+    184, 241, 241, 241, 241, 241, 241, 241, 241, 241,
+    241, 241, 241, 129, 179, 129, 179, 242, 243, 242,
+    243, 128, 128, 128, 128, 128, 128, 128, 128, 128,
+    128, 128, 128, 128, 128, 252, 252, 252, 253, 253,
+    257, 257, 245, 245, 244, 155, 262, 262, 263, 263,
+    263, 261, 261, 264, 264, 265, 266, 255, 269, 271,
+    165, 165, 267, 268, 270, 272, 267, 268, 270, 272,
+    276, 273, 274, 275, 276, 273, 274, 275, 277, 277,
+    278, 278, 278, 279, 279, 279, 280, 280, 281, 281,
+    283, 282, 282, 282, 284, 284, 180, 180, 181, 181,
+    156, 150, 154, 154, 157, 157, 260, 260, 260, 260,
+    260, 260, 260, 285, 285, 260, 260, 286, 286, 286,
+    286, 246, 246, 246, 246, 247, 247, 247, 247, 248,
+    248, 158, 159, 287, 287, 290, 290, 288, 288, 291,
+    289, 249, 292, 292, 250, 250, 160, 160, 160, 293,
+    294, 295, 295, 251, 251, 296, 164, 258, 258, 173,
+    173, 301, 297, 297, 297, 297, 297, 302, 302, 303,
+    298, 300, 299, 239, 240, 239, 240, 304, 304, 305,
+    195, 195, 195, 195, 309, 306, 308, 256, 259, 259,
+    175, 175, 307, 237, 238, 237, 238, 237, 238, 254,
+    174, 314, 174, 314, 311, 313, 315, 310, 310, 312,
+    312, 316, 316, 317, 317, 317, 131, 131, 318, 132,
+    320, 319, 319, 321, 321, 322, 322, 322, 322, 322,
+    323, 323, 325, 325, 325, 325, 325, 328, 329, 330,
+    330, 330, 326, 332, 332, 333, 333, 327, 331, 334,
+    324, 324, 324, 324, 324, 324, 324, 324, 335, 335,
+    335, 336, 336, 337, 337, 338
+};
+
+const short QQmlJSGrammar::rhs [] = {
+    2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
+    1, 2, 2, 1, 3, 3, 1, 2, 2, 3,
+    3, 5, 5, 4, 4, 2, 0, 1, 1, 2,
+    1, 3, 2, 3, 2, 1, 6, 5, 4, 4,
+    5, 3, 3, 3, 2, 2, 2, 2, 2, 2,
+    3, 1, 1, 1, 3, 0, 1, 2, 4, 6,
+    6, 3, 3, 7, 7, 4, 4, 5, 5, 8,
+    8, 5, 6, 6, 10, 7, 8, 1, 1, 1,
+    5, 1, 3, 3, 5, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
+    3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
+    3, 3, 5, 1, 2, 2, 4, 4, 1, 2,
+    0, 1, 2, 2, 3, 4, 1, 1, 3, 3,
+    1, 1, 2, 3, 3, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 3, 2, 2, 0, 0, 1, 1,
+    1, 1, 3, 3, 1, 1, 4, 4, 3, 3,
+    3, 1, 5, 1, 1, 2, 2, 2, 4, 4,
+    4, 4, 3, 0, 1, 2, 1, 2, 3, 4,
+    1, 1, 1, 2, 2, 2, 2, 1, 2, 2,
+    2, 2, 2, 2, 2, 1, 3, 1, 3, 1,
+    1, 1, 1, 3, 3, 1, 3, 3, 3, 1,
+    1, 3, 3, 1, 1, 1, 1, 1, 3, 1,
+    1, 3, 3, 1, 1, 1, 1, 1, 1, 3,
+    3, 1, 1, 3, 3, 1, 1, 3, 3, 1,
+    1, 3, 3, 1, 1, 3, 3, 1, 1, 5,
+    5, 1, 1, 1, 1, 1, 1, 3, 3, 3,
+    3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 3, 3, 0, 0, 1,
+    1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
+    2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
+    1, 1, 1, 1, 1, 3, 1, 2, 1, 4,
+    4, 1, 1, 1, 1, 1, 2, 2, 2, 2,
+    2, 2, 1, 1, 1, 1, 3, 3, 3, 3,
+    2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
+    0, 1, 2, 2, 1, 4, 1, 3, 1, 3,
+    2, 2, 4, 4, 2, 2, 2, 2, 0, 1,
+    1, 0, 2, 2, 7, 5, 7, 7, 7, 5,
+    9, 9, 9, 1, 1, 7, 7, 2, 2, 2,
+    2, 2, 2, 3, 3, 2, 2, 3, 3, 3,
+    3, 5, 5, 3, 5, 1, 2, 0, 1, 4,
+    3, 3, 1, 3, 3, 3, 3, 3, 4, 5,
+    2, 1, 1, 2, 2, 1, 8, 1, 7, 8,
+    7, 1, 0, 1, 1, 2, 3, 1, 3, 1,
+    1, 1, 1, 4, 4, 7, 7, 1, 1, 0,
+    7, 8, 7, 8, 1, 1, 1, 9, 1, 8,
+    9, 8, 1, 1, 1, 3, 3, 2, 2, 6,
+    6, 5, 5, 1, 1, 1, 1, 0, 2, 0,
+    1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
+    1, 0, 1, 1, 2, 2, 2, 2, 2, 1,
+    3, 2, 1, 1, 1, 3, 3, 1, 3, 2,
+    3, 4, 2, 1, 3, 1, 3, 1, 1, 0,
+    3, 3, 2, 2, 2, 5, 5, 4, 2, 3,
+    4, 1, 3, 1, 3, 2
+};
+
+const short QQmlJSGrammar::action_default [] = {
+    0, 0, 422, 422, 422, 0, 27, 0, 266, 111,
+    316, 0, 334, 498, 292, 300, 296, 242, 114, 312,
+    118, 288, 258, 3, 113, 115, 109, 106, 243, 110,
+    304, 308, 225, 222, 263, 241, 224, 112, 215, 116,
+    281, 271, 0, 105, 528, 0, 129, 130, 125, 102,
+    0, 100, 95, 0, 141, 0, 0, 0, 127, 0,
+    0, 211, 123, 126, 104, 99, 0, 0, 96, 98,
+    101, 97, 103, 128, 216, 0, 108, 0, 124, 0,
+    0, 514, 117, 256, 248, 314, 0, 0, 118, 109,
+    243, 265, 245, 244, 0, 261, 262, 260, 259, 264,
+    500, 0, 494, 0, 422, 491, 372, 0, 369, 422,
+    367, 493, 317, 0, 335, 293, 301, 297, 349, 347,
+    313, 348, 355, 344, 289, 345, 0, 109, 346, 363,
+    352, 243, 305, 309, 280, 350, 270, 364, 0, 0,
+    0, 422, 0, 0, 0, 0, 339, 421, 0, 0,
+    0, 376, 0, 0, 515, 353, 354, 0, 0, 343,
+    351, 315, 500, 0, 495, 0, 422, 0, 497, 492,
+    0, 291, 0, 284, 286, 285, 287, 282, 0, 277,
+    275, 0, 278, 276, 274, 272, 0, 0, 0, 268,
+    269, 267, 279, 0, 299, 0, 295, 423, 0, 424,
+    337, 422, 0, 462, 463, 0, 0, 464, 476, 0,
+    107, 483, 488, 208, 208, 484, 485, 0, 0, 401,
+    141, 415, 210, 0, 206, 416, 486, 489, 487, 0,
+    422, 0, 477, 417, 418, 208, 407, 402, 158, 159,
+    107, 157, 0, 0, 165, 166, 167, 168, 200, 194,
+    169, 196, 170, 171, 172, 173, 174, 202, 201, 175,
+    176, 177, 178, 179, 203, 180, 181, 0, 195, 182,
+    183, 163, 197, 184, 161, 198, 185, 186, 187, 188,
+    189, 190, 191, 192, 193, 199, 412, 403, 408, 399,
+    0, 208, 208, 413, 414, 0, 204, 0, 405, 409,
+    142, 419, 139, 400, 141, 410, 419, 411, 420, 406,
+    140, 404, 0, 331, 324, 0, 329, 330, 328, 327,
+    333, 326, 325, 322, 323, 332, 321, 319, 0, 303,
+    0, 0, 307, 0, 0, 311, 0, 446, 447, 448,
+    449, 0, 442, 443, 444, 445, 474, 475, 0, 0,
+    0, 0, 0, 0, 427, 428, 429, 338, 340, 0,
+    0, 243, 0, 0, 375, 374, 0, 0, 0, 336,
+    339, 0, 341, 339, 0, 422, 431, 0, 434, 435,
+    0, 422, 437, 0, 0, 0, 320, 0, 422, 436,
+    318, 438, 377, 440, 383, 392, 0, 207, 0, 387,
+    209, 391, 0, 205, 395, 396, 339, 0, 339, 0,
+    422, 433, 439, 441, 385, 379, 393, 397, 0, 207,
+    0, 389, 339, 0, 339, 0, 422, 432, 365, 342,
+    422, 0, 366, 357, 0, 0, 359, 360, 356, 0,
+    358, 0, 370, 371, 0, 0, 483, 506, 0, 0,
+    422, 513, 0, 508, 507, 208, 378, 0, 384, 0,
+    388, 528, 0, 0, 530, 525, 0, 532, 531, 0,
+    164, 534, 0, 100, 536, 101, 0, 527, 520, 526,
+    533, 535, 483, 482, 0, 0, 422, 0, 501, 0,
+    0, 0, 422, 0, 503, 0, 0, 490, 505, 0,
+    0, 422, 0, 504, 0, 483, 0, 0, 422, 0,
+    502, 529, 0, 0, 422, 426, 422, 425, 0, 450,
+    451, 0, 0, 0, 453, 458, 456, 459, 0, 0,
+    457, 458, 0, 454, 0, 455, 422, 461, 0, 422,
+    460, 0, 465, 466, 0, 467, 468, 0, 0, 469,
+    0, 472, 473, 0, 0, 470, 471, 0, 0, 422,
+    430, 0, 0, 422, 452, 519, 0, 517, 208, 0,
+    380, 386, 394, 398, 0, 390, 381, 382, 496, 0,
+    368, 0, 290, 0, 283, 0, 273, 0, 298, 0,
+    294, 0, 0, 234, 227, 233, 0, 232, 235, 0,
+    237, 0, 236, 239, 0, 240, 231, 238, 0, 302,
+    0, 0, 306, 0, 0, 310, 0, 0, 234, 228,
+    221, 0, 218, 0, 229, 0, 0, 234, 220, 0,
+    217, 0, 230, 528, 0, 0, 530, 0, 521, 530,
+    0, 523, 249, 248, 0, 483, 0, 483, 0, 0,
+    422, 0, 480, 0, 0, 422, 0, 481, 0, 483,
+    483, 0, 0, 422, 0, 511, 0, 0, 422, 0,
+    512, 152, 151, 156, 148, 0, 0, 144, 153, 0,
+    145, 150, 146, 0, 155, 134, 0, 142, 0, 141,
+    132, 0, 137, 138, 0, 133, 143, 135, 136, 131,
+    0, 0, 120, 121, 419, 119, 0, 122, 253, 247,
+    225, 226, 0, 0, 234, 0, 223, 219, 255, 252,
+    246, 0, 0, 212, 214, 0, 213, 254, 251, 250,
+    518, 0, 516, 0, 257, 0, 0, 6, 543, 540,
+    544, 422, 550, 0, 0, 548, 549, 546, 547, 545,
+    575, 573, 570, 0, 0, 574, 572, 0, 563, 568,
+    0, 578, 0, 524, 577, 0, 478, 361, 509, 362,
+    576, 528, 483, 0, 0, 0, 422, 0, 479, 483,
+    0, 0, 422, 0, 510, 0, 530, 0, 522, 582,
+    0, 584, 579, 0, 580, 583, 581, 0, 585, 571,
+    569, 0, 558, 553, 552, 554, 555, 0, 0, 551,
+    0, 556, 557, 0, 564, 566, 0, 560, 0, 567,
+    0, 561, 565, 562, 0, 559, 5, 538, 422, 2,
+    78, 80, 0, 0, 476, 0, 96, 98, 97, 36,
+    4, 0, 79, 0, 54, 53, 52, 0, 0, 54,
+    0, 0, 0, 55, 0, 93, 91, 86, 94, 90,
+    87, 89, 92, 88, 70, 71, 0, 68, 422, 69,
+    0, 74, 45, 46, 47, 49, 0, 0, 50, 48,
+    43, 422, 44, 372, 126, 128, 147, 0, 0, 0,
+    40, 162, 41, 160, 149, 0, 154, 42, 0, 0,
+    0, 82, 0, 81, 84, 0, 85, 0, 83, 0,
+    54, 0, 0, 0, 0, 0, 64, 0, 65, 0,
+    0, 31, 0, 0, 75, 32, 0, 35, 33, 29,
+    0, 34, 30, 0, 66, 422, 67, 0, 72, 225,
+    0, 76, 0, 0, 0, 422, 0, 73, 225, 0,
+    77, 0, 62, 56, 63, 57, 0, 0, 0, 0,
+    59, 0, 60, 61, 58, 422, 0, 0, 51, 141,
+    0, 0, 37, 38, 0, 39, 8, 0, 0, 9,
+    0, 11, 0, 10, 1, 26, 17, 14, 0, 15,
+    16, 13, 12, 28, 7, 0, 18, 0, 19, 0,
+    24, 25, 0, 20, 21, 0, 22, 23, 586
+};
+
+const short QQmlJSGrammar::goto_default [] = {
+    7, 984, 108, 23, 840, 826, 737, 980, 994, 976,
+    979, 983, 981, 988, 27, 985, 32, 982, 866, 839,
+    930, 920, 927, 922, 106, 882, 887, 871, 125, 428,
+    123, 128, 160, 137, 156, 911, 956, 955, 830, 159,
+    900, 26, 13, 38, 29, 9, 37, 24, 18, 25,
+    39, 82, 20, 126, 215, 311, 688, 686, 114, 300,
+    698, 12, 675, 886, 674, 671, 222, 888, 472, 471,
+    241, 238, 239, 244, 400, 416, 395, 724, 42, 36,
+    33, 599, 35, 17, 598, 131, 84, 83, 22, 34,
+    94, 8, 136, 134, 40, 178, 124, 21, 172, 14,
+    115, 16, 117, 15, 116, 30, 132, 31, 133, 19,
+    120, 85, 161, 10, 112, 383, 359, 518, 429, 119,
+    121, 118, 135, 130, 155, 122, 434, 438, 433, 440,
+    437, 770, 767, 769, 129, 111, 109, 110, 439, 157,
+    363, 392, 456, 367, 415, 158, 570, 394, 414, 571,
+    399, 214, 242, 297, 237, 298, 236, 299, 212, 377,
+    360, 524, 528, 531, 527, 526, 203, 545, 546, 553,
+    206, 483, 104, 451, 578, 484, 216, 498, 113, 101,
+    446, 452, 453, 499, 634, 464, 466, 478, 764, 469,
+    468, 467, 827, 739, 738, 741, 740, 736, 735, 801,
+    756, 804, 803, 805, 806, 815, 816, 814, 760, 751,
+    790, 789, 0
+};
+
+const short QQmlJSGrammar::action_index [] = {
+    360, 2257, 317, 158, -126, 1795, 188, 277, 218, -126,
+    -126, 75, -126, -126, 142, 96, 83, 422, -126, -126,
+    76, 393, -126, 172, -126, -126, 85, -126, 1036, -126,
+    68, 213, 409, -126, 302, -126, -126, -126, -126, -126,
+    427, 288, 291, -126, 685, 2142, -126, -126, -126, -126,
+    901, -126, -126, 5445, 2953, 3643, 2142, 2142, -126, 1679,
+    2142, -126, -126, -126, -126, -126, 2142, 2142, -126, -126,
+    -126, -126, -126, -126, -126, 2257, -126, 2142, -126, 2142,
+    2142, 3413, -126, -126, 28, -126, 2142, 2142, -126, -126,
+    168, 310, -126, -126, 2142, -126, -126, -126, -126, 337,
+    -126, 3298, -126, 105, -126, -126, 5567, 86, -126, 336,
+    -126, -126, -126, 78, -126, 147, 106, 100, -126, -126,
+    -126, -126, -126, -126, 504, -126, 323, 187, -126, -126,
+    -126, 1223, 153, 145, 483, -126, 309, -126, 885, 881,
+    130, -126, 121, 128, 346, 120, 2372, -126, 114, 2372,
+    119, -126, 111, 110, 3068, -126, -126, 906, 150, -126,
+    -126, -126, -126, 3183, -126, 112, -126, 94, -126, -126,
+    2142, 377, 2142, -126, -126, -126, -126, 464, 2142, -126,
+    -126, 2142, -126, -126, -126, 352, 2142, 2142, 2142, 183,
+    186, 198, 263, 2142, 109, 2142, 174, -126, 2372, -126,
+    -126, -126, 5689, -126, -126, 161, 712, -126, -126, 138,
+    -126, 1100, -126, 159, 149, -126, 155, 107, 1003, 4835,
+    177, -126, -126, 2372, -126, -126, 1100, -126, -126, 156,
+    -126, 52, -126, -126, -126, 84, -126, 116, -126, -126,
+    189, -126, 49, 88, -126, -126, -126, -126, -126, -126,
+    -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
+    -126, -126, -126, -126, -126, -126, -126, 2372, -126, -126,
+    -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
+    -126, -126, -126, -126, -126, -126, -126, 4835, -126, -126,
+    906, 77, 74, -126, -126, 27, -126, 29, 63, -126,
+    65, 1100, -126, -126, 71, -126, 1100, -126, -126, -126,
+    -126, -126, 2372, -126, -126, 2372, -126, -126, -126, -126,
+    -126, -126, -126, -126, -126, -126, -126, -126, 2142, 41,
+    2142, 2372, 79, 81, 2372, -126, 171, -126, -126, -126,
+    -126, 169, -126, -126, -126, -126, -126, -126, 5201, 72,
+    104, 2372, 205, 241, -126, -126, -126, 3873, 125, 70,
+    176, 1122, 1003, 64, -126, -126, 906, 58, 2257, -126,
+    2372, 44, 90, 2372, 53, -126, -126, 2372, -126, -126,
+    195, -126, -126, 2257, 2372, 2257, -126, 185, -126, -126,
+    -126, 327, 102, 95, -126, -126, 906, 97, 92, -126,
+    -126, -126, 2257, -126, -126, -126, 2372, 60, 2372, 62,
+    -126, -126, 322, 101, -126, 115, -126, -126, 1003, 99,
+    98, -126, 2372, 59, 2372, 57, -126, -126, -126, -126,
+    -126, 56, -126, -126, 211, 708, -126, -126, -126, 906,
+    -126, 564, -126, -126, 712, 91, 1100, -126, 69, 93,
+    -126, -126, 73, -126, -126, 113, 124, 117, -126, 759,
+    -126, 61, 103, 1451, 5079, -126, 82, -126, 5079, 4957,
+    -126, -126, 50, 4835, -126, 4835, 4835, 46, -126, -126,
+    -126, -126, 1100, -126, 20, 39, -126, 38, -126, 40,
+    24, 45, -126, 42, -126, 54, 906, -126, -126, 43,
+    66, -126, 47, -126, -28, 1100, 48, 67, -126, 51,
+    -126, -126, 2372, 231, -126, 80, -126, -126, 181, -126,
+    -126, 2372, 214, 144, -126, 157, -126, 160, 209, 2372,
+    -126, 167, 166, -126, 127, -126, -126, -126, 396, -126,
+    -126, 308, -126, -126, 246, 164, -126, 162, 146, -126,
+    906, -126, -126, 126, 154, -126, -126, 2372, 208, -126,
+    -126, 2372, 210, -126, -126, -126, 2372, -126, 118, 122,
+    134, -126, -126, -126, 782, -126, -126, -126, -126, 5567,
+    -126, 2142, 368, 2142, 437, 2142, 315, 2142, 89, 2142,
+    152, 4225, 2372, 2487, -126, -126, 239, -126, 7, -39,
+    -126, 2372, 2835, -126, 2372, -126, -126, -126, 2142, -26,
+    2142, 2372, 21, 6, 2257, -126, 4225, 2372, 2487, -126,
+    -126, 236, -126, -30, -126, 4225, 2372, 2487, -126, 228,
+    -126, -60, -126, -87, 33, 33, 5079, 13, -126, 5079,
+    5, -126, -126, -126, 25, 1100, 650, 1100, -3, 31,
+    -126, 22, -126, -25, 3, -126, -17, -126, 4, 1100,
+    1100, -18, 1, -126, -8, -126, -4, 18, -126, -16,
+    -126, -126, 312, -126, -126, 243, 253, -126, -126, 5323,
+    -126, -126, -126, 2372, -126, -126, 249, 2605, 215, 17,
+    -126, 3758, -126, -126, 2257, -126, -126, -126, -126, -126,
+    2, 240, -126, -126, 2720, -126, -12, -126, -126, -126,
+    406, -126, 212, 12, 2487, -14, -126, -126, -126, -126,
+    -126, 348, 2257, -126, -126, 330, -126, -126, -126, -126,
+    -126, 2257, -126, 2142, -126, 232, 217, -126, -126, -126,
+    -126, 220, -126, 494, 998, -126, -126, -126, -126, -126,
+    -126, -75, -126, 4347, -96, -126, -126, -9, -126, -126,
+    3528, -126, 178, -126, -126, 805, -126, -126, -126, -126,
+    -126, 632, 1100, 809, 15, 26, -126, -1, -126, 1100,
+    -27, -7, -126, -36, -126, 32, 5079, -41, -126, -126,
+    206, -86, -126, 4469, -126, -126, -126, 4225, -126, -126,
+    -126, -52, -126, 151, -126, -126, -126, 4713, -57, -126,
+    196, -126, -126, -101, -126, -126, 207, -126, 580, -126,
+    4591, -126, -126, -126, 712, -126, -126, -126, 55, -126,
+    -126, 386, 19, 8, 165, 1565, 283, -24, 16, -126,
+    -126, 304, -126, 275, 37, -126, -126, 615, 342, -126,
+    193, 23, 499, -126, 163, -126, -126, -126, -126, -126,
+    -126, -126, -126, -126, -126, -126, 347, -126, -126, -126,
+    4103, -126, -126, -126, -126, -126, -29, 2372, -126, -126,
+    -126, -126, -126, 5811, 11, 10, -126, 201, 9, 296,
+    -126, -126, -126, -126, -126, 2372, -126, -126, -5, 0,
+    180, 14, -19, -126, -15, -42, -126, -40, -126, 431,
+    -34, 615, 303, 182, 495, 313, -126, -2, -126, 1337,
+    194, -126, 36, 1337, -126, -126, 1911, -126, -126, -126,
+    2027, -126, -126, 300, -126, -126, -126, 4103, -126, 458,
+    -13, -126, 289, 615, -6, -126, 4103, -126, 448, -22,
+    -126, 247, -126, 321, -126, 35, -11, 615, 316, 615,
+    -126, 143, -126, -126, -126, -126, 1210, 3988, -126, 2953,
+    34, 267, -126, -126, 30, -126, -126, 1337, 545, 173,
+    1337, -126, 387, -126, -126, -126, 382, -126, 179, -126,
+    -126, -126, -126, -126, -126, 474, -126, 320, -126, 192,
+    -126, -126, 471, -126, -126, 224, -126, -126, -126,
+
+    -213, 160, 123, 148, 168, 658, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, 81, -213, -213,
+    -213, 44, -213, -213, -213, -213, -213, -213, -213, -213,
+    -213, -213, 104, -213, -213, -213, -213, -213, -213, -213,
+    48, -213, -213, -213, 124, 659, -213, -213, -213, -213,
+    116, -213, -213, 212, 120, 197, 500, 505, -213, 506,
+    493, -213, -213, -213, -213, -213, 521, 529, -213, -213,
+    -213, -213, -213, -213, -213, 267, -213, 560, -213, 638,
+    619, 218, -213, -213, -213, -213, 306, 309, -213, -213,
+    -213, -213, -213, -213, 487, -213, -213, -213, -213, -213,
+    -213, 307, -213, -213, -46, -213, 82, -213, -213, 184,
+    -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
+    -213, 11, -213, -213, -213, -213, -213, -213, 60, 99,
+    -213, 198, -213, -213, 171, -213, 66, -213, -213, 86,
+    28, -213, -213, -213, 1, -213, -213, 225, -213, -213,
+    -213, -213, -117, 7, -213, -108, -106, -104, -213, -213,
+    422, -213, 432, -213, -213, -213, -213, -213, 329, -213,
+    -213, 434, -213, -213, -213, -213, 451, 458, 430, -213,
+    -213, -213, -213, 459, -213, 468, -213, -213, -13, -213,
+    -213, 204, 9, -213, -213, 57, 196, -213, -213, -213,
+    -213, 217, -213, 32, 34, -213, -213, -213, 213, 215,
+    26, -213, -213, 23, -213, -213, 393, -213, -213, -99,
+    -95, -98, -213, -213, -213, 10, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, 29, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, 342, -213, -213,
+    223, 16, 17, -213, -213, -213, -213, -213, -213, -213,
+    -213, 312, -213, -213, 117, -213, 555, -213, -213, -213,
+    -213, -213, 31, -213, -213, 30, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, 376, -213,
+    391, 27, -213, -213, 25, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, 39, -213,
+    -213, 21, -213, -213, -213, -213, -213, 610, -213, -213,
+    -213, -80, 295, -213, -213, -213, 291, -213, 359, -213,
+    115, -213, -213, 114, -213, 162, -213, 24, -213, -213,
+    -213, 161, -213, 377, 22, 387, -213, -213, 159, -213,
+    -213, -213, -213, 36, -213, -213, 272, 40, 38, -213,
+    -213, -213, 398, -213, -213, -213, 107, -213, 106, -213,
+    315, -213, -213, 37, -213, -213, -213, -213, 408, -213,
+    35, -213, 103, -213, 101, -213, 151, -213, -213, -213,
+    -35, -213, -213, -213, -213, 109, -213, -213, -213, 330,
+    -213, 169, -213, -213, 188, -213, 258, -213, -213, -75,
+    -213, -213, -213, -213, -213, -213, -213, 33, -213, 471,
+    -213, -88, -213, 250, 53, -213, -213, -213, 172, 199,
+    -213, -213, -213, 194, -213, 201, 203, -213, -213, -213,
+    -213, -213, 205, -213, -213, -81, -83, -90, -213, -213,
+    -213, -109, -118, -120, -213, -213, 254, -213, -213, -213,
+    -119, -121, -127, -213, -178, 252, -213, -124, -135, -141,
+    -213, -213, -2, -213, 178, -213, 179, -213, -213, -213,
+    -213, -4, -213, -213, -213, -213, -213, -123, -213, -9,
+    -213, -122, -213, -213, -213, -213, -96, -213, -213, -97,
+    -213, -213, -213, -213, -213, -125, -213, -213, 42, -213,
+    246, -213, -213, -213, 69, -213, -213, 19, -213, 195,
+    -213, 15, -213, 202, -213, -213, 8, -213, -20, 3,
+    -213, -213, -213, -213, 304, -213, -213, -213, -213, 20,
+    -213, 542, -38, 578, -37, 308, -213, 519, -213, 588,
+    -213, 164, 80, 76, -213, -213, -213, -213, -213, -213,
+    -213, 77, 78, -213, 79, -213, -213, -213, 590, -213,
+    591, 83, -213, -213, 290, -213, 153, 93, 131, -213,
+    -213, -213, -213, -213, -213, 149, 50, 126, -213, -213,
+    -213, -213, -213, -78, -72, -71, 154, -67, -213, 200,
+    -65, -213, -213, -213, -213, 270, 277, 281, -213, -48,
+    -44, -43, -213, -213, -56, -66, -69, -213, -36, 248,
+    236, -213, -68, -64, -52, -213, -213, -47, -53, -61,
+    -213, -213, 52, -213, -213, -213, -213, -213, -213, 437,
+    -213, -213, -213, 90, -213, -213, -213, 91, -213, 89,
+    -213, 111, -213, -213, 404, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, 251, -213, -213, -213, -213, -213,
+    104, -213, -213, -213, 118, -213, -213, -213, -213, -213,
+    -213, -213, 317, -213, -213, 61, -213, -213, -213, -213,
+    -213, 316, -213, 337, -213, -213, -213, -213, -213, -213,
+    -213, 219, -213, 365, 283, -213, -213, -213, -213, -213,
+    -213, -213, -213, 121, -183, -213, -213, -185, -213, -213,
+    -39, -213, 288, -213, -213, 192, -213, -213, -213, -213,
+    -213, 256, 289, 287, -213, -143, -142, -144, -213, 266,
+    -213, -145, -180, -177, -213, -175, 141, -179, -213, -213,
+    -213, -213, -213, 220, -213, -213, -213, 155, -213, -213,
+    -213, -174, -213, -213, -213, -213, -213, 244, -213, -213,
+    12, -213, -213, -213, -213, -213, -213, -213, 234, -213,
+    301, -213, -213, -213, 231, -213, -213, -213, 167, -213,
+    -213, 104, -213, -213, 146, 486, -213, -213, -213, -213,
+    -213, -213, -213, -22, -213, -213, -213, -213, -7, -213,
+    -213, -213, 4, -213, -213, -213, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, 13, -213,
+    844, -213, -213, -213, -213, -213, 5, -10, -213, -213,
+    -213, 128, -213, -16, -213, -213, -213, -213, -213, -30,
+    -213, -213, -213, -213, -213, -58, -213, -213, -213, -213,
+    -213, -213, -213, -213, -213, -213, -213, -213, -213, 104,
+    -213, -3, -12, -213, 2, -213, -213, -213, -213, 583,
+    -213, -213, -213, 584, -213, -213, 715, -213, -213, -213,
+    712, -213, -213, -213, -213, 190, -213, 766, -213, 104,
+    -11, -213, -29, -6, -213, 150, 746, -213, 104, -15,
+    -213, -213, -213, -32, -213, -213, -213, 18, 0, 14,
+    -213, -213, -213, -213, -213, 174, 625, 727, -213, 633,
+    -1, -213, -213, -213, -8, -213, -213, 328, -5, 237,
+    637, -213, -213, -213, -213, -213, 104, -213, -213, -213,
+    -213, -213, -213, -213, -213, 6, -213, -213, -213, -213,
+    -213, -213, -14, -213, -213, -213, -213, -213, -213
+};
+
+const short QQmlJSGrammar::action_info [] = {
+    632, 945, 905, 912, 881, 906, 757, 908, 447, 818,
+    904, 926, 463, 614, 479, 602, 895, -160, -162, 454,
+    926, 606, 587, 608, 797, 302, 105, 757, 899, 901,
+    624, 907, 919, 781, 105, 654, 105, 898, 169, 454,
+    447, 717, 662, 958, 942, 951, 716, 454, 707, 961,
+    757, 105, 853, 824, 169, -539, 667, 649, 759, 105,
+    479, 647, 703, 926, 105, 465, 465, 926, 479, 926,
+    608, 304, 105, 310, 848, 775, 490, 169, 105, 302,
+    485, 328, -103, 296, 491, 303, 482, 843, 334, 193,
+    496, 223, 733, 169, 223, 290, 516, 169, 198, 105,
+    105, 223, 169, 500, 289, 373, 454, 169, 507, 402,
+    396, 432, 223, 375, 402, 402, 402, 426, 402, 422,
+    424, 408, 410, 418, 287, 406, 105, 447, 454, 449,
+    223, 370, 459, 368, 223, 223, 465, 479, 105, 223,
+    351, 169, 574, 581, 587, 105, 561, 557, 170, 169,
+    521, 350, 430, 581, 193, 328, 512, 357, -537, 810,
+    463, 430, 529, 226, 589, 529, 223, 229, 100, -499,
+    589, 162, 529, 536, 211, 170, 223, 525, -107, 430,
+    368, 195, 535, 208, 548, 302, 554, 430, 902, 105,
+    195, 347, 346, 198, 201, 330, -164, 851, 550, 331,
+    208, 645, 923, 198, 963, 962, 914, 378, 851, 889,
+    92, 577, 576, 198, 793, 820, 198, 852, 198, 532,
+    -541, 93, 198, 86, 865, 864, 86, 625, 646, 807,
+    345, 344, 340, 339, 87, 903, 198, 87, 86, 198,
+    990, 989, 520, 519, 198, 388, 626, 198, 704, 87,
+    924, 679, 547, 1001, 1000, 381, 890, 689, 86, 808,
+    683, 794, 821, 610, 533, 353, 548, 611, 559, 87,
+    563, 699, 443, 442, 523, 923, 771, 1008, 748, 747,
+    -107, 977, 978, 953, 630, 1007, 1006, 379, 186, 482,
+    187, 514, 622, 746, 745, 597, 977, 978, 680, -164,
+    705, 188, 356, 354, 844, 690, 625, 935, 954, 952,
+    694, 965, 910, 186, 95, 187, 198, -542, 849, -164,
+    917, 743, 95, 972, 0, 626, 188, 627, 744, 223,
+    -207, 198, 849, 355, 186, -208, 187, 926, 368, 402,
+    186, -373, 187, 891, 223, 849, -373, 188, -164, 95,
+    849, 892, 846, 188, 868, 0, 368, 0, 0, 96,
+    846, 936, 934, 893, 845, 97, 846, 96, 208, 543,
+    542, 849, 845, 97, 918, 916, 0, 186, 845, 187,
+    846, 1004, 1003, -207, 199, 197, 173, 174, -208, 0,
+    188, -373, 845, 846, 96, 173, 174, 616, 846, 0,
+    97, 616, 0, 539, 198, 845, 0, 0, 869, 867,
+    845, 173, 174, 175, 176, 0, 617, 0, 743, 846,
+    617, 616, 175, 176, 616, 744, 0, 0, 966, 0,
+    1002, 845, 364, 365, 997, 722, 723, 591, 175, 176,
+    617, 0, 714, 617, 441, 618, 616, 0, 998, 996,
+    179, 180, 0, 722, 723, 0, 592, 0, 593, 182,
+    179, 180, 183, 616, 184, 617, 0, 714, 0, 182,
+    0, 0, 183, 616, 184, 6, 5, 4, 1, 3,
+    2, -80, 617, 0, 618, 61, 75, 179, 180, 61,
+    75, -80, 617, 0, 618, 181, 182, 995, 0, 183,
+    857, 184, 0, 857, 752, 0, 179, 180, 0, 61,
+    75, 0, 61, 75, 181, 182, 208, 0, 183, 0,
+    184, 0, 173, 174, 857, 61, 75, 753, 857, 0,
+    0, 0, 0, 0, 61, 75, 0, 0, 0, 860,
+    863, 861, 860, 863, 861, 0, 0, 0, 0, 175,
+    176, 61, 75, 0, 0, 0, 0, 754, 0, 0,
+    0, 61, 75, 860, 863, 861, 0, 860, 863, 861,
+    0, 151, 0, 855, 52, 0, 855, 0, 0, 0,
+    364, 365, 858, 856, 862, 858, 856, 862, 0, 0,
+    0, 0, 441, 52, 0, 859, 0, 855, 859, 0,
+    0, 855, 0, 0, 0, 0, 858, 856, 862, 52,
+    858, 856, 862, 68, 71, 69, 0, 0, 0, 859,
+    0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
+    851, 0, 68, 71, 69, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 857, 72, 0, 49, 68, 71,
+    69, 0, 0, 0, 0, 43, 64, 51, 70, 0,
+    0, 52, 0, 0, 72, 0, 49, 0, 0, 65,
+    0, 0, 0, 0, 43, 64, 51, 70, 0, 52,
+    72, 0, 49, 860, 863, 861, 447, 0, 65, 0,
+    43, 64, 51, 70, 0, 0, 0, 0, 0, 0,
+    68, 71, 69, 0, 65, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 52, 0, 0, 855, 68, 71,
+    69, 0, 0, 0, 0, 0, 858, 856, 862, 0,
+    0, 463, 72, 0, 49, 0, 0, 52, 0, 859,
+    0, 52, 43, 64, 51, 70, 0, 0, 0, 0,
+    72, 0, 49, 68, 71, 69, 65, 0, 0, 0,
+    43, 64, 51, 70, 0, 0, 0, 0, 0, 0,
+    0, 444, 0, 0, 65, 0, 68, 71, 69, 0,
+    68, 71, 69, 0, 463, 72, 0, 49, 52, 0,
+    0, 0, 219, 220, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 72, 65,
+    49, 52, 72, 0, 49, 219, 220, 0, 43, 64,
+    51, 70, 43, 64, 51, 70, 0, 68, 71, 69,
+    0, 0, 65, 0, 52, 0, 65, 0, 52, 0,
+    0, 772, 0, 0, 0, 447, 0, 0, 0, 0,
+    68, 71, 69, 0, 0, 0, 0, 0, 0, 72,
+    0, 49, 0, 0, 0, 0, 0, 0, 773, 43,
+    64, 51, 70, 68, 71, 69, 0, 68, 71, 69,
+    0, 0, 72, 65, 49, 0, 0, 0, 0, 0,
+    0, 0, 43, 64, 51, 70, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 72, 65, 49, 0, 72,
+    52, 49, 0, 0, 52, 43, 64, 51, 70, 43,
+    64, 51, 70, 0, 0, 0, 0, 0, 0, 65,
+    52, 0, 0, 65, 0, 52, 0, 645, 0, 219,
+    220, 0, 343, 342, 0, 0, 338, 337, 0, 68,
+    71, 69, 0, 68, 71, 69, 0, 0, 0, 0,
+    0, 0, 0, 0, 646, 0, 0, 0, 0, 68,
+    71, 69, 0, 0, 68, 71, 69, 0, 0, 0,
+    0, 72, 0, 49, 0, 72, 0, 49, 0, 0,
+    0, 43, 64, 51, 70, 43, 64, 51, 70, 0,
+    0, 72, 0, 49, 0, 65, 72, 0, 49, 65,
+    0, 43, 64, 51, 70, 0, 43, 64, 51, 70,
+    0, 0, 0, 0, 0, 65, 0, 52, 0, 0,
+    65, 807, 52, 0, 0, 0, 219, 220, 0, 313,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
+    0, 0, 0, 385, 0, 0, 0, 0, 0, 0,
+    0, 808, 316, 0, 317, 759, 68, 71, 69, 0,
+    0, 68, 71, 69, 0, 318, 0, 319, 92, 0,
+    0, 0, 0, 0, 0, 320, 0, 0, 321, 93,
+    0, 0, 0, 0, 322, 0, 0, 0, 72, 0,
+    49, 324, 323, 72, 0, 49, 0, 0, 43, 64,
+    51, 70, 0, 43, 64, 51, 70, 0, 325, 0,
+    0, 0, 65, 0, 0, 313, 0, 65, 0, 52,
+    0, 0, 0, 219, 220, 314, 0, 0, 0, 385,
+    0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
+    317, 0, 0, 378, 0, 0, 0, 0, 0, 0,
+    0, 318, 0, 319, 92, 0, 0, 0, 68, 71,
+    69, 320, 0, 0, 321, 93, 0, 0, 0, 0,
+    322, 0, 0, 0, 0, 0, 0, 324, 323, 0,
+    0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
+    72, 0, 49, 0, 325, 0, 0, 0, 0, 0,
+    43, 64, 51, 70, 0, 0, 0, 0, 0, 0,
+    0, 0, 46, 47, 65, 0, 313, 0, 0, 0,
+    0, 0, 50, 379, 0, 0, 314, 0, 0, 52,
+    315, 0, 0, 53, 54, 0, 55, 0, 0, 316,
+    0, 317, 0, 835, 0, 0, 0, 63, 0, 0,
+    0, 0, 318, 0, 319, 92, 0, 0, 0, 0,
+    0, 0, 320, 0, 0, 321, 93, 73, 68, 71,
+    69, 322, 76, 0, 0, 0, 0, 0, 324, 323,
+    0, 0, 0, 62, 78, 48, 0, 0, 0, 0,
+    58, 0, 0, 0, 0, 325, 0, 74, 44, 0,
+    72, 0, 49, 61, 75, 0, 0, 0, 0, 0,
+    43, 64, 51, 70, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
+    47, 0, 0, 0, 0, 0, 0, 0, 0, 50,
+    0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
+    53, 54, 0, 55, 0, 0, 0, 0, 0, 0,
+    835, 0, 0, 0, 63, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 73, 68, 71, 69, 0, 76,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    62, 78, 48, 0, 0, 0, 0, 58, 0, 0,
+    0, 0, 0, 0, 74, 44, 0, 72, 0, 49,
+    61, 75, 0, 0, 0, 0, 0, 43, 64, 51,
+    70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 65, 0, 46, 47, 0, 0, 0, 0, 0,
+    0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
+    52, 0, 0, 0, 53, 54, 0, 55, 0, 0,
+    0, 0, 0, 0, 59, 0, 0, 0, 63, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 73, 68,
+    71, 69, 0, 76, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 62, 78, 48, 0, 0, 0,
+    0, 58, 0, 0, 0, 0, 0, 0, 74, 44,
+    0, 72, 0, 49, 61, 75, 0, 0, 0, 0,
+    0, 43, 64, 51, 70, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 65, 0, 46, 47, 0,
+    713, 0, 0, 0, 0, 0, 0, 50, 0, 0,
+    0, 0, 0, 0, 52, 0, 0, 0, 53, 54,
+    0, 55, 0, 0, 0, 0, 0, 0, 835, 0,
+    0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 73, 68, 71, 69, 0, 76, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 62, 78,
+    48, 0, 0, 0, 0, 58, 0, 0, 0, 0,
+    0, 0, 74, 44, 0, 72, 0, 49, 61, 75,
+    0, 0, 0, 0, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 46, 47, 0, 713, 0, 0, 0, 0, 0,
+    0, 50, 0, 0, 0, 0, 0, 0, 52, 0,
+    0, 0, 53, 54, 0, 55, 0, 0, 0, 0,
+    0, 0, 59, 0, 0, 0, 63, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 73, 68, 71, 69,
+    0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 62, 78, 48, 0, 0, 0, 0, 58,
+    0, 0, 0, 0, 0, 0, 74, 44, 0, 72,
+    0, 49, 61, 75, 0, 0, 0, 0, 0, 43,
+    64, 51, 70, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 65, 0, 832, 0, 46, 47, 0,
+    0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
+    0, 0, 0, 0, 52, 0, 0, 0, 53, 54,
+    0, 55, 0, 0, 0, 0, 0, 0, 835, 0,
+    0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 73, 836, 838, 837, 0, 76, 0, 0,
+    0, 0, 151, 0, 0, 0, 0, 0, 62, 78,
+    48, 0, 0, 0, 0, 58, 0, 0, 0, 833,
+    0, 0, 74, 44, 0, 72, 0, 49, 61, 75,
+    0, 0, 0, 0, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 832, 0, 46, 47, 0, 0, 0, 0, 0,
+    0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
+    52, 0, 0, 0, 53, 54, 0, 55, 0, 0,
+    0, 0, 0, 0, 835, 0, 0, 0, 63, 0,
+    0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 73, 836,
+    838, 837, 0, 76, 0, 0, 0, 0, 151, 0,
+    0, 0, 0, 0, 62, 78, 48, 0, 0, 0,
+    0, 58, 0, 0, 0, 833, 0, 0, 74, 44,
+    0, 72, 0, 49, 61, 75, 0, 0, 0, 0,
+    0, 43, 64, 51, 70, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 65, 0, 832, 0, 46,
+    47, 0, 0, 0, 0, 0, 0, 0, 0, 834,
+    0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
+    53, 54, 0, 55, 0, 0, 0, 0, 0, 0,
+    835, 0, 0, 0, 63, 0, 0, 0, 0, 0,
+    0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 73, 836, 838, 837, 0, 76,
+    0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
+    62, 78, 48, 0, 0, 0, 0, 58, 0, 0,
+    0, 833, 0, 0, 74, 44, 0, 72, 0, 49,
+    61, 75, 0, 0, 0, 0, 0, 43, 64, 51,
+    70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 65, 0, 45, 46, 47, 0, 0, 0, 0,
+    0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
+    0, 52, 0, 0, 0, 53, 54, 0, 55, 0,
+    0, 0, 56, 0, 57, 59, 60, 0, 0, 63,
+    0, 0, 0, 66, 0, 67, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
+    68, 71, 69, 0, 76, 0, 77, 0, 79, 0,
+    80, 0, 0, 0, 0, 62, 78, 48, 0, 0,
+    0, 0, 58, 0, 0, 0, 0, 0, 0, 74,
+    44, 0, 72, 0, 49, 61, 75, 0, 0, 0,
+    0, 0, 43, 64, 51, 70, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 65, 0, 45, 46,
+    47, 0, 0, 0, 0, 0, 0, 0, 0, 50,
+    0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
+    53, 54, 0, 55, 0, 0, 0, 56, 0, 57,
+    59, 60, 0, 0, 63, 0, 0, 0, 66, 0,
+    67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 73, 68, 71, 69, 0, 76,
+    0, 77, 0, 79, 0, 80, 0, 0, 0, 0,
+    62, 78, 48, 0, 0, 0, 0, 58, 0, 0,
+    0, 0, 0, 81, 74, 44, 0, 72, 0, 49,
+    61, 75, 0, 0, 0, 0, 0, 43, 64, 51,
+    70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 65, 0, 45, 46, 47, 0, 0, 0, 0,
+    0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
+    0, 52, 0, 0, 0, 53, 54, 0, 55, 0,
+    0, 0, 56, 0, 57, 59, 60, 0, 0, 63,
+    0, 0, 0, 66, 0, 67, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
+    68, 71, 69, 0, 76, 0, 77, 0, 79, 0,
+    80, 0, 0, 0, 0, 62, 78, 48, 0, 0,
+    0, 0, 58, 0, 0, 0, 0, 0, 154, 74,
+    44, 0, 72, 0, 49, 61, 75, 0, 0, 0,
+    0, 0, 43, 64, 51, 70, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 65, 0, 45, 46,
+    47, 0, 0, 0, 0, 0, 0, 0, 0, 50,
+    0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
+    53, 54, 0, 55, 0, 0, 0, 56, 0, 57,
+    59, 60, 0, 0, 63, 0, 0, 0, 66, 0,
+    67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 73, 68, 71, 69, 0, 76,
+    0, 77, 0, 79, 0, 80, 0, 0, 0, 0,
+    62, 78, 48, 0, 0, 0, 0, 58, 0, 0,
+    0, 0, 601, 154, 74, 44, 0, 72, 0, 49,
+    61, 75, 0, 0, 0, 0, 0, 43, 64, 51,
+    70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 65, 0, 310, 0, 0, 45, 46, 47, 0,
+    0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
+    0, 0, 0, 0, 52, 0, 0, 0, 53, 54,
+    0, 55, 0, 0, 0, 56, 0, 57, 59, 60,
+    0, 0, 63, 0, 0, 0, 66, 0, 67, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 73, 68, 71, 69, 0, 76, 0, 77,
+    0, 79, 0, 80, 0, 0, 0, 0, 62, 78,
+    48, 0, 0, 0, 0, 58, 0, 0, 0, 0,
+    0, 154, 74, 44, 0, 72, 0, 49, 61, 75,
+    0, 0, 0, 0, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 45, 46, 47, 0, 0, 0, 0, 0, 0,
+    0, 0, 50, 0, 0, 0, 0, 0, 0, 52,
+    0, 0, 0, 53, 54, 0, 55, 0, 0, 0,
+    56, 0, 57, 59, 60, 0, 0, 63, 0, 0,
+    0, 66, 0, 67, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 73, 68, 71,
+    69, 0, 76, 0, 77, 0, 79, 0, 80, 0,
+    0, 0, 0, 62, 78, 48, 0, 0, 0, 0,
+    58, 0, 0, 0, 0, 218, 154, 74, 44, 0,
+    72, 0, 49, 61, 75, 0, 0, 0, 0, 0,
+    43, 64, 51, 70, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 65, 0, 45, 46, 47, 0,
+    0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
+    0, 0, 0, 0, 52, 0, 0, 0, 53, 54,
+    0, 55, 0, 0, 0, 56, 0, 57, 59, 60,
+    0, 0, 63, 0, 0, 0, 66, 0, 67, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 73, 68, 71, 69, 0, 76, 0, 77,
+    0, 79, 0, 80, 0, 0, 0, 0, 62, 78,
+    48, 0, 0, 0, 0, 58, 0, 0, 0, 0,
+    604, 154, 74, 44, 0, 72, 0, 49, 61, 75,
+    0, 0, 0, 0, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 302, 0, 0, 45, 46, 47, 0, 0, 0,
+    0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
+    0, 0, 52, 0, 0, 0, 53, 54, 0, 55,
+    0, 0, 0, 56, 0, 57, 59, 60, 0, 0,
+    63, 0, 0, 0, 66, 0, 67, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    73, 68, 71, 69, 0, 76, 0, 77, 0, 79,
+    0, 80, 0, 0, 0, 0, 62, 78, 48, 0,
+    0, 0, 0, 58, 0, 0, 0, 0, 0, 154,
+    74, 44, 0, 72, 0, 49, 61, 75, 0, 0,
+    0, 0, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 65, 0, 45,
+    46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
+    50, 0, 0, 0, 0, 0, 0, 52, 0, 0,
+    0, 53, 54, 0, 55, 0, 0, 0, 56, 0,
+    57, 59, 60, 0, 0, 63, 0, 0, 0, 66,
+    0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 566, 0, 0, 0, 73, 68, 71, 69, 0,
+    76, 0, 77, 0, 79, 0, 80, 0, 0, 0,
+    0, 62, 78, 48, 0, 0, 0, 0, 58, 0,
+    0, 0, 0, 0, 154, 74, 44, 0, 72, 0,
+    49, 61, 75, 0, 0, 0, 0, 0, 43, 64,
+    51, 70, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 65, 0, 45, 46, 47, 0, 0, 0,
+    0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
+    0, 0, 52, 0, 0, 0, 53, 54, 0, 55,
+    0, 0, 0, 56, 0, 57, 59, 60, 0, 0,
+    63, 0, 0, 0, 66, 0, 67, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    73, 68, 71, 69, 0, 76, 0, 77, 0, 79,
+    0, 80, 0, 0, 0, 0, 62, 78, 48, 0,
+    0, 0, 0, 58, 0, 0, 0, 0, 0, 154,
+    74, 44, 0, 72, 0, 49, 61, 75, 0, 0,
+    0, 0, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 0, 165, 0, 65, 0, 45,
+    46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
+    50, 0, 0, 0, 0, 0, 0, 52, 0, 0,
+    0, 53, 54, 0, 55, 0, 0, 0, 56, 0,
+    57, 59, 60, 0, 0, 63, 0, 0, 0, 66,
+    0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 73, 68, 71, 69, 0,
+    76, 0, 77, 0, 79, 0, 80, 0, 0, 0,
+    0, 62, 78, 48, 0, 0, 0, 0, 58, 0,
+    0, 0, 0, 0, 81, 74, 44, 0, 72, 0,
+    49, 61, 75, 0, 0, 0, 0, 0, 43, 64,
+    51, 70, 0, 0, 0, 0, 0, 0, 0, 0,
+    103, 0, 65, 0, 45, 46, 47, 0, 0, 0,
+    0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
+    0, 0, 52, 0, 0, 0, 53, 54, 0, 55,
+    0, 0, 0, 56, 0, 57, 59, 60, 0, 0,
+    63, 0, 0, 0, 66, 0, 67, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
+    73, 68, 71, 69, 0, 76, 0, 77, 0, 79,
+    0, 80, 0, 0, 0, 0, 62, 78, 48, 0,
+    0, 0, 0, 58, 0, 0, 0, 0, 0, 81,
+    74, 44, 0, 72, 0, 49, 61, 75, 0, 0,
+    0, 0, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 65, 0, 45,
+    46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
+    50, 0, 0, 0, 0, 0, 0, 52, 0, 0,
+    0, 53, 54, 0, 55, 0, 0, 0, 56, 0,
+    57, 59, 60, 0, 0, 63, 0, 0, 0, 66,
+    0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 73, 68, 71, 69, 0,
+    76, 0, 77, 0, 79, 0, 80, 0, 0, 0,
+    0, 62, 78, 48, 0, 0, 0, 0, 58, 0,
+    0, 0, 0, 0, 154, 74, 44, 0, 72, 0,
+    49, 61, 75, 0, 0, 0, 0, 0, 43, 64,
+    51, 70, 0, 0, 0, 0, 0, 0, 0, 762,
+    0, 0, 65, 0, 45, 46, 47, 0, 0, 0,
+    0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
+    0, 0, 52, 0, 0, 0, 53, 54, 0, 55,
+    0, 0, 0, 56, 0, 57, 59, 60, 0, 0,
+    63, 0, 0, 0, 66, 0, 67, 0, 0, 0,
+    0, 0, 0, 702, 0, 0, 0, 0, 0, 0,
+    73, 68, 71, 69, 0, 76, 0, 77, 0, 79,
+    0, 80, 0, 0, 0, 0, 62, 78, 48, 0,
+    0, 0, 0, 58, 0, 0, 0, 0, 218, 154,
+    74, 44, 0, 72, 0, 49, 61, 75, 0, 0,
+    0, 0, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 65, 0, 45,
+    46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
+    50, 0, 0, 0, 0, 0, 0, 52, 0, 0,
+    0, 53, 54, 0, 55, 0, 0, 0, 56, 0,
+    57, 59, 60, 0, 0, 63, 0, 0, 0, 66,
+    0, 67, 0, 0, 695, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 73, 68, 71, 69, 0,
+    76, 0, 77, 0, 79, 0, 80, 0, 0, 0,
+    0, 62, 78, 48, 0, 0, 0, 0, 58, 0,
+    0, 0, 0, 694, 154, 74, 44, 0, 72, 0,
+    49, 61, 75, 0, 0, 0, 0, 0, 43, 64,
+    51, 70, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 65, 0, 45, 46, 47, 0, 0, 0,
+    0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
+    0, 0, 52, 0, 0, 0, 53, 54, 0, 55,
+    0, 0, 0, 56, 0, 57, 59, 60, 0, 0,
+    63, 0, 0, 0, 66, 0, 67, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    73, 68, 71, 69, 0, 76, 0, 77, 0, 79,
+    151, 80, 0, 0, 0, 0, 62, 78, 48, 364,
+    365, 0, 0, 58, 0, 0, 0, 0, 0, 81,
+    74, 44, 0, 72, 0, 49, 61, 75, 0, 0,
+    0, 0, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 65, 0, 45,
+    46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
+    50, 0, 0, 0, 0, 0, 0, 52, 145, 0,
+    0, 53, 969, 0, 55, 0, 0, 0, 56, 0,
+    57, 59, 60, 0, 0, 63, 0, 0, 0, 66,
+    0, 67, 0, 0, 0, 0, 0, 0, 0, 147,
+    0, 0, 0, 0, 0, 73, 68, 71, 69, 148,
+    76, 0, 77, 150, 79, 0, 80, 0, 153, 0,
+    0, 62, 78, 48, 0, 0, 0, 0, 58, 0,
+    0, 0, 0, 0, 154, 74, 44, 0, 72, 0,
+    49, 61, 75, 0, 0, 0, 0, 0, 43, 64,
+    51, 70, 0, 0, 0, 0, 0, 0, 0, 877,
+    876, 0, 65, 0, 45, 46, 47, 0, 0, 0,
+    0, 0, 0, 0, 0, 50, 0, 0, 0, 0,
+    0, 0, 52, 145, 0, 0, 53, 54, 0, 55,
+    0, 0, 0, 56, 0, 57, 59, 60, 0, 0,
+    63, 0, 0, 0, 66, 0, 67, 0, 0, 0,
+    0, 0, 0, 0, 147, 0, 0, 0, 0, 0,
+    73, 68, 71, 69, 148, 76, 0, 77, 150, 79,
+    0, 80, 0, 153, 0, 0, 62, 78, 48, 0,
+    0, 0, 0, 58, 0, 0, 0, 0, 0, 154,
+    74, 44, 0, 72, 0, 49, 61, 75, 0, 0,
+    0, 0, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 877, 876, 0, 65, 0, 245,
+    246, 247, 0, 0, 250, 252, 253, 0, 0, 254,
+    0, 255, 0, 0, 0, 260, 261, 262, 0, 0,
+    0, 0, 0, 0, 52, 263, 265, 266, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
+    0, 0, 0, 68, 71, 69, 276, 277, 278, 0,
+    280, 281, 282, 283, 284, 285, 0, 0, 270, 279,
+    259, 249, 268, 251, 272, 0, 0, 0, 0, 256,
+    0, 0, 275, 248, 258, 72, 257, 49, 0, 0,
+    0, 0, 0, 264, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 245, 246, 247, 0, 0, 250, 252, 253, 0,
+    0, 254, 0, 255, 0, 0, 0, 260, 261, 262,
+    0, 0, 0, 0, 0, 0, 52, 263, 265, 266,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 792, 0, 0, 0, 273, 0, 0, 0,
+    0, 0, 0, 0, 0, 68, 71, 69, 276, 277,
+    278, 0, 280, 281, 282, 283, 284, 285, 0, 0,
+    270, 279, 259, 249, 268, 251, 272, 0, 0, 0,
+    0, 256, 0, 0, 275, 248, 258, 72, 257, 49,
+    0, 0, 0, 0, 0, 264, 0, 43, 64, 51,
+    70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 65, 0, 245, 246, 247, 0, 0, 250, 252,
+    253, 0, 0, 254, 0, 255, 0, 0, 0, 260,
+    261, 262, 0, 0, 0, 0, 0, 0, 52, 263,
+    265, 266, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 796, 0, 0, 0, 273, 0,
+    0, 0, 0, 0, 0, 0, 0, 68, 71, 69,
+    276, 277, 278, 0, 280, 281, 282, 283, 284, 285,
+    0, 0, 270, 279, 259, 249, 268, 251, 272, 0,
+    0, 0, 0, 256, 0, 0, 275, 248, 258, 72,
+    257, 49, 0, 0, 0, 0, 0, 264, 0, 43,
+    64, 51, 70, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 65, 0, 245, 246, 247, 0, 0,
+    250, 252, 253, 0, 0, 254, 0, 255, 0, 0,
+    0, 260, 261, 262, 0, 0, 0, 0, 0, 0,
+    52, 263, 265, 266, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 823, 0, 0, 0,
+    273, 0, 0, 0, 0, 0, 0, 0, 0, 68,
+    71, 69, 276, 277, 278, 0, 280, 281, 282, 283,
+    284, 285, 0, 0, 270, 279, 259, 249, 268, 251,
+    272, 0, 0, 0, 0, 256, 0, 0, 275, 248,
+    258, 72, 257, 49, 0, 0, 0, 0, 0, 264,
+    0, 43, 64, 51, 70, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 65, 0, 245, 246, 247,
+    0, 0, 250, 252, 253, 0, 0, 254, 0, 255,
+    0, 0, 0, 260, 261, 262, 0, 0, 0, 0,
+    0, 0, 52, 263, 265, 266, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 817, 0,
+    0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
+    0, 68, 71, 69, 276, 277, 278, 0, 280, 281,
+    282, 283, 284, 285, 0, 0, 270, 279, 259, 249,
+    268, 251, 272, 0, 0, 0, 0, 256, 0, 0,
+    275, 248, 258, 72, 257, 49, 0, 0, 0, 0,
+    0, 264, 0, 43, 64, 51, 70, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 65, 0, 245,
+    246, 247, 0, 0, 250, 252, 253, 0, 0, 254,
+    0, 255, 0, 0, 0, 260, 261, 262, 0, 0,
+    0, 0, 0, 0, 52, 263, 265, 266, 0, 267,
+    0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
+    0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
+    0, 0, 274, 68, 71, 69, 276, 277, 278, 0,
+    280, 281, 282, 283, 284, 285, 0, 0, 270, 279,
+    259, 249, 268, 251, 272, 0, 0, 0, 0, 256,
+    0, 0, 275, 248, 258, 72, 257, 49, 0, 0,
+    0, 0, 0, 264, 0, 43, 64, 51, 70, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 245, 246, 247, 0, 0, 250, 252, 253, 0,
+    0, 254, 0, 255, 0, 0, 0, 260, 261, 262,
+    0, 0, 0, 0, 0, 0, 52, 263, 265, 266,
+    0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
+    269, 0, 0, 0, 271, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
+    476, 0, 0, 0, 274, 68, 71, 69, 276, 277,
+    278, 0, 280, 281, 282, 283, 284, 285, 0, 0,
+    270, 279, 259, 249, 268, 251, 272, 0, 0, 0,
+    0, 256, 0, 0, 275, 248, 258, 72, 257, 49,
+    0, 0, 0, 0, 0, 264, 0, 43, 64, 473,
+    475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 65, 0, 245, 246, 247, 0, 0, 250, 252,
+    253, 0, 0, 254, 0, 255, 0, 0, 0, 260,
+    261, 262, 0, 0, 0, 0, 0, 0, 52, 263,
+    265, 266, 0, 267, 0, 0, 0, 0, 0, 0,
+    0, 0, 269, 0, 0, 0, 271, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
+    474, 0, 476, 0, 0, 0, 274, 68, 71, 69,
+    276, 277, 278, 0, 280, 281, 282, 283, 284, 285,
+    0, 0, 270, 279, 259, 249, 268, 251, 272, 0,
+    0, 0, 0, 256, 0, 0, 275, 248, 258, 477,
+    257, 49, 0, 0, 0, 0, 0, 264, 0, 43,
+    64, 473, 475, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 65, 0, 138, 0, 0, 0, 0,
+    139, 0, 45, 46, 47, 141, 0, 0, 0, 0,
+    0, 0, 142, 50, 0, 0, 0, 0, 0, 0,
+    52, 145, 0, 0, 53, 54, 0, 55, 0, 0,
+    0, 56, 0, 57, 59, 60, 0, 0, 63, 0,
+    0, 0, 66, 0, 67, 0, 0, 0, 0, 0,
+    146, 0, 147, 0, 0, 0, 0, 0, 73, 68,
+    71, 69, 148, 76, 149, 77, 150, 79, 151, 80,
+    152, 153, 0, 0, 62, 78, 48, 0, 0, 140,
+    0, 58, 0, 0, 0, 0, 0, 154, 74, 44,
+    0, 72, 0, 49, 61, 75, 0, 0, 0, 0,
+    0, 43, 64, 51, 70, 0, 0, 0, 0, 0,
+    0, 0, 0, 143, 0, 65, 0, 245, 246, 247,
+    0, 0, 250, 252, 253, 0, 0, 254, 0, 255,
+    0, 0, 0, 260, 261, 262, 0, 0, 0, 0,
+    0, 0, 52, 263, 265, 266, 0, 267, 0, 0,
+    0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
+    271, 0, 0, 0, 0, 0, 0, 0, 682, 0,
+    0, 0, 273, 0, 0, 0, 476, 0, 0, 0,
+    274, 68, 71, 69, 276, 277, 278, 0, 280, 281,
+    282, 283, 284, 285, 0, 0, 270, 279, 259, 249,
+    268, 251, 272, 0, 0, 0, 0, 256, 0, 0,
+    275, 248, 258, 72, 257, 49, 0, 0, 0, 0,
+    0, 264, 0, 43, 64, 473, 475, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 65, 0, 245,
+    246, 247, 0, 0, 250, 252, 253, 0, 0, 254,
+    0, 255, 0, 0, 0, 260, 261, 262, 0, 0,
+    0, 0, 0, 0, 52, 263, 265, 266, 0, 267,
+    0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
+    0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
+    677, 0, 0, 0, 273, 0, 0, 0, 476, 0,
+    0, 0, 274, 68, 71, 69, 276, 277, 278, 0,
+    280, 281, 282, 283, 284, 285, 0, 0, 270, 279,
+    259, 249, 268, 251, 272, 0, 0, 0, 0, 256,
+    0, 0, 275, 248, 258, 72, 257, 49, 0, 0,
+    0, 0, 0, 264, 0, 43, 64, 473, 475, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
+    0, 138, 0, 0, 0, 0, 139, 0, 45, 46,
+    47, 141, 0, 0, 0, 0, 0, 0, 142, 50,
+    0, 0, 0, 0, 0, 0, 52, 145, 0, 0,
+    53, 54, 0, 55, 0, 0, 0, 56, 0, 57,
+    59, 60, 0, 0, 63, 0, 0, 0, 66, 0,
+    67, 0, 0, 0, 0, 0, 146, 0, 147, 0,
+    0, 0, 0, 0, 73, 68, 71, 69, 148, 76,
+    149, 77, 150, 79, 151, 80, 152, 153, 0, 0,
+    62, 78, 48, 0, 0, 140, 0, 58, 0, 0,
+    0, 0, 0, 154, 74, 44, 0, 72, 0, 49,
+    61, 75, 0, 0, 0, 0, 0, 43, 64, 51,
+    70, 0, 0, 0, 0, 0, 0, 0, 144, 143,
+    0, 65, 0, 138, 0, 0, 0, 0, 139, 0,
+    45, 46, 47, 141, 0, 0, 0, 0, 0, 0,
+    142, 50, 0, 0, 0, 0, 0, 0, 52, 145,
+    0, 0, 53, 54, 0, 55, 0, 0, 0, 56,
+    0, 57, 59, 60, 0, 0, 63, 0, 0, 0,
+    66, 0, 67, 0, 0, 0, 0, 0, 146, 0,
+    147, 0, 0, 0, 0, 0, 73, 68, 71, 69,
+    148, 76, 149, 77, 150, 79, 151, 80, 152, 153,
+    0, 0, 62, 78, 48, 0, 0, 140, 0, 58,
+    0, 0, 0, 0, 0, 154, 74, 44, 0, 72,
+    0, 49, 61, 75, 0, 0, 0, 0, 0, 43,
+    64, 51, 70, 0, 0, 0, 0, 0, 0, 0,
+    205, 143, 0, 65, 0, 138, 0, 0, 0, 0,
+    139, 0, 45, 46, 47, 141, 0, 0, 0, 0,
+    0, 0, 142, 50, 0, 0, 0, 0, 0, 0,
+    52, 145, 0, 0, 53, 54, 0, 55, 0, 0,
+    0, 56, 0, 57, 59, 60, 0, 0, 884, 0,
+    0, 0, 66, 0, 67, 0, 0, 0, 0, 0,
+    146, 0, 147, 0, 0, 0, 0, 0, 885, 68,
+    71, 69, 148, 76, 149, 77, 150, 79, 151, 80,
+    152, 153, 0, 0, 62, 78, 48, 0, 0, 140,
+    0, 58, 0, 0, 0, 0, 0, 154, 74, 44,
+    0, 72, 0, 49, 61, 75, 0, 0, 0, 0,
+    0, 43, 64, 51, 70, 0, 0, 0, 0, 0,
+    0, 0, 144, 143, 0, 65, 0,
+
+    896, 783, 505, 957, 1005, 784, 943, 950, 788, 987,
+    786, 941, 944, 847, 975, 933, 758, 799, 897, 761,
+    915, 973, 854, 913, 999, 127, 809, 782, 850, 776,
+    778, 777, 960, 894, 880, 959, 964, 870, 540, 537,
+    534, 510, 530, 549, 538, 200, 509, 503, 508, 522,
+    127, 513, 502, 501, 494, 493, 572, 544, 585, 565,
+    583, 127, 163, 492, 166, 164, 567, 167, 562, 573,
+    168, 556, 558, 230, 352, 387, 232, 380, 231, 384,
+    127, 224, 301, 335, 488, 333, 286, 295, 327, 326,
+    487, 486, 293, 294, 470, 207, 462, 450, 555, 405,
+    431, 336, 405, 629, 663, 657, 635, 656, 221, 417,
+    225, 417, 404, 639, 636, 401, 655, 664, 678, 372,
+    638, 670, 641, 127, 650, 668, 312, 107, 669, 651,
+    665, 652, 594, 596, 600, 607, 603, 605, 726, 541,
+    341, 613, 583, 585, 660, 691, 621, 579, 684, 697,
+    210, 209, 883, 427, 372, 619, 372, 210, 644, 372,
+    372, 389, 470, 382, 376, 210, 633, 372, 372, 692,
+    829, 693, 579, 306, 946, 348, 600, 947, 685, 687,
+    515, 517, 470, 348, 600, 348, 348, 210, 644, 600,
+    470, 579, 348, 791, 470, 470, 470, 560, 967, 715,
+    349, 968, 348, 348, 564, 470, 204, 631, 579, 436,
+    210, 461, 623, 470, 937, 811, 812, 938, 425, 348,
+    423, 628, 348, 409, 407, 620, 348, 798, 202, 210,
+    445, 374, 371, 210, 209, 470, 595, 210, 209, 0,
+    470, 470, 470, 579, 470, 28, 210, 213, 992, 991,
+    701, 700, 41, 672, 210, 233, 240, 235, 210, 213,
+    742, 470, 489, 431, 210, 291, 210, 568, 481, 495,
+    721, 504, 210, 800, 305, 210, 800, 210, 213, 730,
+    676, 673, 0, 243, 828, 240, 800, 210, 551, 210,
+    213, 89, 791, 210, 213, 210, 213, 210, 461, 210,
+    213, 0, 88, 28, 580, 308, 706, 210, 213, 200,
+    41, 210, 213, 210, 397, 0, 813, 411, 210, 658,
+    725, 580, 210, 213, 210, 800, 766, 787, 210, 445,
+    210, 213, 210, 412, 0, 511, 210, 391, 11, 348,
+    637, 435, 240, 800, 986, 210, 568, 89, 0, 89,
+    89, 615, 28, 210, 213, 0, 742, 0, 88, 41,
+    88, 88, 0, 480, 234, 0, 308, 0, 102, 89,
+    89, 210, 455, 813, 292, 28, 569, 732, 89, 0,
+    88, 88, 41, 240, 235, 0, 640, 0, 217, 88,
+    0, 90, 28, 90, 90, 91, 11, 552, 99, 41,
+    586, 28, 28, 436, 755, 0, 712, 661, 41, 41,
+    243, 0, 497, 0, 90, 749, 763, 89, 768, 666,
+    369, 185, 90, 398, 0, 734, 0, 506, 88, 448,
+    0, 795, 89, 0, 210, 213, 825, 780, 386, 819,
+    785, 653, 413, 88, 28, 11, 393, 228, 390, 210,
+    419, 41, 648, 575, 0, 569, 0, 659, 765, 403,
+    774, 90, 28, 89, 0, 696, 0, 779, 11, 41,
+    307, 89, 28, 89, 88, 89, 90, 458, 672, 41,
+    329, 457, 88, 28, 88, 11, 88, 0, 802, 28,
+    41, 750, 89, 0, 11, 11, 41, 332, 288, 89,
+    89, 681, 909, 88, 0, 676, 673, 90, 822, 89,
+    88, 88, 210, 455, 0, 90, 0, 90, 171, 90,
+    88, 191, 710, 0, 0, 177, 192, 89, 89, 0,
+    0, 0, 0, 0, 89, 435, 90, 11, 88, 88,
+    0, 89, 189, 90, 90, 88, 89, 89, 0, 190,
+    0, 227, 88, 90, 0, 11, 421, 88, 88, 420,
+    89, 194, 89, 0, 712, 11, 0, 0, 196, 0,
+    89, 88, 90, 88, 0, 98, 11, 0, 90, 643,
+    718, 88, 11, 89, 712, 90, 643, 708, 711, 0,
+    90, 643, 709, 0, 88, 0, 210, 213, 0, 831,
+    831, 89, 921, 925, 90, 0, 90, 643, 719, 308,
+    309, 41, 88, 358, 90, 643, 720, 0, 460, 89,
+    588, 0, 457, 0, 89, 89, 0, 90, 0, 89,
+    88, 89, 89, 0, 41, 88, 88, 0, 0, 582,
+    88, 831, 88, 88, 0, 90, 643, 727, 974, 939,
+    0, 0, 921, 831, 971, 0, 993, 0, 0, 0,
+    89, 712, 712, 90, 0, 0, 89, 0, 0, 0,
+    41, 88, 584, 90, 831, 90, 90, 88, 89, 89,
+    41, 841, 41, 41, 0, 0, 0, 590, 0, 88,
+    88, 685, 687, 609, 0, 361, 612, 842, 0, 89,
+    89, 0, 41, 712, 90, 643, 729, 0, 0, 0,
+    88, 88, 0, 307, 0, 712, 932, 0, 0, 929,
+    0, 0, 0, 90, 643, 728, 0, 0, 831, 0,
+    0, 831, 0, 0, 0, 841, 712, 0, 841, 0,
+    0, 0, 0, 948, 90, 643, 642, 0, 362, 366,
+    970, 842, 0, 89, 842, 873, 89, 872, 874, 879,
+    875, 878, 948, 0, 88, 0, 0, 88, 0, 949,
+    0, 0, 0, 0, 873, 0, 872, 874, 879, 875,
+    878, 0, 939, 0, 0, 0, 0, 0, 11, 940,
+    712, 0, 0, 712, 873, 0, 872, 874, 879, 875,
+    878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 873, 0, 872, 874, 879, 875, 878, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0
+};
+
+const short QQmlJSGrammar::action_check [] = {
+    60, 7, 17, 37, 33, 47, 102, 47, 36, 110,
+    29, 33, 99, 7, 55, 8, 7, 7, 7, 55,
+    33, 60, 48, 2, 110, 8, 33, 102, 33, 29,
+    60, 17, 34, 60, 33, 60, 33, 29, 55, 55,
+    36, 29, 60, 8, 68, 29, 60, 55, 60, 60,
+    102, 33, 29, 110, 55, 0, 60, 60, 67, 33,
+    55, 36, 60, 33, 33, 33, 33, 33, 55, 33,
+    2, 8, 33, 8, 37, 60, 36, 55, 33, 8,
+    60, 2, 36, 56, 60, 56, 36, 68, 7, 48,
+    36, 17, 64, 55, 17, 7, 16, 55, 8, 33,
+    33, 17, 55, 60, 55, 61, 55, 55, 60, 17,
+    8, 55, 17, 60, 17, 17, 17, 60, 17, 61,
+    61, 61, 60, 8, 8, 61, 33, 36, 55, 60,
+    17, 61, 8, 8, 17, 17, 33, 55, 33, 17,
+    36, 55, 8, 1, 48, 33, 36, 36, 1, 55,
+    36, 79, 33, 1, 48, 2, 36, 36, 0, 8,
+    99, 33, 5, 8, 81, 5, 17, 60, 93, 93,
+    81, 93, 5, 7, 36, 1, 17, 33, 93, 33,
+    8, 81, 55, 22, 20, 8, 60, 33, 8, 33,
+    81, 61, 62, 8, 7, 50, 7, 15, 36, 54,
+    22, 36, 8, 8, 61, 62, 24, 31, 15, 8,
+    42, 61, 62, 8, 8, 8, 8, 24, 8, 10,
+    0, 53, 8, 40, 61, 62, 40, 15, 63, 33,
+    61, 62, 61, 62, 51, 55, 8, 51, 40, 8,
+    61, 62, 61, 62, 8, 60, 34, 8, 8, 51,
+    56, 8, 6, 61, 62, 60, 55, 8, 40, 63,
+    7, 55, 55, 50, 55, 60, 20, 54, 60, 51,
+    60, 56, 61, 62, 60, 8, 98, 0, 61, 62,
+    93, 108, 109, 36, 56, 61, 62, 111, 25, 36,
+    27, 60, 56, 61, 62, 56, 108, 109, 55, 110,
+    60, 38, 61, 62, 29, 56, 15, 7, 61, 62,
+    95, 7, 29, 25, 12, 27, 8, 0, 29, 7,
+    7, 101, 12, 56, -1, 34, 38, 36, 108, 17,
+    8, 8, 29, 92, 25, 8, 27, 33, 8, 17,
+    25, 5, 27, 47, 17, 29, 10, 38, 36, 12,
+    29, 55, 77, 38, 7, -1, 8, -1, -1, 57,
+    77, 61, 62, 67, 89, 63, 77, 57, 22, 61,
+    62, 29, 89, 63, 61, 62, -1, 25, 89, 27,
+    77, 61, 62, 61, 61, 62, 18, 19, 61, -1,
+    38, 55, 89, 77, 57, 18, 19, 15, 77, -1,
+    63, 15, -1, 7, 8, 89, -1, -1, 61, 62,
+    89, 18, 19, 45, 46, -1, 34, -1, 101, 77,
+    34, 15, 45, 46, 15, 108, -1, -1, 124, -1,
+    110, 89, 86, 87, 47, 105, 106, 15, 45, 46,
+    34, -1, 36, 34, 98, 36, 15, -1, 61, 62,
+    23, 24, -1, 105, 106, -1, 34, -1, 36, 32,
+    23, 24, 35, 15, 37, 34, -1, 36, -1, 32,
+    -1, -1, 35, 15, 37, 115, 116, 117, 118, 119,
+    120, 33, 34, -1, 36, 103, 104, 23, 24, 103,
+    104, 33, 34, -1, 36, 31, 32, 110, -1, 35,
+    29, 37, -1, 29, 10, -1, 23, 24, -1, 103,
+    104, -1, 103, 104, 31, 32, 22, -1, 35, -1,
+    37, -1, 18, 19, 29, 103, 104, 33, 29, -1,
+    -1, -1, -1, -1, 103, 104, -1, -1, -1, 68,
+    69, 70, 68, 69, 70, -1, -1, -1, -1, 45,
+    46, 103, 104, -1, -1, -1, -1, 63, -1, -1,
+    -1, 103, 104, 68, 69, 70, -1, 68, 69, 70,
+    -1, 77, -1, 102, 29, -1, 102, -1, -1, -1,
+    86, 87, 111, 112, 113, 111, 112, 113, -1, -1,
+    -1, -1, 98, 29, -1, 124, -1, 102, 124, -1,
+    -1, 102, -1, -1, -1, -1, 111, 112, 113, 29,
+    111, 112, 113, 68, 69, 70, -1, -1, -1, 124,
+    -1, -1, -1, 124, -1, -1, -1, -1, -1, -1,
+    15, -1, 68, 69, 70, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 29, 100, -1, 102, 68, 69,
+    70, -1, -1, -1, -1, 110, 111, 112, 113, -1,
+    -1, 29, -1, -1, 100, -1, 102, -1, -1, 124,
+    -1, -1, -1, -1, 110, 111, 112, 113, -1, 29,
+    100, -1, 102, 68, 69, 70, 36, -1, 124, -1,
+    110, 111, 112, 113, -1, -1, -1, -1, -1, -1,
+    68, 69, 70, -1, 124, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 29, -1, -1, 102, 68, 69,
+    70, -1, -1, -1, -1, -1, 111, 112, 113, -1,
+    -1, 99, 100, -1, 102, -1, -1, 29, -1, 124,
+    -1, 29, 110, 111, 112, 113, -1, -1, -1, -1,
+    100, -1, 102, 68, 69, 70, 124, -1, -1, -1,
+    110, 111, 112, 113, -1, -1, -1, -1, -1, -1,
+    -1, 63, -1, -1, 124, -1, 68, 69, 70, -1,
+    68, 69, 70, -1, 99, 100, -1, 102, 29, -1,
+    -1, -1, 33, 34, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 100, 124,
+    102, 29, 100, -1, 102, 33, 34, -1, 110, 111,
+    112, 113, 110, 111, 112, 113, -1, 68, 69, 70,
+    -1, -1, 124, -1, 29, -1, 124, -1, 29, -1,
+    -1, 36, -1, -1, -1, 36, -1, -1, -1, -1,
+    68, 69, 70, -1, -1, -1, -1, -1, -1, 100,
+    -1, 102, -1, -1, -1, -1, -1, -1, 63, 110,
+    111, 112, 113, 68, 69, 70, -1, 68, 69, 70,
+    -1, -1, 100, 124, 102, -1, -1, -1, -1, -1,
+    -1, -1, 110, 111, 112, 113, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 100, 124, 102, -1, 100,
+    29, 102, -1, -1, 29, 110, 111, 112, 113, 110,
+    111, 112, 113, -1, -1, -1, -1, -1, -1, 124,
+    29, -1, -1, 124, -1, 29, -1, 36, -1, 33,
+    34, -1, 61, 62, -1, -1, 61, 62, -1, 68,
+    69, 70, -1, 68, 69, 70, -1, -1, -1, -1,
+    -1, -1, -1, -1, 63, -1, -1, -1, -1, 68,
+    69, 70, -1, -1, 68, 69, 70, -1, -1, -1,
+    -1, 100, -1, 102, -1, 100, -1, 102, -1, -1,
+    -1, 110, 111, 112, 113, 110, 111, 112, 113, -1,
+    -1, 100, -1, 102, -1, 124, 100, -1, 102, 124,
+    -1, 110, 111, 112, 113, -1, 110, 111, 112, 113,
+    -1, -1, -1, -1, -1, 124, -1, 29, -1, -1,
+    124, 33, 29, -1, -1, -1, 33, 34, -1, 3,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,
+    -1, -1, -1, 17, -1, -1, -1, -1, -1, -1,
+    -1, 63, 26, -1, 28, 67, 68, 69, 70, -1,
+    -1, 68, 69, 70, -1, 39, -1, 41, 42, -1,
+    -1, -1, -1, -1, -1, 49, -1, -1, 52, 53,
+    -1, -1, -1, -1, 58, -1, -1, -1, 100, -1,
+    102, 65, 66, 100, -1, 102, -1, -1, 110, 111,
+    112, 113, -1, 110, 111, 112, 113, -1, 82, -1,
+    -1, -1, 124, -1, -1, 3, -1, 124, -1, 29,
+    -1, -1, -1, 33, 34, 13, -1, -1, -1, 17,
+    -1, -1, -1, -1, -1, -1, -1, -1, 26, -1,
+    28, -1, -1, 31, -1, -1, -1, -1, -1, -1,
+    -1, 39, -1, 41, 42, -1, -1, -1, 68, 69,
+    70, 49, -1, -1, 52, 53, -1, -1, -1, -1,
+    58, -1, -1, -1, -1, -1, -1, 65, 66, -1,
+    -1, -1, -1, -1, -1, 95, -1, -1, -1, -1,
+    100, -1, 102, -1, 82, -1, -1, -1, -1, -1,
+    110, 111, 112, 113, -1, -1, -1, -1, -1, -1,
+    -1, -1, 12, 13, 124, -1, 3, -1, -1, -1,
+    -1, -1, 22, 111, -1, -1, 13, -1, -1, 29,
+    17, -1, -1, 33, 34, -1, 36, -1, -1, 26,
+    -1, 28, -1, 43, -1, -1, -1, 47, -1, -1,
+    -1, -1, 39, -1, 41, 42, -1, -1, -1, -1,
+    -1, -1, 49, -1, -1, 52, 53, 67, 68, 69,
+    70, 58, 72, -1, -1, -1, -1, -1, 65, 66,
+    -1, -1, -1, 83, 84, 85, -1, -1, -1, -1,
+    90, -1, -1, -1, -1, 82, -1, 97, 98, -1,
+    100, -1, 102, 103, 104, -1, -1, -1, -1, -1,
+    110, 111, 112, 113, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 124, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 12,
+    13, -1, -1, -1, -1, -1, -1, -1, -1, 22,
+    -1, -1, -1, -1, -1, -1, 29, -1, -1, -1,
+    33, 34, -1, 36, -1, -1, -1, -1, -1, -1,
+    43, -1, -1, -1, 47, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 67, 68, 69, 70, -1, 72,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    83, 84, 85, -1, -1, -1, -1, 90, -1, -1,
+    -1, -1, -1, -1, 97, 98, -1, 100, -1, 102,
+    103, 104, -1, -1, -1, -1, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 124, -1, 12, 13, -1, -1, -1, -1, -1,
+    -1, -1, -1, 22, -1, -1, -1, -1, -1, -1,
+    29, -1, -1, -1, 33, 34, -1, 36, -1, -1,
+    -1, -1, -1, -1, 43, -1, -1, -1, 47, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 67, 68,
+    69, 70, -1, 72, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 83, 84, 85, -1, -1, -1,
+    -1, 90, -1, -1, -1, -1, -1, -1, 97, 98,
+    -1, 100, -1, 102, 103, 104, -1, -1, -1, -1,
+    -1, 110, 111, 112, 113, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 124, -1, 12, 13, -1,
+    15, -1, -1, -1, -1, -1, -1, 22, -1, -1,
+    -1, -1, -1, -1, 29, -1, -1, -1, 33, 34,
+    -1, 36, -1, -1, -1, -1, -1, -1, 43, -1,
+    -1, -1, 47, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 67, 68, 69, 70, -1, 72, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 83, 84,
+    85, -1, -1, -1, -1, 90, -1, -1, -1, -1,
+    -1, -1, 97, 98, -1, 100, -1, 102, 103, 104,
+    -1, -1, -1, -1, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 12, 13, -1, 15, -1, -1, -1, -1, -1,
+    -1, 22, -1, -1, -1, -1, -1, -1, 29, -1,
+    -1, -1, 33, 34, -1, 36, -1, -1, -1, -1,
+    -1, -1, 43, -1, -1, -1, 47, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 67, 68, 69, 70,
+    -1, 72, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 83, 84, 85, -1, -1, -1, -1, 90,
+    -1, -1, -1, -1, -1, -1, 97, 98, -1, 100,
+    -1, 102, 103, 104, -1, -1, -1, -1, -1, 110,
+    111, 112, 113, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, 124, -1, 10, -1, 12, 13, -1,
+    -1, -1, -1, -1, -1, -1, -1, 22, -1, -1,
+    -1, -1, -1, -1, 29, -1, -1, -1, 33, 34,
+    -1, 36, -1, -1, -1, -1, -1, -1, 43, -1,
+    -1, -1, 47, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 67, 68, 69, 70, -1, 72, -1, -1,
+    -1, -1, 77, -1, -1, -1, -1, -1, 83, 84,
+    85, -1, -1, -1, -1, 90, -1, -1, -1, 94,
+    -1, -1, 97, 98, -1, 100, -1, 102, 103, 104,
+    -1, -1, -1, -1, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 10, -1, 12, 13, -1, -1, -1, -1, -1,
+    -1, -1, -1, 22, -1, -1, -1, -1, -1, -1,
+    29, -1, -1, -1, 33, 34, -1, 36, -1, -1,
+    -1, -1, -1, -1, 43, -1, -1, -1, 47, -1,
+    -1, -1, -1, -1, -1, -1, 55, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 67, 68,
+    69, 70, -1, 72, -1, -1, -1, -1, 77, -1,
+    -1, -1, -1, -1, 83, 84, 85, -1, -1, -1,
+    -1, 90, -1, -1, -1, 94, -1, -1, 97, 98,
+    -1, 100, -1, 102, 103, 104, -1, -1, -1, -1,
+    -1, 110, 111, 112, 113, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 124, -1, 10, -1, 12,
+    13, -1, -1, -1, -1, -1, -1, -1, -1, 22,
+    -1, -1, -1, -1, -1, -1, 29, -1, -1, -1,
+    33, 34, -1, 36, -1, -1, -1, -1, -1, -1,
+    43, -1, -1, -1, 47, -1, -1, -1, -1, -1,
+    -1, -1, 55, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 67, 68, 69, 70, -1, 72,
+    -1, -1, -1, -1, 77, -1, -1, -1, -1, -1,
+    83, 84, 85, -1, -1, -1, -1, 90, -1, -1,
+    -1, 94, -1, -1, 97, 98, -1, 100, -1, 102,
+    103, 104, -1, -1, -1, -1, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 124, -1, 11, 12, 13, -1, -1, -1, -1,
+    -1, -1, -1, -1, 22, -1, -1, -1, -1, -1,
+    -1, 29, -1, -1, -1, 33, 34, -1, 36, -1,
+    -1, -1, 40, -1, 42, 43, 44, -1, -1, 47,
+    -1, -1, -1, 51, -1, 53, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 67,
+    68, 69, 70, -1, 72, -1, 74, -1, 76, -1,
+    78, -1, -1, -1, -1, 83, 84, 85, -1, -1,
+    -1, -1, 90, -1, -1, -1, -1, -1, -1, 97,
+    98, -1, 100, -1, 102, 103, 104, -1, -1, -1,
+    -1, -1, 110, 111, 112, 113, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 124, -1, 11, 12,
+    13, -1, -1, -1, -1, -1, -1, -1, -1, 22,
+    -1, -1, -1, -1, -1, -1, 29, -1, -1, -1,
+    33, 34, -1, 36, -1, -1, -1, 40, -1, 42,
+    43, 44, -1, -1, 47, -1, -1, -1, 51, -1,
+    53, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 67, 68, 69, 70, -1, 72,
+    -1, 74, -1, 76, -1, 78, -1, -1, -1, -1,
+    83, 84, 85, -1, -1, -1, -1, 90, -1, -1,
+    -1, -1, -1, 96, 97, 98, -1, 100, -1, 102,
+    103, 104, -1, -1, -1, -1, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 124, -1, 11, 12, 13, -1, -1, -1, -1,
+    -1, -1, -1, -1, 22, -1, -1, -1, -1, -1,
+    -1, 29, -1, -1, -1, 33, 34, -1, 36, -1,
+    -1, -1, 40, -1, 42, 43, 44, -1, -1, 47,
+    -1, -1, -1, 51, -1, 53, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 67,
+    68, 69, 70, -1, 72, -1, 74, -1, 76, -1,
+    78, -1, -1, -1, -1, 83, 84, 85, -1, -1,
+    -1, -1, 90, -1, -1, -1, -1, -1, 96, 97,
+    98, -1, 100, -1, 102, 103, 104, -1, -1, -1,
+    -1, -1, 110, 111, 112, 113, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 124, -1, 11, 12,
+    13, -1, -1, -1, -1, -1, -1, -1, -1, 22,
+    -1, -1, -1, -1, -1, -1, 29, -1, -1, -1,
+    33, 34, -1, 36, -1, -1, -1, 40, -1, 42,
+    43, 44, -1, -1, 47, -1, -1, -1, 51, -1,
+    53, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 67, 68, 69, 70, -1, 72,
+    -1, 74, -1, 76, -1, 78, -1, -1, -1, -1,
+    83, 84, 85, -1, -1, -1, -1, 90, -1, -1,
+    -1, -1, 95, 96, 97, 98, -1, 100, -1, 102,
+    103, 104, -1, -1, -1, -1, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 124, -1, 8, -1, -1, 11, 12, 13, -1,
+    -1, -1, -1, -1, -1, -1, -1, 22, -1, -1,
+    -1, -1, -1, -1, 29, -1, -1, -1, 33, 34,
+    -1, 36, -1, -1, -1, 40, -1, 42, 43, 44,
+    -1, -1, 47, -1, -1, -1, 51, -1, 53, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 67, 68, 69, 70, -1, 72, -1, 74,
+    -1, 76, -1, 78, -1, -1, -1, -1, 83, 84,
+    85, -1, -1, -1, -1, 90, -1, -1, -1, -1,
+    -1, 96, 97, 98, -1, 100, -1, 102, 103, 104,
+    -1, -1, -1, -1, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 11, 12, 13, -1, -1, -1, -1, -1, -1,
+    -1, -1, 22, -1, -1, -1, -1, -1, -1, 29,
+    -1, -1, -1, 33, 34, -1, 36, -1, -1, -1,
+    40, -1, 42, 43, 44, -1, -1, 47, -1, -1,
+    -1, 51, -1, 53, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 67, 68, 69,
+    70, -1, 72, -1, 74, -1, 76, -1, 78, -1,
+    -1, -1, -1, 83, 84, 85, -1, -1, -1, -1,
+    90, -1, -1, -1, -1, 95, 96, 97, 98, -1,
+    100, -1, 102, 103, 104, -1, -1, -1, -1, -1,
+    110, 111, 112, 113, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 124, -1, 11, 12, 13, -1,
+    -1, -1, -1, -1, -1, -1, -1, 22, -1, -1,
+    -1, -1, -1, -1, 29, -1, -1, -1, 33, 34,
+    -1, 36, -1, -1, -1, 40, -1, 42, 43, 44,
+    -1, -1, 47, -1, -1, -1, 51, -1, 53, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 67, 68, 69, 70, -1, 72, -1, 74,
+    -1, 76, -1, 78, -1, -1, -1, -1, 83, 84,
+    85, -1, -1, -1, -1, 90, -1, -1, -1, -1,
+    95, 96, 97, 98, -1, 100, -1, 102, 103, 104,
+    -1, -1, -1, -1, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 8, -1, -1, 11, 12, 13, -1, -1, -1,
+    -1, -1, -1, -1, -1, 22, -1, -1, -1, -1,
+    -1, -1, 29, -1, -1, -1, 33, 34, -1, 36,
+    -1, -1, -1, 40, -1, 42, 43, 44, -1, -1,
+    47, -1, -1, -1, 51, -1, 53, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    67, 68, 69, 70, -1, 72, -1, 74, -1, 76,
+    -1, 78, -1, -1, -1, -1, 83, 84, 85, -1,
+    -1, -1, -1, 90, -1, -1, -1, -1, -1, 96,
+    97, 98, -1, 100, -1, 102, 103, 104, -1, -1,
+    -1, -1, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 124, -1, 11,
+    12, 13, -1, -1, -1, -1, -1, -1, -1, -1,
+    22, -1, -1, -1, -1, -1, -1, 29, -1, -1,
+    -1, 33, 34, -1, 36, -1, -1, -1, 40, -1,
+    42, 43, 44, -1, -1, 47, -1, -1, -1, 51,
+    -1, 53, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 63, -1, -1, -1, 67, 68, 69, 70, -1,
+    72, -1, 74, -1, 76, -1, 78, -1, -1, -1,
+    -1, 83, 84, 85, -1, -1, -1, -1, 90, -1,
+    -1, -1, -1, -1, 96, 97, 98, -1, 100, -1,
+    102, 103, 104, -1, -1, -1, -1, -1, 110, 111,
+    112, 113, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 124, -1, 11, 12, 13, -1, -1, -1,
+    -1, -1, -1, -1, -1, 22, -1, -1, -1, -1,
+    -1, -1, 29, -1, -1, -1, 33, 34, -1, 36,
+    -1, -1, -1, 40, -1, 42, 43, 44, -1, -1,
+    47, -1, -1, -1, 51, -1, 53, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    67, 68, 69, 70, -1, 72, -1, 74, -1, 76,
+    -1, 78, -1, -1, -1, -1, 83, 84, 85, -1,
+    -1, -1, -1, 90, -1, -1, -1, -1, -1, 96,
+    97, 98, -1, 100, -1, 102, 103, 104, -1, -1,
+    -1, -1, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, 122, -1, 124, -1, 11,
+    12, 13, -1, -1, -1, -1, -1, -1, -1, -1,
+    22, -1, -1, -1, -1, -1, -1, 29, -1, -1,
+    -1, 33, 34, -1, 36, -1, -1, -1, 40, -1,
+    42, 43, 44, -1, -1, 47, -1, -1, -1, 51,
+    -1, 53, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 67, 68, 69, 70, -1,
+    72, -1, 74, -1, 76, -1, 78, -1, -1, -1,
+    -1, 83, 84, 85, -1, -1, -1, -1, 90, -1,
+    -1, -1, -1, -1, 96, 97, 98, -1, 100, -1,
+    102, 103, 104, -1, -1, -1, -1, -1, 110, 111,
+    112, 113, -1, -1, -1, -1, -1, -1, -1, -1,
+    122, -1, 124, -1, 11, 12, 13, -1, -1, -1,
+    -1, -1, -1, -1, -1, 22, -1, -1, -1, -1,
+    -1, -1, 29, -1, -1, -1, 33, 34, -1, 36,
+    -1, -1, -1, 40, -1, 42, 43, 44, -1, -1,
+    47, -1, -1, -1, 51, -1, 53, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 63, -1, -1, -1,
+    67, 68, 69, 70, -1, 72, -1, 74, -1, 76,
+    -1, 78, -1, -1, -1, -1, 83, 84, 85, -1,
+    -1, -1, -1, 90, -1, -1, -1, -1, -1, 96,
+    97, 98, -1, 100, -1, 102, 103, 104, -1, -1,
+    -1, -1, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 124, -1, 11,
+    12, 13, -1, -1, -1, -1, -1, -1, -1, -1,
+    22, -1, -1, -1, -1, -1, -1, 29, -1, -1,
+    -1, 33, 34, -1, 36, -1, -1, -1, 40, -1,
+    42, 43, 44, -1, -1, 47, -1, -1, -1, 51,
+    -1, 53, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 67, 68, 69, 70, -1,
+    72, -1, 74, -1, 76, -1, 78, -1, -1, -1,
+    -1, 83, 84, 85, -1, -1, -1, -1, 90, -1,
+    -1, -1, -1, -1, 96, 97, 98, -1, 100, -1,
+    102, 103, 104, -1, -1, -1, -1, -1, 110, 111,
+    112, 113, -1, -1, -1, -1, -1, -1, -1, 121,
+    -1, -1, 124, -1, 11, 12, 13, -1, -1, -1,
+    -1, -1, -1, -1, -1, 22, -1, -1, -1, -1,
+    -1, -1, 29, -1, -1, -1, 33, 34, -1, 36,
+    -1, -1, -1, 40, -1, 42, 43, 44, -1, -1,
+    47, -1, -1, -1, 51, -1, 53, -1, -1, -1,
+    -1, -1, -1, 60, -1, -1, -1, -1, -1, -1,
+    67, 68, 69, 70, -1, 72, -1, 74, -1, 76,
+    -1, 78, -1, -1, -1, -1, 83, 84, 85, -1,
+    -1, -1, -1, 90, -1, -1, -1, -1, 95, 96,
+    97, 98, -1, 100, -1, 102, 103, 104, -1, -1,
+    -1, -1, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 124, -1, 11,
+    12, 13, -1, -1, -1, -1, -1, -1, -1, -1,
+    22, -1, -1, -1, -1, -1, -1, 29, -1, -1,
+    -1, 33, 34, -1, 36, -1, -1, -1, 40, -1,
+    42, 43, 44, -1, -1, 47, -1, -1, -1, 51,
+    -1, 53, -1, -1, 56, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 67, 68, 69, 70, -1,
+    72, -1, 74, -1, 76, -1, 78, -1, -1, -1,
+    -1, 83, 84, 85, -1, -1, -1, -1, 90, -1,
+    -1, -1, -1, 95, 96, 97, 98, -1, 100, -1,
+    102, 103, 104, -1, -1, -1, -1, -1, 110, 111,
+    112, 113, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 124, -1, 11, 12, 13, -1, -1, -1,
+    -1, -1, -1, -1, -1, 22, -1, -1, -1, -1,
+    -1, -1, 29, -1, -1, -1, 33, 34, -1, 36,
+    -1, -1, -1, 40, -1, 42, 43, 44, -1, -1,
+    47, -1, -1, -1, 51, -1, 53, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    67, 68, 69, 70, -1, 72, -1, 74, -1, 76,
+    77, 78, -1, -1, -1, -1, 83, 84, 85, 86,
+    87, -1, -1, 90, -1, -1, -1, -1, -1, 96,
+    97, 98, -1, 100, -1, 102, 103, 104, -1, -1,
+    -1, -1, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 124, -1, 11,
+    12, 13, -1, -1, -1, -1, -1, -1, -1, -1,
+    22, -1, -1, -1, -1, -1, -1, 29, 30, -1,
+    -1, 33, 34, -1, 36, -1, -1, -1, 40, -1,
+    42, 43, 44, -1, -1, 47, -1, -1, -1, 51,
+    -1, 53, -1, -1, -1, -1, -1, -1, -1, 61,
+    -1, -1, -1, -1, -1, 67, 68, 69, 70, 71,
+    72, -1, 74, 75, 76, -1, 78, -1, 80, -1,
+    -1, 83, 84, 85, -1, -1, -1, -1, 90, -1,
+    -1, -1, -1, -1, 96, 97, 98, -1, 100, -1,
+    102, 103, 104, -1, -1, -1, -1, -1, 110, 111,
+    112, 113, -1, -1, -1, -1, -1, -1, -1, 121,
+    122, -1, 124, -1, 11, 12, 13, -1, -1, -1,
+    -1, -1, -1, -1, -1, 22, -1, -1, -1, -1,
+    -1, -1, 29, 30, -1, -1, 33, 34, -1, 36,
+    -1, -1, -1, 40, -1, 42, 43, 44, -1, -1,
+    47, -1, -1, -1, 51, -1, 53, -1, -1, -1,
+    -1, -1, -1, -1, 61, -1, -1, -1, -1, -1,
+    67, 68, 69, 70, 71, 72, -1, 74, 75, 76,
+    -1, 78, -1, 80, -1, -1, 83, 84, 85, -1,
+    -1, -1, -1, 90, -1, -1, -1, -1, -1, 96,
+    97, 98, -1, 100, -1, 102, 103, 104, -1, -1,
+    -1, -1, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, 121, 122, -1, 124, -1, 4,
+    5, 6, -1, -1, 9, 10, 11, -1, -1, 14,
+    -1, 16, -1, -1, -1, 20, 21, 22, -1, -1,
+    -1, -1, -1, -1, 29, 30, 31, 32, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 43, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 59, -1, -1, -1, -1, -1,
+    -1, -1, -1, 68, 69, 70, 71, 72, 73, -1,
+    75, 76, 77, 78, 79, 80, -1, -1, 83, 84,
+    85, 86, 87, 88, 89, -1, -1, -1, -1, 94,
+    -1, -1, 97, 98, 99, 100, 101, 102, -1, -1,
+    -1, -1, -1, 108, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 4, 5, 6, -1, -1, 9, 10, 11, -1,
+    -1, 14, -1, 16, -1, -1, -1, 20, 21, 22,
+    -1, -1, -1, -1, -1, -1, 29, 30, 31, 32,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    43, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 55, -1, -1, -1, 59, -1, -1, -1,
+    -1, -1, -1, -1, -1, 68, 69, 70, 71, 72,
+    73, -1, 75, 76, 77, 78, 79, 80, -1, -1,
+    83, 84, 85, 86, 87, 88, 89, -1, -1, -1,
+    -1, 94, -1, -1, 97, 98, 99, 100, 101, 102,
+    -1, -1, -1, -1, -1, 108, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 124, -1, 4, 5, 6, -1, -1, 9, 10,
+    11, -1, -1, 14, -1, 16, -1, -1, -1, 20,
+    21, 22, -1, -1, -1, -1, -1, -1, 29, 30,
+    31, 32, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 43, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 55, -1, -1, -1, 59, -1,
+    -1, -1, -1, -1, -1, -1, -1, 68, 69, 70,
+    71, 72, 73, -1, 75, 76, 77, 78, 79, 80,
+    -1, -1, 83, 84, 85, 86, 87, 88, 89, -1,
+    -1, -1, -1, 94, -1, -1, 97, 98, 99, 100,
+    101, 102, -1, -1, -1, -1, -1, 108, -1, 110,
+    111, 112, 113, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, 124, -1, 4, 5, 6, -1, -1,
+    9, 10, 11, -1, -1, 14, -1, 16, -1, -1,
+    -1, 20, 21, 22, -1, -1, -1, -1, -1, -1,
+    29, 30, 31, 32, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 43, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 55, -1, -1, -1,
+    59, -1, -1, -1, -1, -1, -1, -1, -1, 68,
+    69, 70, 71, 72, 73, -1, 75, 76, 77, 78,
+    79, 80, -1, -1, 83, 84, 85, 86, 87, 88,
+    89, -1, -1, -1, -1, 94, -1, -1, 97, 98,
+    99, 100, 101, 102, -1, -1, -1, -1, -1, 108,
+    -1, 110, 111, 112, 113, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, 124, -1, 4, 5, 6,
+    -1, -1, 9, 10, 11, -1, -1, 14, -1, 16,
+    -1, -1, -1, 20, 21, 22, -1, -1, -1, -1,
+    -1, -1, 29, 30, 31, 32, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 43, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 55, -1,
+    -1, -1, 59, -1, -1, -1, -1, -1, -1, -1,
+    -1, 68, 69, 70, 71, 72, 73, -1, 75, 76,
+    77, 78, 79, 80, -1, -1, 83, 84, 85, 86,
+    87, 88, 89, -1, -1, -1, -1, 94, -1, -1,
+    97, 98, 99, 100, 101, 102, -1, -1, -1, -1,
+    -1, 108, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 124, -1, 4,
+    5, 6, -1, -1, 9, 10, 11, -1, -1, 14,
+    -1, 16, -1, -1, -1, 20, 21, 22, -1, -1,
+    -1, -1, -1, -1, 29, 30, 31, 32, -1, 34,
+    -1, -1, -1, -1, -1, -1, -1, -1, 43, -1,
+    -1, -1, 47, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, 59, -1, -1, -1, -1, -1,
+    -1, -1, 67, 68, 69, 70, 71, 72, 73, -1,
+    75, 76, 77, 78, 79, 80, -1, -1, 83, 84,
+    85, 86, 87, 88, 89, -1, -1, -1, -1, 94,
+    -1, -1, 97, 98, 99, 100, 101, 102, -1, -1,
+    -1, -1, -1, 108, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 4, 5, 6, -1, -1, 9, 10, 11, -1,
+    -1, 14, -1, 16, -1, -1, -1, 20, 21, 22,
+    -1, -1, -1, -1, -1, -1, 29, 30, 31, 32,
+    -1, 34, -1, -1, -1, -1, -1, -1, -1, -1,
+    43, -1, -1, -1, 47, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, 59, -1, -1, -1,
+    63, -1, -1, -1, 67, 68, 69, 70, 71, 72,
+    73, -1, 75, 76, 77, 78, 79, 80, -1, -1,
+    83, 84, 85, 86, 87, 88, 89, -1, -1, -1,
+    -1, 94, -1, -1, 97, 98, 99, 100, 101, 102,
+    -1, -1, -1, -1, -1, 108, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, 124, -1, 4, 5, 6, -1, -1, 9, 10,
+    11, -1, -1, 14, -1, 16, -1, -1, -1, 20,
+    21, 22, -1, -1, -1, -1, -1, -1, 29, 30,
+    31, 32, -1, 34, -1, -1, -1, -1, -1, -1,
+    -1, -1, 43, -1, -1, -1, 47, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, 59, -1,
+    61, -1, 63, -1, -1, -1, 67, 68, 69, 70,
+    71, 72, 73, -1, 75, 76, 77, 78, 79, 80,
+    -1, -1, 83, 84, 85, 86, 87, 88, 89, -1,
+    -1, -1, -1, 94, -1, -1, 97, 98, 99, 100,
+    101, 102, -1, -1, -1, -1, -1, 108, -1, 110,
+    111, 112, 113, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, 124, -1, 4, -1, -1, -1, -1,
+    9, -1, 11, 12, 13, 14, -1, -1, -1, -1,
+    -1, -1, 21, 22, -1, -1, -1, -1, -1, -1,
+    29, 30, -1, -1, 33, 34, -1, 36, -1, -1,
+    -1, 40, -1, 42, 43, 44, -1, -1, 47, -1,
+    -1, -1, 51, -1, 53, -1, -1, -1, -1, -1,
+    59, -1, 61, -1, -1, -1, -1, -1, 67, 68,
+    69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
+    79, 80, -1, -1, 83, 84, 85, -1, -1, 88,
+    -1, 90, -1, -1, -1, -1, -1, 96, 97, 98,
+    -1, 100, -1, 102, 103, 104, -1, -1, -1, -1,
+    -1, 110, 111, 112, 113, -1, -1, -1, -1, -1,
+    -1, -1, -1, 122, -1, 124, -1, 4, 5, 6,
+    -1, -1, 9, 10, 11, -1, -1, 14, -1, 16,
+    -1, -1, -1, 20, 21, 22, -1, -1, -1, -1,
+    -1, -1, 29, 30, 31, 32, -1, 34, -1, -1,
+    -1, -1, -1, -1, -1, -1, 43, -1, -1, -1,
+    47, -1, -1, -1, -1, -1, -1, -1, 55, -1,
+    -1, -1, 59, -1, -1, -1, 63, -1, -1, -1,
+    67, 68, 69, 70, 71, 72, 73, -1, 75, 76,
+    77, 78, 79, 80, -1, -1, 83, 84, 85, 86,
+    87, 88, 89, -1, -1, -1, -1, 94, -1, -1,
+    97, 98, 99, 100, 101, 102, -1, -1, -1, -1,
+    -1, 108, -1, 110, 111, 112, 113, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, 124, -1, 4,
+    5, 6, -1, -1, 9, 10, 11, -1, -1, 14,
+    -1, 16, -1, -1, -1, 20, 21, 22, -1, -1,
+    -1, -1, -1, -1, 29, 30, 31, 32, -1, 34,
+    -1, -1, -1, -1, -1, -1, -1, -1, 43, -1,
+    -1, -1, 47, -1, -1, -1, -1, -1, -1, -1,
+    55, -1, -1, -1, 59, -1, -1, -1, 63, -1,
+    -1, -1, 67, 68, 69, 70, 71, 72, 73, -1,
+    75, 76, 77, 78, 79, 80, -1, -1, 83, 84,
+    85, 86, 87, 88, 89, -1, -1, -1, -1, 94,
+    -1, -1, 97, 98, 99, 100, 101, 102, -1, -1,
+    -1, -1, -1, 108, -1, 110, 111, 112, 113, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, 124,
+    -1, 4, -1, -1, -1, -1, 9, -1, 11, 12,
+    13, 14, -1, -1, -1, -1, -1, -1, 21, 22,
+    -1, -1, -1, -1, -1, -1, 29, 30, -1, -1,
+    33, 34, -1, 36, -1, -1, -1, 40, -1, 42,
+    43, 44, -1, -1, 47, -1, -1, -1, 51, -1,
+    53, -1, -1, -1, -1, -1, 59, -1, 61, -1,
+    -1, -1, -1, -1, 67, 68, 69, 70, 71, 72,
+    73, 74, 75, 76, 77, 78, 79, 80, -1, -1,
+    83, 84, 85, -1, -1, 88, -1, 90, -1, -1,
+    -1, -1, -1, 96, 97, 98, -1, 100, -1, 102,
+    103, 104, -1, -1, -1, -1, -1, 110, 111, 112,
+    113, -1, -1, -1, -1, -1, -1, -1, 121, 122,
+    -1, 124, -1, 4, -1, -1, -1, -1, 9, -1,
+    11, 12, 13, 14, -1, -1, -1, -1, -1, -1,
+    21, 22, -1, -1, -1, -1, -1, -1, 29, 30,
+    -1, -1, 33, 34, -1, 36, -1, -1, -1, 40,
+    -1, 42, 43, 44, -1, -1, 47, -1, -1, -1,
+    51, -1, 53, -1, -1, -1, -1, -1, 59, -1,
+    61, -1, -1, -1, -1, -1, 67, 68, 69, 70,
+    71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
+    -1, -1, 83, 84, 85, -1, -1, 88, -1, 90,
+    -1, -1, -1, -1, -1, 96, 97, 98, -1, 100,
+    -1, 102, 103, 104, -1, -1, -1, -1, -1, 110,
+    111, 112, 113, -1, -1, -1, -1, -1, -1, -1,
+    121, 122, -1, 124, -1, 4, -1, -1, -1, -1,
+    9, -1, 11, 12, 13, 14, -1, -1, -1, -1,
+    -1, -1, 21, 22, -1, -1, -1, -1, -1, -1,
+    29, 30, -1, -1, 33, 34, -1, 36, -1, -1,
+    -1, 40, -1, 42, 43, 44, -1, -1, 47, -1,
+    -1, -1, 51, -1, 53, -1, -1, -1, -1, -1,
+    59, -1, 61, -1, -1, -1, -1, -1, 67, 68,
+    69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
+    79, 80, -1, -1, 83, 84, 85, -1, -1, 88,
+    -1, 90, -1, -1, -1, -1, -1, 96, 97, 98,
+    -1, 100, -1, 102, 103, 104, -1, -1, -1, -1,
+    -1, 110, 111, 112, 113, -1, -1, -1, -1, -1,
+    -1, -1, 121, 122, -1, 124, -1,
+
+    58, 181, 180, 35, 18, 182, 35, 22, 187, 14,
+    185, 22, 18, 35, 22, 18, 201, 200, 28, 58,
+    18, 22, 18, 35, 18, 41, 200, 172, 35, 172,
+    174, 173, 18, 63, 29, 35, 18, 24, 135, 135,
+    162, 182, 165, 168, 53, 58, 181, 174, 172, 53,
+    41, 53, 173, 172, 174, 173, 76, 29, 95, 58,
+    98, 41, 179, 172, 172, 58, 58, 173, 53, 66,
+    174, 29, 53, 172, 53, 53, 174, 53, 173, 159,
+    41, 58, 56, 58, 174, 58, 76, 58, 58, 58,
+    173, 172, 76, 76, 41, 38, 184, 172, 29, 66,
+    135, 41, 66, 53, 172, 174, 184, 173, 76, 74,
+    76, 74, 74, 185, 185, 75, 172, 181, 66, 53,
+    187, 182, 187, 41, 172, 172, 115, 173, 181, 173,
+    182, 174, 51, 53, 58, 58, 58, 58, 77, 53,
+    41, 58, 98, 95, 180, 56, 53, 24, 58, 58,
+    41, 42, 24, 2, 53, 51, 53, 41, 42, 53,
+    53, 2, 41, 2, 2, 41, 42, 53, 53, 58,
+    2, 60, 24, 56, 24, 24, 58, 27, 58, 59,
+    2, 2, 41, 24, 58, 24, 24, 41, 42, 58,
+    41, 24, 24, 72, 41, 41, 41, 2, 24, 81,
+    2, 27, 24, 24, 2, 41, 2, 81, 24, 38,
+    41, 42, 81, 41, 24, 203, 204, 27, 117, 24,
+    117, 72, 24, 117, 117, 72, 24, 72, 24, 41,
+    42, 117, 117, 41, 42, 41, 72, 41, 42, -1,
+    41, 41, 41, 24, 41, 85, 41, 42, 11, 12,
+    53, 54, 92, 41, 41, 42, 41, 42, 41, 42,
+    137, 41, 68, 135, 41, 42, 41, 42, 69, 68,
+    3, 68, 41, 42, 157, 41, 42, 41, 42, 61,
+    68, 69, -1, 68, 136, 41, 42, 41, 42, 41,
+    42, 41, 72, 41, 42, 41, 42, 41, 42, 41,
+    42, -1, 52, 85, 137, 54, 55, 41, 42, 58,
+    92, 41, 42, 41, 42, -1, 72, 2, 41, 42,
+    3, 137, 41, 42, 41, 42, 38, 186, 41, 42,
+    41, 42, 41, 42, -1, 85, 41, 42, 178, 24,
+    186, 170, 41, 42, 16, 41, 42, 41, -1, 41,
+    41, 61, 85, 41, 42, -1, 137, -1, 52, 92,
+    52, 52, -1, 191, 151, -1, 54, -1, 61, 41,
+    41, 41, 42, 72, 151, 85, 151, 61, 41, -1,
+    52, 52, 92, 41, 42, -1, 186, -1, 171, 52,
+    -1, 85, 85, 85, 85, 89, 178, 151, 89, 92,
+    92, 85, 85, 38, 39, -1, 78, 171, 92, 92,
+    68, -1, 158, -1, 85, 196, 128, 41, 130, 171,
+    61, 92, 85, 151, -1, 88, -1, 175, 52, 171,
+    -1, 211, 41, -1, 41, 42, 205, 171, 61, 205,
+    184, 171, 151, 52, 85, 178, 151, 54, 61, 41,
+    42, 92, 171, 149, -1, 151, -1, 180, 170, 61,
+    171, 85, 85, 41, -1, 61, -1, 180, 178, 92,
+    158, 41, 85, 41, 52, 41, 85, 147, 41, 92,
+    104, 151, 52, 85, 52, 178, 52, -1, 205, 85,
+    92, 126, 41, -1, 178, 178, 92, 106, 156, 41,
+    41, 64, 16, 52, -1, 68, 69, 85, 207, 41,
+    52, 52, 41, 42, -1, 85, -1, 85, 96, 85,
+    52, 91, 16, -1, -1, 93, 92, 41, 41, -1,
+    -1, -1, -1, -1, 41, 170, 85, 178, 52, 52,
+    -1, 41, 91, 85, 85, 52, 41, 41, -1, 91,
+    -1, 158, 52, 85, -1, 178, 148, 52, 52, 151,
+    41, 102, 41, -1, 78, 178, -1, -1, 100, -1,
+    41, 52, 85, 52, -1, 88, 178, -1, 85, 86,
+    87, 52, 178, 41, 78, 85, 86, 87, 82, -1,
+    85, 86, 87, -1, 52, -1, 41, 42, -1, 16,
+    16, 41, 19, 19, 85, -1, 85, 86, 87, 54,
+    55, 92, 52, 3, 85, 86, 87, -1, 147, 41,
+    101, -1, 151, -1, 41, 41, -1, 85, -1, 41,
+    52, 41, 41, -1, 92, 52, 52, -1, -1, 97,
+    52, 16, 52, 52, -1, 85, 86, 87, 23, 16,
+    -1, -1, 19, 16, 21, -1, 19, -1, -1, -1,
+    41, 78, 78, 85, -1, -1, 41, -1, -1, -1,
+    92, 52, 94, 85, 16, 85, 85, 52, 41, 41,
+    92, 23, 92, 92, -1, -1, -1, 99, -1, 52,
+    52, 58, 59, 103, -1, 85, 105, 39, -1, 41,
+    41, -1, 92, 78, 85, 86, 87, -1, -1, -1,
+    52, 52, -1, 158, -1, 78, 4, -1, -1, 4,
+    -1, -1, -1, 85, 86, 87, -1, -1, 16, -1,
+    -1, 16, -1, -1, -1, 23, 78, -1, 23, -1,
+    -1, -1, -1, 16, 85, 86, 87, -1, 138, 139,
+    23, 39, -1, 41, 39, 28, 41, 30, 31, 32,
+    33, 34, 16, -1, 52, -1, -1, 52, -1, 23,
+    -1, -1, -1, -1, 28, -1, 30, 31, 32, 33,
+    34, -1, 16, -1, -1, -1, -1, -1, 178, 23,
+    78, -1, -1, 78, 28, -1, 30, 31, 32, 33,
+    34, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, 28, -1, 30, 31, 32, 33, 34, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    -1, -1, -1, -1, -1, -1, -1
+};
+
+QT_END_NAMESPACE
diff --git a/qtdeclarative/src/qml/qqmljsgrammar_p.h b/qtdeclarative/src/qml/qqmljsgrammar_p.h
new file mode 100644
index 0000000..04b6226
--- /dev/null
+++ b/qtdeclarative/src/qml/qqmljsgrammar_p.h
@@ -0,0 +1,222 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:GPL-EXCEPT$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3 as published by the Free Software
+** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists for the convenience
+// of other Qt classes.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+// This file was generated by qlalr - DO NOT EDIT!
+#ifndef QQMLJSGRAMMAR_P_H
+#define QQMLJSGRAMMAR_P_H
+
+#include <QtCore/qglobal.h>
+
+QT_BEGIN_NAMESPACE
+
+class QQmlJSGrammar
+{
+public:
+    enum VariousConstants {
+        EOF_SYMBOL = 0,
+        REDUCE_HERE = 125,
+        T_AND = 1,
+        T_AND_AND = 2,
+        T_AND_EQ = 3,
+        T_ARROW = 93,
+        T_AS = 110,
+        T_AUTOMATIC_SEMICOLON = 62,
+        T_BREAK = 4,
+        T_CASE = 5,
+        T_CATCH = 6,
+        T_CLASS = 98,
+        T_COLON = 7,
+        T_COMMA = 8,
+        T_COMMENT = 91,
+        T_COMPATIBILITY_SEMICOLON = 92,
+        T_CONST = 86,
+        T_CONTINUE = 9,
+        T_DEBUGGER = 88,
+        T_DEFAULT = 10,
+        T_DELETE = 11,
+        T_DIVIDE_ = 12,
+        T_DIVIDE_EQ = 13,
+        T_DO = 14,
+        T_DOT = 15,
+        T_ELLIPSIS = 95,
+        T_ELSE = 16,
+        T_ENUM = 94,
+        T_EQ = 17,
+        T_EQ_EQ = 18,
+        T_EQ_EQ_EQ = 19,
+        T_ERROR = 114,
+        T_EXPORT = 101,
+        T_EXTENDS = 99,
+        T_FALSE = 85,
+        T_FEED_JS_EXPRESSION = 118,
+        T_FEED_JS_MODULE = 120,
+        T_FEED_JS_SCRIPT = 119,
+        T_FEED_JS_STATEMENT = 117,
+        T_FEED_UI_OBJECT_MEMBER = 116,
+        T_FEED_UI_PROGRAM = 115,
+        T_FINALLY = 20,
+        T_FOR = 21,
+        T_FORCE_BLOCK = 122,
+        T_FORCE_DECLARATION = 121,
+        T_FOR_LOOKAHEAD_OK = 123,
+        T_FROM = 102,
+        T_FUNCTION = 22,
+        T_GE = 23,
+        T_GET = 112,
+        T_GT = 24,
+        T_GT_GT = 25,
+        T_GT_GT_EQ = 26,
+        T_GT_GT_GT = 27,
+        T_GT_GT_GT_EQ = 28,
+        T_IDENTIFIER = 29,
+        T_IF = 30,
+        T_IMPORT = 108,
+        T_IN = 31,
+        T_INSTANCEOF = 32,
+        T_LBRACE = 33,
+        T_LBRACKET = 34,
+        T_LE = 35,
+        T_LET = 87,
+        T_LPAREN = 36,
+        T_LT = 37,
+        T_LT_LT = 38,
+        T_LT_LT_EQ = 39,
+        T_MINUS = 40,
+        T_MINUS_EQ = 41,
+        T_MINUS_MINUS = 42,
+        T_MULTILINE_STRING_LITERAL = 90,
+        T_NEW = 43,
+        T_NOT = 44,
+        T_NOT_EQ = 45,
+        T_NOT_EQ_EQ = 46,
+        T_NO_SUBSTITUTION_TEMPLATE = 103,
+        T_NULL = 83,
+        T_NUMERIC_LITERAL = 47,
+        T_OF = 111,
+        T_ON = 124,
+        T_OR = 48,
+        T_OR_EQ = 49,
+        T_OR_OR = 50,
+        T_PLUS = 51,
+        T_PLUS_EQ = 52,
+        T_PLUS_PLUS = 53,
+        T_PRAGMA = 109,
+        T_PROPERTY = 68,
+        T_PUBLIC = 107,
+        T_QUESTION = 54,
+        T_RBRACE = 55,
+        T_RBRACKET = 56,
+        T_READONLY = 70,
+        T_REMAINDER = 57,
+        T_REMAINDER_EQ = 58,
+        T_RESERVED_WORD = 89,
+        T_RETURN = 59,
+        T_RPAREN = 60,
+        T_SEMICOLON = 61,
+        T_SET = 113,
+        T_SIGNAL = 69,
+        T_STAR = 63,
+        T_STAR_EQ = 66,
+        T_STAR_STAR = 64,
+        T_STAR_STAR_EQ = 65,
+        T_STATIC = 100,
+        T_STRING_LITERAL = 67,
+        T_SUPER = 97,
+        T_SWITCH = 71,
+        T_TEMPLATE_HEAD = 104,
+        T_TEMPLATE_MIDDLE = 105,
+        T_TEMPLATE_TAIL = 106,
+        T_THIS = 72,
+        T_THROW = 73,
+        T_TILDE = 74,
+        T_TRUE = 84,
+        T_TRY = 75,
+        T_TYPEOF = 76,
+        T_VAR = 77,
+        T_VOID = 78,
+        T_WHILE = 79,
+        T_WITH = 80,
+        T_XOR = 81,
+        T_XOR_EQ = 82,
+        T_YIELD = 96,
+
+        ACCEPT_STATE = 1008,
+        RULE_COUNT = 586,
+        STATE_COUNT = 1009,
+        TERMINAL_COUNT = 126,
+        NON_TERMINAL_COUNT = 213,
+
+        GOTO_INDEX_OFFSET = 1009,
+        GOTO_INFO_OFFSET = 5937,
+        GOTO_CHECK_OFFSET = 5937
+    };
+
+    static const char *const     spell[];
+    static const short             lhs[];
+    static const short             rhs[];
+    static const short    goto_default[];
+    static const short  action_default[];
+    static const short    action_index[];
+    static const short     action_info[];
+    static const short    action_check[];
+
+    static inline int nt_action (int state, int nt)
+    {
+        const int yyn = action_index [GOTO_INDEX_OFFSET + state] + nt;
+        if (yyn < 0 || action_check [GOTO_CHECK_OFFSET + yyn] != nt)
+            return goto_default [nt];
+
+        return action_info [GOTO_INFO_OFFSET + yyn];
+    }
+
+    static inline int t_action (int state, int token)
+    {
+        const int yyn = action_index [state] + token;
+
+        if (yyn < 0 || action_check [yyn] != token)
+            return - action_default [state];
+
+        return action_info [yyn];
+    }
+};
+
+
+QT_END_NAMESPACE
+#endif // QQMLJSGRAMMAR_P_H
+
diff --git a/qtdeclarative/src/qml/qqmljsparser.cpp b/qtdeclarative/src/qml/qqmljsparser.cpp
new file mode 100644
index 0000000..1dd24d0
--- /dev/null
+++ b/qtdeclarative/src/qml/qqmljsparser.cpp
@@ -0,0 +1,3457 @@
+
+#line 127 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtQml module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <private/qqmljsengine_p.h>
+#include <private/qqmljslexer_p.h>
+#include <private/qqmljsast_p.h>
+#include <private/qqmljsmemorypool_p.h>
+
+#include <QtCore/qdebug.h>
+#include <QtCore/qcoreapplication.h>
+
+#include <string.h>
+
+
+#line 467 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+
+#include "qqmljsparser_p.h"
+
+#include <QtCore/qvarlengtharray.h>
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is automatically generated from qqmljs.g.
+// Changes should be made to that file, not here. Any change to this file will
+// be lost!
+//
+// To regenerate this file, run:
+//    qlalr --no-debug --no-lines --qt qqmljs.g
+//
+
+#define UNIMPLEMENTED syntaxError(loc(1), "Unimplemented"); return false
+
+using namespace QQmlJS;
+
+QT_QML_BEGIN_NAMESPACE
+
+void Parser::reallocateStack()
+{
+    if (! stack_size)
+        stack_size = 128;
+    else
+        stack_size <<= 1;
+
+    sym_stack = reinterpret_cast<Value*> (realloc(sym_stack, stack_size * sizeof(Value)));
+    state_stack = reinterpret_cast<int*> (realloc(state_stack, stack_size * sizeof(int)));
+    location_stack = reinterpret_cast<AST::SourceLocation*> (realloc(location_stack, stack_size * sizeof(AST::SourceLocation)));
+    string_stack.resize(stack_size);
+    rawString_stack.resize(stack_size);
+}
+
+Parser::Parser(Engine *engine):
+    driver(engine),
+    pool(engine->pool())
+{
+}
+
+Parser::~Parser()
+{
+    if (stack_size) {
+        free(sym_stack);
+        free(state_stack);
+        free(location_stack);
+    }
+}
+
+static inline AST::SourceLocation location(Lexer *lexer)
+{
+    AST::SourceLocation loc;
+    loc.offset = lexer->tokenOffset();
+    loc.length = lexer->tokenLength();
+    loc.startLine = lexer->tokenStartLine();
+    loc.startColumn = lexer->tokenStartColumn();
+    return loc;
+}
+
+AST::UiQualifiedId *Parser::reparseAsQualifiedId(AST::ExpressionNode *expr)
+{
+    QVarLengthArray<QStringRef, 4> nameIds;
+    QVarLengthArray<AST::SourceLocation, 4> locations;
+
+    AST::ExpressionNode *it = expr;
+    while (AST::FieldMemberExpression *m = AST::cast<AST::FieldMemberExpression *>(it)) {
+        nameIds.append(m->name);
+        locations.append(m->identifierToken);
+        it = m->base;
+    }
+
+    if (AST::IdentifierExpression *idExpr = AST::cast<AST::IdentifierExpression *>(it)) {
+        AST::UiQualifiedId *q = new (pool) AST::UiQualifiedId(idExpr->name);
+        q->identifierToken = idExpr->identifierToken;
+
+        AST::UiQualifiedId *currentId = q;
+        for (int i = nameIds.size() - 1; i != -1; --i) {
+            currentId = new (pool) AST::UiQualifiedId(currentId, nameIds[i]);
+            currentId->identifierToken = locations[i];
+        }
+
+        return currentId->finish();
+    }
+
+    return 0;
+}
+
+void Parser::pushToken(int token)
+{
+    Q_ASSERT(last_token);
+    Q_ASSERT(last_token < &token_buffer[TOKEN_BUFFER_SIZE]);
+    last_token->token = yytoken;
+    last_token->dval = yylval;
+    last_token->spell = yytokenspell;
+    last_token->raw = yytokenraw;
+    last_token->loc = yylloc;
+    ++last_token;
+    yytoken = token;
+}
+
+int Parser::lookaheadToken(Lexer *lexer)
+{
+    if (yytoken < 0) {
+        yytoken = lexer->lex();
+        yylval = lexer->tokenValue();
+        yytokenspell = lexer->tokenSpell();
+        yytokenraw = lexer->rawString();
+        yylloc = location(lexer);
+    }
+    return yytoken;
+}
+
+//#define PARSER_DEBUG
+
+bool Parser::parse(int startToken)
+{
+    Lexer *lexer = driver->lexer();
+    bool hadErrors = false;
+    yytoken = -1;
+    int action = 0;
+
+    token_buffer[0].token = startToken;
+    first_token = &token_buffer[0];
+    if (startToken == T_FEED_JS_SCRIPT && !lexer->qmlMode()) {
+        Directives ignoreDirectives;
+        Directives *directives = driver->directives();
+        if (!directives)
+            directives = &ignoreDirectives;
+        DiagnosticMessage error;
+        if (!lexer->scanDirectives(directives, &error)) {
+            diagnostic_messages.append(error);
+            return false;
+        }
+        token_buffer[1].token = lexer->tokenKind();
+        token_buffer[1].dval = lexer->tokenValue();
+        token_buffer[1].loc = location(lexer);
+        token_buffer[1].spell = lexer->tokenSpell();
+        last_token = &token_buffer[2];
+    } else {
+        last_token = &token_buffer[1];
+    }
+
+    tos = -1;
+    program = 0;
+
+    do {
+        if (++tos == stack_size)
+            reallocateStack();
+
+        state_stack[tos] = action;
+
+    _Lcheck_token:
+        if (yytoken == -1 && -TERMINAL_COUNT != action_index[action]) {
+            yyprevlloc = yylloc;
+
+            if (first_token == last_token) {
+                yytoken = lexer->lex();
+                yylval = lexer->tokenValue();
+                yytokenspell = lexer->tokenSpell();
+                yytokenraw = lexer->rawString();
+                yylloc = location(lexer);
+            } else {
+                yytoken = first_token->token;
+                yylval = first_token->dval;
+                yytokenspell = first_token->spell;
+                yytokenraw = first_token->raw;
+                yylloc = first_token->loc;
+                ++first_token;
+                if (first_token == last_token)
+                    first_token = last_token = &token_buffer[0];
+            }
+        }
+
+#ifdef PARSER_DEBUG
+       qDebug() << "   in state" << action;
+#endif
+
+        action = t_action(action, yytoken);
+#ifdef PARSER_DEBUG
+       qDebug() << "   current token" << yytoken << (yytoken >= 0 ? spell[yytoken] : "(null)") << "new state" << action;
+#endif
+        if (action > 0) {
+            if (action != ACCEPT_STATE) {
+                yytoken = -1;
+                sym(1).dval = yylval;
+                stringRef(1) = yytokenspell;
+                rawStringRef(1) = yytokenraw;
+                loc(1) = yylloc;
+            } else {
+              --tos;
+              return ! hadErrors;
+            }
+        } else if (action < 0) {
+          const int r = -action - 1;
+          tos -= rhs[r];
+
+#ifdef PARSER_DEBUG
+          qDebug() << "        reducing through rule " << -action;
+#endif
+
+          switch (r) {
+
+#line 679 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 0: {
+        sym(1).Node = sym(2).Node;
+        program = sym(1).Node;
+    } break;
+
+#line 687 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 1: {
+        sym(1).Node = sym(2).Node;
+        program = sym(1).Node;
+    } break;
+
+#line 695 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 2: {
+        sym(1).Node = sym(2).Node;
+        program = sym(1).Node;
+    } break;
+
+#line 703 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 3: {
+        sym(1).Node = sym(2).Node;
+        program = sym(1).Node;
+    } break;
+
+#line 711 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 4: {
+        sym(1).Node = sym(2).Node;
+        program = sym(1).Node;
+    } break;
+
+#line 719 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 5: {
+        sym(1).Node = sym(2).Node;
+        program = sym(1).Node;
+    } break;
+
+#line 728 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 6: {
+        sym(1).UiProgram = new (pool) AST::UiProgram(sym(1).UiHeaderItemList, sym(2).UiObjectMemberList->finish());
+    } break;
+
+#line 736 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 8: {
+        sym(1).Node = sym(1).UiHeaderItemList->finish();
+    } break;
+
+#line 743 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 9: {
+        sym(1).Node = new (pool) AST::UiHeaderItemList(sym(1).UiPragma);
+    } break;
+
+#line 750 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 10: {
+        sym(1).Node = new (pool) AST::UiHeaderItemList(sym(1).UiImport);
+    } break;
+
+#line 757 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 11: {
+        sym(1).Node = new (pool) AST::UiHeaderItemList(sym(1).UiHeaderItemList, sym(2).UiPragma);
+    } break;
+
+#line 764 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 12: {
+        sym(1).Node = new (pool) AST::UiHeaderItemList(sym(1).UiHeaderItemList, sym(2).UiImport);
+    } break;
+
+#line 774 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 15: {
+        AST::UiPragma *pragma = new (pool) AST::UiPragma(stringRef(2));
+        pragma->pragmaToken = loc(1);
+        pragma->semicolonToken = loc(3);
+        sym(1).Node = pragma;
+    } break;
+
+#line 787 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 18: {
+        sym(1).UiImport->semicolonToken = loc(2);
+    } break;
+
+#line 795 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 20: {
+        sym(1).UiImport->versionToken = loc(2);
+        sym(1).UiImport->semicolonToken = loc(3);
+    } break;
+
+#line 804 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 22: {
+        sym(1).UiImport->versionToken = loc(2);
+        sym(1).UiImport->asToken = loc(3);
+        sym(1).UiImport->importIdToken = loc(4);
+        sym(1).UiImport->importId = stringRef(4);
+        sym(1).UiImport->semicolonToken = loc(5);
+    } break;
+
+#line 816 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 24: {
+        sym(1).UiImport->asToken = loc(2);
+        sym(1).UiImport->importIdToken = loc(3);
+        sym(1).UiImport->importId = stringRef(3);
+        sym(1).UiImport->semicolonToken = loc(4);
+    } break;
+
+#line 826 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 25: {
+        AST::UiImport *node = 0;
+
+        if (AST::StringLiteral *importIdLiteral = AST::cast<AST::StringLiteral *>(sym(2).Expression)) {
+            node = new (pool) AST::UiImport(importIdLiteral->value);
+            node->fileNameToken = loc(2);
+        } else if (AST::UiQualifiedId *qualifiedId = reparseAsQualifiedId(sym(2).Expression)) {
+            node = new (pool) AST::UiImport(qualifiedId);
+            node->fileNameToken = loc(2);
+        }
+
+        sym(1).Node = node;
+
+        if (node) {
+            node->importToken = loc(1);
+        } else {
+           diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, loc(1),
+             QLatin1String("Expected a qualified name id or a string literal")));
+
+            return false; // ### remove me
+        }
+    } break;
+
+#line 852 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 26: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 859 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 27: {
+        sym(1).Node = new (pool) AST::UiObjectMemberList(sym(1).UiObjectMember);
+    } break;
+
+#line 866 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 28: {
+        sym(1).Node = new (pool) AST::UiObjectMemberList(sym(1).UiObjectMember);
+    } break;
+
+#line 873 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 29: {
+        AST::UiObjectMemberList *node = new (pool) AST:: UiObjectMemberList(sym(1).UiObjectMemberList, sym(2).UiObjectMember);
+        sym(1).Node = node;
+    } break;
+
+#line 881 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 30: {
+        sym(1).Node = new (pool) AST::UiArrayMemberList(sym(1).UiObjectMember);
+    } break;
+
+#line 888 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 31: {
+        AST::UiArrayMemberList *node = new (pool) AST::UiArrayMemberList(sym(1).UiArrayMemberList, sym(3).UiObjectMember);
+        node->commaToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 897 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 32: {
+        AST::UiObjectInitializer *node = new (pool) AST::UiObjectInitializer((AST::UiObjectMemberList*)0);
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 907 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 33: {
+        AST::UiObjectInitializer *node = new (pool) AST::UiObjectInitializer(sym(2).UiObjectMemberList->finish());
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 917 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 34: {
+        AST::UiObjectDefinition *node = new (pool) AST::UiObjectDefinition(sym(1).UiQualifiedId, sym(2).UiObjectInitializer);
+        sym(1).Node = node;
+    } break;
+
+#line 927 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 36: {
+        AST::UiArrayBinding *node = new (pool) AST::UiArrayBinding(sym(1).UiQualifiedId, sym(5).UiArrayMemberList->finish());
+        node->colonToken = loc(2);
+        node->lbracketToken = loc(4);
+        node->rbracketToken = loc(6);
+        sym(1).Node = node;
+    } break;
+
+#line 938 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 37: {
+        AST::UiObjectBinding *node = new (pool) AST::UiObjectBinding(
+            sym(1).UiQualifiedId, sym(4).UiQualifiedId, sym(5).UiObjectInitializer);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 948 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 38: {
+        AST::UiObjectBinding *node = new (pool) AST::UiObjectBinding(
+          sym(3).UiQualifiedId, sym(1).UiQualifiedId, sym(4).UiObjectInitializer);
+        node->colonToken = loc(2);
+        node->hasOnToken = true;
+        sym(1).Node = node;
+    } break;
+
+#line 960 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 39: Q_FALLTHROUGH(); 
+#line 962 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 40: {
+        AST::ObjectPattern *l = new (pool) AST::ObjectPattern(sym(3).PatternPropertyList->finish());
+        l->lbraceToken = loc(1);
+        l->rbraceToken = loc(4);
+        AST::ExpressionStatement *node = new (pool) AST::ExpressionStatement(l);
+        sym(1).Node = node;
+    } break;
+
+#line 974 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 41: Q_FALLTHROUGH(); 
+#line 976 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 42: Q_FALLTHROUGH(); 
+#line 978 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 43: {
+        sym(1).Node = sym(3).Node;
+    } break;
+
+#line 986 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 44: Q_FALLTHROUGH(); 
+#line 988 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 45: Q_FALLTHROUGH(); 
+#line 990 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 46: Q_FALLTHROUGH(); 
+#line 992 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 47: Q_FALLTHROUGH(); 
+#line 994 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 48: Q_FALLTHROUGH(); 
+#line 996 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 49: {
+        sym(1).Node = sym(2).Node;
+    } break;
+
+#line 1003 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+case 50:
+{
+    AST::UiScriptBinding *node = new (pool) AST::UiScriptBinding(sym(1).UiQualifiedId, sym(3).Statement);
+    node->colonToken = loc(2);
+    sym(1).Node = node;
+    } break;
+
+#line 1013 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 51: Q_FALLTHROUGH(); 
+#line 1015 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 52: Q_FALLTHROUGH(); 
+#line 1017 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 53: {
+        AST::UiQualifiedId *node = new (pool) AST::UiQualifiedId(stringRef(1));
+        node->identifierToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1026 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 54: {
+        AST::UiQualifiedId *node = new (pool) AST::UiQualifiedId(sym(1).UiQualifiedId, stringRef(3));
+        node->identifierToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 1035 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 55: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 1042 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 56: {
+        sym(1).Node = sym(1).UiParameterList->finish();
+    } break;
+
+#line 1049 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 57: {
+        AST::UiParameterList *node = new (pool) AST::UiParameterList(sym(1).UiQualifiedId->finish(), stringRef(2));
+        node->propertyTypeToken = loc(1);
+        node->identifierToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 1059 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 58: {
+        AST::UiParameterList *node = new (pool) AST::UiParameterList(sym(1).UiParameterList, sym(3).UiQualifiedId->finish(), stringRef(4));
+        node->propertyTypeToken = loc(3);
+        node->commaToken = loc(2);
+        node->identifierToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 1071 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 60: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(nullptr, stringRef(2));
+        node->type = AST::UiPublicMember::Signal;
+        node->propertyToken = loc(1);
+        node->typeToken = loc(2);
+        node->identifierToken = loc(2);
+        node->parameters = sym(4).UiParameterList;
+        node->semicolonToken = loc(6);
+        sym(1).Node = node;
+    } break;
+
+#line 1086 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 62: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(nullptr, stringRef(2));
+        node->type = AST::UiPublicMember::Signal;
+        node->propertyToken = loc(1);
+        node->typeToken = loc(2);
+        node->identifierToken = loc(2);
+        node->semicolonToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 1100 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 64: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(4).UiQualifiedId->finish(), stringRef(6));
+        node->typeModifier = stringRef(2);
+        node->propertyToken = loc(1);
+        node->typeModifierToken = loc(2);
+        node->typeToken = loc(4);
+        node->identifierToken = loc(6);
+        node->semicolonToken = loc(7);
+        sym(1).Node = node;
+    } break;
+
+#line 1115 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 66: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(2).UiQualifiedId->finish(), stringRef(3));
+        node->propertyToken = loc(1);
+        node->typeToken = loc(2);
+        node->identifierToken = loc(3);
+        node->semicolonToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 1128 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 68: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(3).UiQualifiedId->finish(), stringRef(4));
+        node->isDefaultMember = true;
+        node->defaultToken = loc(1);
+        node->propertyToken = loc(2);
+        node->typeToken = loc(3);
+        node->identifierToken = loc(4);
+        node->semicolonToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 1143 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 70: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(5).UiQualifiedId->finish(), stringRef(7));
+        node->isDefaultMember = true;
+        node->defaultToken = loc(1);
+        node->typeModifier = stringRef(3);
+        node->propertyToken = loc(2);
+        node->typeModifierToken = loc(2);
+        node->typeToken = loc(4);
+        node->identifierToken = loc(7);
+        node->semicolonToken = loc(8);
+        sym(1).Node = node;
+    } break;
+
+#line 1159 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 71: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(2).UiQualifiedId->finish(), stringRef(3), sym(5).Statement);
+        node->propertyToken = loc(1);
+        node->typeToken = loc(2);
+        node->identifierToken = loc(3);
+        node->colonToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 1171 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 72: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(3).UiQualifiedId->finish(), stringRef(4), sym(6).Statement);
+        node->isReadonlyMember = true;
+        node->readonlyToken = loc(1);
+        node->propertyToken = loc(2);
+        node->typeToken = loc(3);
+        node->identifierToken = loc(4);
+        node->colonToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 1185 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 73: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(3).UiQualifiedId->finish(), stringRef(4), sym(6).Statement);
+        node->isDefaultMember = true;
+        node->defaultToken = loc(1);
+        node->propertyToken = loc(2);
+        node->typeToken = loc(3);
+        node->identifierToken = loc(4);
+        node->colonToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 1199 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 74: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(4).UiQualifiedId->finish(), stringRef(6));
+        node->typeModifier = stringRef(2);
+        node->propertyToken = loc(1);
+        node->typeModifierToken = loc(2);
+        node->typeToken = loc(4);
+        node->identifierToken = loc(6);
+        node->semicolonToken = loc(7); // insert a fake ';' before ':'
+
+        AST::UiQualifiedId *propertyName = new (pool) AST::UiQualifiedId(stringRef(6));
+        propertyName->identifierToken = loc(6);
+        propertyName->next = 0;
+
+        AST::UiArrayBinding *binding = new (pool) AST::UiArrayBinding(propertyName, sym(9).UiArrayMemberList->finish());
+        binding->colonToken = loc(7);
+        binding->lbracketToken = loc(8);
+        binding->rbracketToken = loc(10);
+
+        node->binding = binding;
+
+        sym(1).Node = node;
+    } break;
+
+#line 1225 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 75: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(2).UiQualifiedId->finish(), stringRef(3));
+        node->propertyToken = loc(1);
+        node->typeToken = loc(2);
+        node->identifierToken = loc(3);
+        node->semicolonToken = loc(4); // insert a fake ';' before ':'
+
+        AST::UiQualifiedId *propertyName = new (pool) AST::UiQualifiedId(stringRef(3));
+        propertyName->identifierToken = loc(3);
+        propertyName->next = 0;
+
+        AST::UiObjectBinding *binding = new (pool) AST::UiObjectBinding(
+          propertyName, sym(6).UiQualifiedId, sym(7).UiObjectInitializer);
+        binding->colonToken = loc(4);
+
+        node->binding = binding;
+
+        sym(1).Node = node;
+    } break;
+
+#line 1248 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 76: {
+        AST::UiPublicMember *node = new (pool) AST::UiPublicMember(sym(3).UiQualifiedId->finish(), stringRef(4));
+        node->isReadonlyMember = true;
+        node->readonlyToken = loc(1);
+        node->propertyToken = loc(2);
+        node->typeToken = loc(3);
+        node->identifierToken = loc(4);
+        node->semicolonToken = loc(5); // insert a fake ';' before ':'
+
+        AST::UiQualifiedId *propertyName = new (pool) AST::UiQualifiedId(stringRef(4));
+        propertyName->identifierToken = loc(4);
+        propertyName->next = 0;
+
+        AST::UiObjectBinding *binding = new (pool) AST::UiObjectBinding(
+          propertyName, sym(7).UiQualifiedId, sym(8).UiObjectInitializer);
+        binding->colonToken = loc(5);
+
+        node->binding = binding;
+
+        sym(1).Node = node;
+    } break;
+
+#line 1273 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 77: {
+        sym(1).Node = new (pool) AST::UiSourceElement(sym(1).Node);
+    } break;
+
+#line 1280 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 78: {
+        sym(1).Node = new (pool) AST::UiSourceElement(sym(1).Node);
+    } break;
+
+#line 1287 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 79: {
+      if (AST::ArrayMemberExpression *mem = AST::cast<AST::ArrayMemberExpression *>(sym(1).Expression)) {
+        diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Warning, mem->lbracketToken,
+          QLatin1String("Ignored annotation")));
+
+        sym(1).Expression = mem->base;
+      }
+
+      if (AST::UiQualifiedId *qualifiedId = reparseAsQualifiedId(sym(1).Expression)) {
+        sym(1).UiQualifiedId = qualifiedId;
+      } else {
+        sym(1).UiQualifiedId = 0;
+
+        diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, loc(1),
+          QLatin1String("Expected a qualified name id")));
+
+        return false; // ### recover
+      }
+    } break;
+
+#line 1310 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 80: {
+        AST::UiEnumDeclaration *enumDeclaration = new (pool) AST::UiEnumDeclaration(stringRef(2), sym(4).UiEnumMemberList->finish());
+        enumDeclaration->enumToken = loc(1);
+        enumDeclaration->rbraceToken = loc(5);
+        sym(1).Node = enumDeclaration;
+        break;
+    }
+
+#line 1321 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 81: {
+        AST::UiEnumMemberList *node = new (pool) AST::UiEnumMemberList(stringRef(1));
+        node->memberToken = loc(1);
+        sym(1).Node = node;
+        break;
+    }
+
+#line 1331 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 82: {
+        AST::UiEnumMemberList *node = new (pool) AST::UiEnumMemberList(stringRef(1), sym(3).dval);
+        node->memberToken = loc(1);
+        node->valueToken = loc(3);
+        sym(1).Node = node;
+        break;
+    }
+
+#line 1342 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 83: {
+        AST::UiEnumMemberList *node = new (pool) AST::UiEnumMemberList(sym(1).UiEnumMemberList, stringRef(3));
+        node->memberToken = loc(3);
+        sym(1).Node = node;
+        break;
+    }
+
+#line 1352 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 84: {
+        AST::UiEnumMemberList *node = new (pool) AST::UiEnumMemberList(sym(1).UiEnumMemberList, stringRef(3), sym(5).dval);
+        node->memberToken = loc(3);
+        node->valueToken = loc(5);
+        sym(1).Node = node;
+        break;
+    }
+
+#line 1392 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 107: {
+        AST::ThisExpression *node = new (pool) AST::ThisExpression();
+        node->thisToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1401 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 108: {
+        AST::IdentifierExpression *node = new (pool) AST::IdentifierExpression(stringRef(1));
+        node->identifierToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1419 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 117: {
+        if (coverExpressionType != CE_ParenthesizedExpression) {
+            syntaxError(coverExpressionErrorLocation, "Expected token ')'.");
+            return false;
+        }
+    } break;
+
+#line 1430 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 118: {
+        AST::NestedExpression *node = new (pool) AST::NestedExpression(sym(2).Expression);
+        node->lparenToken = loc(1);
+        node->rparenToken = loc(3);
+        sym(1).Node = node;
+        coverExpressionType = CE_ParenthesizedExpression;
+    } break;
+
+#line 1441 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 119: {
+        sym(1).Node = nullptr;
+        coverExpressionErrorLocation = loc(2);
+        coverExpressionType = CE_FormalParameterList;
+    } break;
+
+#line 1450 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 120: {
+        AST::FormalParameterList *node = (new (pool) AST::FormalParameterList(nullptr, sym(2).PatternElement))->finish(pool);
+        sym(1).Node = node;
+        coverExpressionErrorLocation = loc(2);
+        coverExpressionType = CE_FormalParameterList;
+    } break;
+
+#line 1460 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 121: {
+        AST::FormalParameterList *list = sym(2).Expression->reparseAsFormalParameterList(pool);
+        if (!list) {
+            syntaxError(loc(1), "Invalid Arrow parameter list.");
+            return false;
+        }
+        if (sym(4).Node) {
+            list = new (pool) AST::FormalParameterList(list, sym(4).PatternElement);
+        }
+        coverExpressionErrorLocation = loc(4);
+        coverExpressionType = CE_FormalParameterList;
+        sym(1).Node = list->finish(pool);
+    } break;
+
+#line 1477 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 122: {
+        AST::NullExpression *node = new (pool) AST::NullExpression();
+        node->nullToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1486 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 123: {
+        AST::TrueLiteral *node = new (pool) AST::TrueLiteral();
+        node->trueToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1495 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 124: {
+        AST::FalseLiteral *node = new (pool) AST::FalseLiteral();
+        node->falseToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1504 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 125: {
+        AST::NumericLiteral *node = new (pool) AST::NumericLiteral(sym(1).dval);
+        node->literalToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1513 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 126: Q_FALLTHROUGH(); 
+#line 1516 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 127: {
+        AST::StringLiteral *node = new (pool) AST::StringLiteral(stringRef(1));
+        node->literalToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1528 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+{
+    Lexer::RegExpBodyPrefix prefix;
+    case 128:
+        prefix = Lexer::NoPrefix;
+        goto scan_regexp;
+
+#line 1540 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 129:
+        prefix = Lexer::EqualPrefix;
+        goto scan_regexp;
+
+    scan_regexp: {
+        bool rx = lexer->scanRegExp(prefix);
+        if (!rx) {
+            diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, location(lexer), lexer->errorMessage()));
+            return false;
+        }
+
+        loc(1).length = lexer->tokenLength();
+        yylloc = loc(1); // adjust the location of the current token
+
+        AST::RegExpLiteral *node = new (pool) AST::RegExpLiteral(driver->newStringRef(lexer->regExpPattern()), lexer->regExpFlags());
+        node->literalToken = loc(1);
+        sym(1).Node = node;
+    } break;
+}
+
+#line 1564 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 130: {
+        AST::PatternElementList *list = nullptr;
+        if (sym(2).Elision)
+            list = (new (pool) AST::PatternElementList(sym(2).Elision, nullptr))->finish();
+        AST::ArrayPattern *node = new (pool) AST::ArrayPattern(list);
+        node->lbracketToken = loc(1);
+        node->rbracketToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 1577 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 131: {
+        AST::ArrayPattern *node = new (pool) AST::ArrayPattern(sym(2).PatternElementList->finish());
+        node->lbracketToken = loc(1);
+        node->rbracketToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 1587 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 132: {
+        auto *list = sym(2).PatternElementList;
+        if (sym(4).Elision) {
+            AST::PatternElementList *l = new (pool) AST::PatternElementList(sym(4).Elision, nullptr);
+            list = list->append(l);
+        }
+        AST::ArrayPattern *node = new (pool) AST::ArrayPattern(list->finish());
+        node->lbracketToken = loc(1);
+        node->commaToken = loc(3);
+        node->rbracketToken = loc(5);
+        sym(1).Node = node;
+        Q_ASSERT(node->isValidArrayLiteral());
+    } break;
+
+#line 1604 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 133: {
+        AST::PatternElement *e = new (pool) AST::PatternElement(sym(1).Expression);
+        sym(1).Node = new (pool) AST::PatternElementList(nullptr, e);
+    } break;
+
+#line 1612 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 134: {
+        AST::PatternElement *e = new (pool) AST::PatternElement(sym(2).Expression);
+        sym(1).Node = new (pool) AST::PatternElementList(sym(1).Elision->finish(), e);
+    } break;
+
+#line 1620 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 135: {
+        AST::PatternElementList *node = new (pool) AST::PatternElementList(sym(1).Elision, sym(2).PatternElement);
+        sym(1).Node = node;
+    } break;
+
+#line 1628 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 136: {
+        AST::PatternElement *e = new (pool) AST::PatternElement(sym(4).Expression);
+        AST::PatternElementList *node = new (pool) AST::PatternElementList(sym(3).Elision, e);
+        sym(1).Node = sym(1).PatternElementList->append(node);
+    } break;
+
+#line 1637 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 137: {
+        AST::PatternElementList *node = new (pool) AST::PatternElementList(sym(3).Elision, sym(4).PatternElement);
+        sym(1).Node = sym(1).PatternElementList->append(node);
+    } break;
+
+#line 1645 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 138: {
+        AST::Elision *node = new (pool) AST::Elision();
+        node->commaToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1654 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 139: {
+        AST::Elision *node = new (pool) AST::Elision(sym(1).Elision);
+        node->commaToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 1663 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 140: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 1670 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 141: {
+        sym(1).Node = sym(1).Elision->finish();
+    } break;
+
+#line 1677 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 142: {
+        AST::PatternElement *node = new (pool) AST::PatternElement(sym(2).Expression, AST::PatternElement::SpreadElement);
+        sym(1).Node = node;
+    } break;
+
+#line 1685 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 143: {
+        AST::ObjectPattern *node = new (pool) AST::ObjectPattern();
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 1695 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 144: {
+        AST::ObjectPattern *node = new (pool) AST::ObjectPattern(sym(2).PatternPropertyList->finish());
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 1705 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 145: {
+        AST::ObjectPattern *node = new (pool) AST::ObjectPattern(sym(2).PatternPropertyList->finish());
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 1716 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 146: Q_FALLTHROUGH(); 
+#line 1718 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 147: {
+      sym(1).Node = new (pool) AST::PatternPropertyList(sym(1).PatternProperty);
+    } break;
+
+#line 1725 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 148: Q_FALLTHROUGH(); 
+#line 1727 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 149: {
+        AST::PatternPropertyList *node = new (pool) AST::PatternPropertyList(sym(1).PatternPropertyList, sym(3).PatternProperty);
+        sym(1).Node = node;
+    } break;
+
+#line 1735 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 150: {
+        AST::IdentifierPropertyName *name = new (pool) AST::IdentifierPropertyName(stringRef(1));
+        name->propertyNameToken = loc(1);
+        AST::IdentifierExpression *expr = new (pool) AST::IdentifierExpression(stringRef(1));
+        expr->identifierToken = loc(1);
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(name, expr);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 1751 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 152: {
+        AST::IdentifierPropertyName *name = new (pool) AST::IdentifierPropertyName(stringRef(1));
+        name->propertyNameToken = loc(1);
+        AST::IdentifierExpression *left = new (pool) AST::IdentifierExpression(stringRef(1));
+        left->identifierToken = loc(1);
+        // if initializer is an anonymous function expression, we need to assign identifierref as it's name
+        if (auto *f = asAnonymousFunctionDefinition(sym(2).Expression))
+            f->name = stringRef(1);
+        if (auto *c = asAnonymousClassDefinition(sym(2).Expression))
+            c->name = stringRef(1);
+        AST::BinaryExpression *assignment = new (pool) AST::BinaryExpression(left, QSOperator::Assign, sym(2).Expression);
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(name, assignment);
+        node->colonToken = loc(1);
+        sym(1).Node = node;
+
+    } break;
+
+#line 1771 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 153: Q_FALLTHROUGH(); 
+#line 1773 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 154: {
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(1).PropertyName, sym(3).Expression);
+        if (auto *c = asAnonymousClassDefinition(sym(3).Expression)) {
+            if (!AST::cast<AST::ComputedPropertyName *>(sym(1).PropertyName))
+                c->name = driver->newStringRef(sym(1).PropertyName->asString());
+        }
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 1791 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 158: {
+        AST::IdentifierPropertyName *node = new (pool) AST::IdentifierPropertyName(stringRef(1));
+        node->propertyNameToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1800 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 159: Q_FALLTHROUGH(); 
+#line 1802 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 160: {
+        AST::StringLiteralPropertyName *node = new (pool) AST::StringLiteralPropertyName(stringRef(1));
+        node->propertyNameToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1811 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 161: Q_FALLTHROUGH(); 
+#line 1813 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 162: {
+        AST::NumericLiteralPropertyName *node = new (pool) AST::NumericLiteralPropertyName(sym(1).dval);
+        node->propertyNameToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1864 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 203: {
+        AST::ComputedPropertyName *node = new (pool) AST::ComputedPropertyName(sym(2).Expression);
+        node->propertyNameToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1873 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 204: Q_FALLTHROUGH(); 
+#line 1875 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+case 205: {
+    sym(1) = sym(2);
+} break;
+
+#line 1883 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 206: Q_FALLTHROUGH(); 
+#line 1885 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 207: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 1895 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 210: Q_FALLTHROUGH(); 
+#line 1898 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 211: {
+        AST::TemplateLiteral *node = new (pool) AST::TemplateLiteral(stringRef(1), rawStringRef(1), nullptr);
+        node->literalToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1907 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 212: Q_FALLTHROUGH(); 
+#line 1910 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 213: {
+        AST::TemplateLiteral *node = new (pool) AST::TemplateLiteral(stringRef(1), rawStringRef(1), sym(2).Expression);
+        node->next = sym(3).Template;
+        node->literalToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1923 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 215: {
+        AST::SuperLiteral *node = new (pool) AST::SuperLiteral();
+        node->superToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1933 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 216: Q_FALLTHROUGH(); 
+#line 1935 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 217: {
+        AST::ArrayMemberExpression *node = new (pool) AST::ArrayMemberExpression(sym(1).Expression, sym(3).Expression);
+        node->lbracketToken = loc(2);
+        node->rbracketToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 1947 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 218:
+    {
+        AST::IdentifierExpression *node = new (pool) AST::IdentifierExpression(stringRef(1));
+        node->identifierToken= loc(1);
+        sym(1).Node = node;
+    } Q_FALLTHROUGH();
+
+#line 1955 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 219: Q_FALLTHROUGH(); 
+#line 1957 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 220: {
+        AST::FieldMemberExpression *node = new (pool) AST::FieldMemberExpression(sym(1).Expression, stringRef(3));
+        node->dotToken = loc(2);
+        node->identifierToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 1969 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 222: {
+        AST::NewMemberExpression *node = new (pool) AST::NewMemberExpression(sym(2).Expression, sym(4).ArgumentList);
+        node->newToken = loc(1);
+        node->lparenToken = loc(3);
+        node->rparenToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 1985 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 225: {
+        AST::NewExpression *node = new (pool) AST::NewExpression(sym(2).Expression);
+        node->newToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 1995 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 226: Q_FALLTHROUGH(); 
+#line 1997 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 227: {
+        AST::TaggedTemplate *node = new (pool) AST::TaggedTemplate(sym(1).Expression, sym(2).Template);
+        sym(1).Node = node;
+    } break;
+
+#line 2005 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 228: {
+        AST::CallExpression *node = new (pool) AST::CallExpression(sym(1).Expression, sym(3).ArgumentList);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 2015 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 229: Q_FALLTHROUGH(); 
+#line 2017 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 230: {
+        AST::CallExpression *node = new (pool) AST::CallExpression(sym(1).Expression, sym(3).ArgumentList);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 2027 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 231: {
+        AST::ArrayMemberExpression *node = new (pool) AST::ArrayMemberExpression(sym(1).Expression, sym(3).Expression);
+        node->lbracketToken = loc(2);
+        node->rbracketToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 2037 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 232: {
+        AST::FieldMemberExpression *node = new (pool) AST::FieldMemberExpression(sym(1).Expression, stringRef(3));
+        node->dotToken = loc(2);
+        node->identifierToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 2047 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 233: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 2054 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 234: Q_FALLTHROUGH(); 
+#line 2056 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 235: {
+        sym(1).Node = sym(1).ArgumentList->finish();
+    } break;
+
+#line 2063 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 236: {
+        sym(1).Node = new (pool) AST::ArgumentList(sym(1).Expression);
+    } break;
+
+#line 2070 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 237: {
+        AST::ArgumentList *node = new (pool) AST::ArgumentList(sym(2).Expression);
+        node->isSpreadElement = true;
+        sym(1).Node = node;
+    } break;
+
+#line 2079 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 238: {
+        AST::ArgumentList *node = new (pool) AST::ArgumentList(sym(1).ArgumentList, sym(3).Expression);
+        node->commaToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2088 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 239: {
+        AST::ArgumentList *node = new (pool) AST::ArgumentList(sym(1).ArgumentList, sym(4).Expression);
+        node->commaToken = loc(2);
+        node->isSpreadElement = true;
+        sym(1).Node = node;
+    } break;
+
+#line 2103 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 243: {
+        AST::PostIncrementExpression *node = new (pool) AST::PostIncrementExpression(sym(1).Expression);
+        node->incrementToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2112 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 244: {
+        AST::PostDecrementExpression *node = new (pool) AST::PostDecrementExpression(sym(1).Expression);
+        node->decrementToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2121 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 245: {
+        AST::PreIncrementExpression *node = new (pool) AST::PreIncrementExpression(sym(2).Expression);
+        node->incrementToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2130 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 246: {
+        AST::PreDecrementExpression *node = new (pool) AST::PreDecrementExpression(sym(2).Expression);
+        node->decrementToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2141 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 248: {
+        AST::DeleteExpression *node = new (pool) AST::DeleteExpression(sym(2).Expression);
+        node->deleteToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2150 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 249: {
+        AST::VoidExpression *node = new (pool) AST::VoidExpression(sym(2).Expression);
+        node->voidToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2159 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 250: {
+        AST::TypeOfExpression *node = new (pool) AST::TypeOfExpression(sym(2).Expression);
+        node->typeofToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2168 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 251: {
+        AST::UnaryPlusExpression *node = new (pool) AST::UnaryPlusExpression(sym(2).Expression);
+        node->plusToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2177 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 252: {
+        AST::UnaryMinusExpression *node = new (pool) AST::UnaryMinusExpression(sym(2).Expression);
+        node->minusToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2186 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 253: {
+        AST::TildeExpression *node = new (pool) AST::TildeExpression(sym(2).Expression);
+        node->tildeToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2195 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 254: {
+        AST::NotExpression *node = new (pool) AST::NotExpression(sym(2).Expression);
+        node->notToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2206 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 256: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::Exp, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2217 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 258: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, sym(2).ival, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2226 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 259: {
+        sym(1).ival = QSOperator::Mul;
+    } break;
+
+#line 2233 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 260: {
+        sym(1).ival = QSOperator::Div;
+    } break;
+
+#line 2240 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 261: {
+        sym(1).ival = QSOperator::Mod;
+    } break;
+
+#line 2249 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 263: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::Add, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2258 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 264: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::Sub, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2269 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 266: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::LShift, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2278 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 267: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::RShift, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2287 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 268: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::URShift, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2299 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 271: Q_FALLTHROUGH(); 
+#line 2301 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 272: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, sym(2).ival, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2310 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 273: {
+        sym(1).ival = QSOperator::Lt;
+    } break;
+
+#line 2316 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 274: {
+        sym(1).ival = QSOperator::Gt;
+    } break;
+
+#line 2322 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 275: {
+        sym(1).ival = QSOperator::Le;
+    } break;
+
+#line 2328 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 276: {
+        sym(1).ival = QSOperator::Ge;
+    } break;
+
+#line 2334 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 277: {
+        sym(1).ival = QSOperator::InstanceOf;
+    } break;
+
+#line 2341 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 278: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::In, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2353 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 281: Q_FALLTHROUGH(); 
+#line 2355 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 282: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, sym(2).ival, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2364 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 283: {
+        sym(1).ival = QSOperator::Equal;
+    } break;
+
+#line 2370 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 284: {
+        sym(1).ival = QSOperator::NotEqual;
+    } break;
+
+#line 2376 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 285: {
+        sym(1).ival = QSOperator::StrictEqual;
+    } break;
+
+#line 2382 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 286: {
+        sym(1).ival = QSOperator::StrictNotEqual;
+    } break;
+
+#line 2393 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 289: Q_FALLTHROUGH(); 
+#line 2395 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 290: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::BitAnd, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2408 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 293: Q_FALLTHROUGH(); 
+#line 2410 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 294: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::BitXor, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2422 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 297: Q_FALLTHROUGH(); 
+#line 2424 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 298: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::BitOr, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2436 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 301: Q_FALLTHROUGH(); 
+#line 2438 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 302: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::And, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2450 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 305: Q_FALLTHROUGH(); 
+#line 2452 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 306: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::Or, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2465 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 309: Q_FALLTHROUGH(); 
+#line 2467 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 310: {
+        AST::ConditionalExpression *node = new (pool) AST::ConditionalExpression(sym(1).Expression, sym(3).Expression, sym(5).Expression);
+        node->questionToken = loc(2);
+        node->colonToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 2486 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 317: Q_FALLTHROUGH(); 
+#line 2488 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 318: {
+        // need to convert the LHS to an AssignmentPattern if it was an Array/ObjectLiteral
+        if (AST::Pattern *p = sym(1).Expression->patternCast()) {
+            AST::SourceLocation errorLoc;
+            QString errorMsg;
+            if (!p->convertLiteralToAssignmentPattern(pool, &errorLoc, &errorMsg)) {
+                syntaxError(errorLoc, errorMsg);
+                return false;
+            }
+        }
+        // if lhs is an identifier expression and rhs is an anonymous function expression, we need to assign the name of lhs to the function
+        if (auto *f = asAnonymousFunctionDefinition(sym(3).Expression)) {
+            if (auto *id = AST::cast<AST::IdentifierExpression *>(sym(1).Expression))
+                f->name = id->name;
+        }
+        if (auto *c = asAnonymousClassDefinition(sym(3).Expression)) {
+            if (auto *id = AST::cast<AST::IdentifierExpression *>(sym(1).Expression))
+                c->name = id->name;
+        }
+
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, QSOperator::Assign, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2516 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 319: Q_FALLTHROUGH(); 
+#line 2518 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 320: {
+        AST::BinaryExpression *node = new (pool) AST::BinaryExpression(sym(1).Expression, sym(2).ival, sym(3).Expression);
+        node->operatorToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2527 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 321: {
+        sym(1).ival = QSOperator::InplaceMul;
+    } break;
+
+#line 2534 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 322: {
+        sym(1).ival = QSOperator::InplaceExp;
+    } break;
+
+#line 2541 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 323: {
+        sym(1).ival = QSOperator::InplaceDiv;
+    } break;
+
+#line 2548 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 324: {
+        sym(1).ival = QSOperator::InplaceMod;
+    } break;
+
+#line 2555 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 325: {
+        sym(1).ival = QSOperator::InplaceAdd;
+    } break;
+
+#line 2562 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 326: {
+        sym(1).ival = QSOperator::InplaceSub;
+    } break;
+
+#line 2569 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 327: {
+        sym(1).ival = QSOperator::InplaceLeftShift;
+    } break;
+
+#line 2576 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 328: {
+        sym(1).ival = QSOperator::InplaceRightShift;
+    } break;
+
+#line 2583 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 329: {
+        sym(1).ival = QSOperator::InplaceURightShift;
+    } break;
+
+#line 2590 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 330: {
+        sym(1).ival = QSOperator::InplaceAnd;
+    } break;
+
+#line 2597 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 331: {
+        sym(1).ival = QSOperator::InplaceXor;
+    } break;
+
+#line 2604 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 332: {
+        sym(1).ival = QSOperator::InplaceOr;
+    } break;
+
+#line 2614 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 335: Q_FALLTHROUGH(); 
+#line 2616 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 336: {
+          AST::Expression *node = new (pool) AST::Expression(sym(1).Expression, sym(3).Expression);
+          node->commaToken = loc(2);
+          sym(1).Node = node;
+    } break;
+
+#line 2625 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 337: Q_FALLTHROUGH(); 
+#line 2627 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 338: {
+      sym(1).Node = nullptr;
+    } break;
+
+#line 2639 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 341: {
+        sym(1).Node = sym(3).Node;
+    } break;
+
+#line 2646 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 342: Q_FALLTHROUGH(); 
+#line 2648 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 343: Q_FALLTHROUGH(); 
+#line 2650 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 344: Q_FALLTHROUGH(); 
+#line 2652 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 345: Q_FALLTHROUGH(); 
+#line 2654 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 346: Q_FALLTHROUGH(); 
+#line 2656 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 347: Q_FALLTHROUGH(); 
+#line 2658 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 348: Q_FALLTHROUGH(); 
+#line 2660 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 349: Q_FALLTHROUGH(); 
+#line 2662 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 350: Q_FALLTHROUGH(); 
+#line 2664 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 351: Q_FALLTHROUGH(); 
+#line 2666 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 352: Q_FALLTHROUGH(); 
+#line 2668 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 353: Q_FALLTHROUGH(); 
+#line 2670 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 354: {
+        sym(1).Node = sym(2).Node;
+    } break;
+
+#line 2692 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 365: {
+        AST::Block *node = new (pool) AST::Block(sym(2).StatementList);
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 2704 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 367: {
+        sym(1).StatementList = sym(1).StatementList->append(sym(2).StatementList);
+    } break;
+
+#line 2711 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 368: {
+        sym(1).StatementList = new (pool) AST::StatementList(sym(1).Statement);
+    } break;
+
+#line 2719 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 370: {
+        sym(1).Node = new (pool) AST::StatementList(sym(3).FunctionDeclaration);
+    } break;
+
+#line 2726 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 371: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 2733 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 372: {
+        sym(1).Node = sym(1).StatementList->finish();
+    } break;
+
+#line 2740 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 373: {
+        sym(1).scope = AST::VariableScope::Let;
+    } break;
+
+#line 2746 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 374: {
+        sym(1).scope = AST::VariableScope::Const;
+    } break;
+
+#line 2753 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 375: {
+        sym(1).scope = AST::VariableScope::Var;
+    } break;
+
+#line 2760 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 376: Q_FALLTHROUGH(); 
+#line 2762 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 377: Q_FALLTHROUGH(); 
+#line 2764 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 378: Q_FALLTHROUGH(); 
+#line 2766 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 379: {
+        AST::VariableStatement *node = new (pool) AST::VariableStatement(sym(2).VariableDeclarationList->finish(sym(1).scope));
+        node->declarationKindToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2778 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 382: Q_FALLTHROUGH(); 
+#line 2780 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 383: Q_FALLTHROUGH(); 
+#line 2782 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 384: Q_FALLTHROUGH(); 
+#line 2784 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 385: {
+  sym(1).Node = new (pool) AST::VariableDeclarationList(sym(1).PatternElement);
+    } break;
+
+#line 2791 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 386: Q_FALLTHROUGH(); 
+#line 2793 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 387: Q_FALLTHROUGH(); 
+#line 2795 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 388: Q_FALLTHROUGH(); 
+#line 2797 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 389: {
+        AST::VariableDeclarationList *node = new (pool) AST::VariableDeclarationList(sym(1).VariableDeclarationList, sym(3).PatternElement);
+        node->commaToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 2806 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 390: Q_FALLTHROUGH(); 
+#line 2808 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 391: Q_FALLTHROUGH(); 
+#line 2810 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 392: Q_FALLTHROUGH(); 
+#line 2812 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 393: {
+        auto *node = new (pool) AST::PatternElement(stringRef(1), sym(2).Expression);
+        node->identifierToken = loc(1);
+        sym(1).Node = node;
+        // if initializer is an anonymous function expression, we need to assign identifierref as it's name
+        if (auto *f = asAnonymousFunctionDefinition(sym(2).Expression))
+            f->name = stringRef(1);
+        if (auto *c = asAnonymousClassDefinition(sym(2).Expression))
+            c->name = stringRef(1);
+    } break;
+
+#line 2826 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 394: Q_FALLTHROUGH(); 
+#line 2828 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 395: Q_FALLTHROUGH(); 
+#line 2830 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 396: Q_FALLTHROUGH(); 
+#line 2832 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 397: {
+        auto *node = new (pool) AST::PatternElement(sym(1).Pattern, sym(2).Expression);
+        node->identifierToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 2841 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 398: {
+        auto *node = new (pool) AST::ObjectPattern(sym(2).PatternPropertyList);
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(3);
+        node->parseMode = AST::Pattern::Binding;
+        sym(1).Node = node;
+    } break;
+
+#line 2852 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 399: {
+        auto *node = new (pool) AST::ArrayPattern(sym(2).PatternElementList);
+        node->lbracketToken = loc(1);
+        node->rbracketToken = loc(3);
+        node->parseMode = AST::Pattern::Binding;
+        sym(1).Node = node;
+    } break;
+
+#line 2863 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 400: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 2870 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 401: 
+#line 2872 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 402: {
+        sym(1).Node = sym(1).PatternPropertyList->finish();
+    } break;
+
+#line 2879 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 403: {
+        if (sym(1).Elision || sym(2).Node) {
+            auto *l = new (pool) AST::PatternElementList(sym(1).Elision, sym(2).PatternElement);
+            sym(1).Node = l->finish();
+        } else {
+            sym(1).Node = nullptr;
+        }
+    } break;
+
+#line 2891 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 404: {
+        sym(1).Node = sym(1).PatternElementList->finish();
+    } break;
+
+#line 2898 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 405: {
+        if (sym(3).Elision || sym(4).Node) {
+            auto *l = new (pool) AST::PatternElementList(sym(3).Elision, sym(4).PatternElement);
+            l = sym(1).PatternElementList->append(l);
+            sym(1).Node = l;
+        }
+        sym(1).Node = sym(1).PatternElementList->finish();
+    } break;
+
+#line 2910 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 406: {
+        sym(1).Node = new (pool) AST::PatternPropertyList(sym(1).PatternProperty);
+    } break;
+
+#line 2917 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 407: {
+        sym(1).Node = new (pool) AST::PatternPropertyList(sym(1).PatternPropertyList, sym(3).PatternProperty);
+    } break;
+
+#line 2926 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 409: {
+        sym(1).PatternElementList = sym(1).PatternElementList->append(sym(3).PatternElementList);
+    } break;
+
+#line 2933 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 410: {
+        sym(1).Node = new (pool) AST::PatternElementList(sym(1).Elision, sym(2).PatternElement);
+    } break;
+
+#line 2941 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 411: {
+        AST::StringLiteralPropertyName *name = new (pool) AST::StringLiteralPropertyName(stringRef(1));
+        name->propertyNameToken = loc(1);
+        // if initializer is an anonymous function expression, we need to assign identifierref as it's name
+        if (auto *f = asAnonymousFunctionDefinition(sym(2).Expression))
+            f->name = stringRef(1);
+        if (auto *c = asAnonymousClassDefinition(sym(2).Expression))
+            c->name = stringRef(1);
+        sym(1).Node = new (pool) AST::PatternProperty(name, stringRef(1), sym(2).Expression);
+    } break;
+
+#line 2955 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 412: {
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(1).PropertyName, stringRef(3), sym(4).Expression);
+        sym(1).Node = node;
+    } break;
+
+#line 2963 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 413: {
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(1).PropertyName, sym(3).Pattern, sym(4).Expression);
+        sym(1).Node = node;
+    } break;
+
+#line 2971 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 414: {
+      AST::PatternElement *node = new (pool) AST::PatternElement(stringRef(1), sym(2).Expression);
+      node->identifierToken = loc(1);
+      // if initializer is an anonymous function expression, we need to assign identifierref as it's name
+      if (auto *f = asAnonymousFunctionDefinition(sym(2).Expression))
+          f->name = stringRef(1);
+      if (auto *c = asAnonymousClassDefinition(sym(2).Expression))
+          c->name = stringRef(1);
+      sym(1).Node = node;
+    } break;
+
+#line 2985 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 415: {
+        AST::PatternElement *node = new (pool) AST::PatternElement(sym(1).Pattern, sym(2).Expression);
+        sym(1).Node = node;
+    } break;
+
+#line 2993 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 416: {
+        AST::PatternElement *node = new (pool) AST::PatternElement(stringRef(2), nullptr, AST::PatternElement::RestElement);
+        node->identifierToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3002 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 417: {
+        AST::PatternElement *node = new (pool) AST::PatternElement(sym(2).Pattern, nullptr, AST::PatternElement::RestElement);
+        sym(1).Node = node;
+    } break;
+
+#line 3010 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 418: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3020 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 420: {
+        AST::EmptyStatement *node = new (pool) AST::EmptyStatement();
+        node->semicolonToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3035 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 421: {
+        int token = lookaheadToken(lexer);
+        if (token == T_LBRACE)
+            pushToken(T_FORCE_BLOCK);
+        else if (token == T_FUNCTION || token == T_CLASS || token == T_LET || token == T_CONST)
+            pushToken(T_FORCE_DECLARATION);
+    } break;
+
+#line 3047 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 423: {
+        AST::ExpressionStatement *node = new (pool) AST::ExpressionStatement(sym(1).Expression);
+        node->semicolonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3056 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 424: {
+        AST::IfStatement *node = new (pool) AST::IfStatement(sym(3).Expression, sym(5).Statement, sym(7).Statement);
+        node->ifToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        node->elseToken = loc(6);
+        sym(1).Node = node;
+    } break;
+
+#line 3068 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 425: {
+        AST::IfStatement *node = new (pool) AST::IfStatement(sym(3).Expression, sym(5).Statement);
+        node->ifToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 3082 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 428: {
+        AST::DoWhileStatement *node = new (pool) AST::DoWhileStatement(sym(2).Statement, sym(5).Expression);
+        node->doToken = loc(1);
+        node->whileToken = loc(3);
+        node->lparenToken = loc(4);
+        node->rparenToken = loc(6);
+        node->semicolonToken = loc(7);
+        sym(1).Node = node;
+    } break;
+
+#line 3095 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 429: {
+        AST::WhileStatement *node = new (pool) AST::WhileStatement(sym(3).Expression, sym(5).Statement);
+        node->whileToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 3106 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 430: {
+        AST::ForStatement *node = new (pool) AST::ForStatement(sym(3).Expression, sym(5).Expression, sym(7).Expression, sym(9).Statement);
+        node->forToken = loc(1);
+        node->lparenToken = loc(2);
+        node->firstSemicolonToken = loc(4);
+        node->secondSemicolonToken = loc(6);
+        node->rparenToken = loc(8);
+        sym(1).Node = node;
+    } break;
+
+#line 3119 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 431: Q_FALLTHROUGH(); 
+#line 3121 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 432: {
+        // ### get rid of the static_cast!
+        AST::ForStatement *node = new (pool) AST::ForStatement(
+          static_cast<AST::VariableStatement *>(sym(3).Node)->declarations, sym(5).Expression,
+          sym(7).Expression, sym(9).Statement);
+        node->forToken = loc(1);
+        node->lparenToken = loc(2);
+        node->firstSemicolonToken = loc(4);
+        node->secondSemicolonToken = loc(6);
+        node->rparenToken = loc(8);
+        sym(1).Node = node;
+    } break;
+
+#line 3137 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 433: {
+        sym(1).forEachType = AST::ForEachType::In;
+    } break;
+
+#line 3144 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 434: {
+        sym(1).forEachType = AST::ForEachType::Of;
+    } break;
+
+#line 3151 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 435: {
+        // need to convert the LHS to an AssignmentPattern if it was an Array/ObjectLiteral
+        if (AST::Pattern *p = sym(3).Expression->patternCast()) {
+            AST::SourceLocation errorLoc;
+            QString errorMsg;
+            if (!p->convertLiteralToAssignmentPattern(pool, &errorLoc, &errorMsg)) {
+                syntaxError(errorLoc, errorMsg);
+                return false;
+            }
+        }
+        AST::ForEachStatement *node = new (pool) AST::ForEachStatement(sym(3).Expression, sym(5).Expression, sym(7).Statement);
+        node->forToken = loc(1);
+        node->lparenToken = loc(2);
+        node->inOfToken = loc(4);
+        node->rparenToken = loc(6);
+        node->type = sym(4).forEachType;
+        sym(1).Node = node;
+    } break;
+
+#line 3173 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 436: {
+        AST::ForEachStatement *node = new (pool) AST::ForEachStatement(sym(3).PatternElement, sym(5).Expression, sym(7).Statement);
+        node->forToken = loc(1);
+        node->lparenToken = loc(2);
+        node->inOfToken = loc(4);
+        node->rparenToken = loc(6);
+        node->type = sym(4).forEachType;
+        sym(1).Node = node;
+    } break;
+
+#line 3186 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 437: Q_FALLTHROUGH(); 
+#line 3188 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 438: {
+        auto *node = new (pool) AST::PatternElement(stringRef(2), nullptr);
+        node->identifierToken = loc(2);
+        node->scope = sym(1).scope;
+        node->isForDeclaration = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3199 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 439: Q_FALLTHROUGH(); 
+#line 3201 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 440: {
+        auto *node = new (pool) AST::PatternElement(sym(2).Pattern, nullptr);
+        node->scope = sym(1).scope;
+        node->isForDeclaration = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3212 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 442: {
+        AST::ContinueStatement *node = new (pool) AST::ContinueStatement();
+        node->continueToken = loc(1);
+        node->semicolonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3223 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 444: {
+        AST::ContinueStatement *node = new (pool) AST::ContinueStatement(stringRef(2));
+        node->continueToken = loc(1);
+        node->identifierToken = loc(2);
+        node->semicolonToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 3235 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 446: {
+        AST::BreakStatement *node = new (pool) AST::BreakStatement(QStringRef());
+        node->breakToken = loc(1);
+        node->semicolonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3246 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 448: {
+        AST::BreakStatement *node = new (pool) AST::BreakStatement(stringRef(2));
+        node->breakToken = loc(1);
+        node->identifierToken = loc(2);
+        node->semicolonToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 3258 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 450: {
+        if (!functionNestingLevel) {
+            syntaxError(loc(1), "Return statement not allowed outside of Function declaration.");
+            return false;
+        }
+        AST::ReturnStatement *node = new (pool) AST::ReturnStatement(sym(2).Expression);
+        node->returnToken = loc(1);
+        node->semicolonToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 3272 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 451: {
+        AST::WithStatement *node = new (pool) AST::WithStatement(sym(3).Expression, sym(5).Statement);
+        node->withToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 3283 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 452: {
+        AST::SwitchStatement *node = new (pool) AST::SwitchStatement(sym(3).Expression, sym(5).CaseBlock);
+        node->switchToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 3294 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 453: {
+        AST::CaseBlock *node = new (pool) AST::CaseBlock(sym(2).CaseClauses);
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 3304 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 454: {
+        AST::CaseBlock *node = new (pool) AST::CaseBlock(sym(2).CaseClauses, sym(3).DefaultClause, sym(4).CaseClauses);
+        node->lbraceToken = loc(1);
+        node->rbraceToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 3314 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 455: {
+        sym(1).Node = new (pool) AST::CaseClauses(sym(1).CaseClause);
+    } break;
+
+#line 3321 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 456: {
+        sym(1).Node = new (pool) AST::CaseClauses(sym(1).CaseClauses, sym(2).CaseClause);
+    } break;
+
+#line 3328 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 457: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3335 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 458: {
+        sym(1).Node = sym(1).CaseClauses->finish();
+    } break;
+
+#line 3342 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 459: {
+        AST::CaseClause *node = new (pool) AST::CaseClause(sym(2).Expression, sym(4).StatementList);
+        node->caseToken = loc(1);
+        node->colonToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 3352 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 460: {
+        AST::DefaultClause *node = new (pool) AST::DefaultClause(sym(3).StatementList);
+        node->defaultToken = loc(1);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3362 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 461: {
+        AST::LabelledStatement *node = new (pool) AST::LabelledStatement(stringRef(1), sym(3).Statement);
+        node->identifierToken = loc(1);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3374 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 463: {
+        syntaxError(loc(3), "FunctionDeclarations are not allowed after a label.");
+        return false;
+    } break;
+
+#line 3383 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 465: {
+        AST::ThrowStatement *node = new (pool) AST::ThrowStatement(sym(2).Expression);
+        node->throwToken = loc(1);
+        node->semicolonToken = loc(3);
+        sym(1).Node = node;
+    } break;
+
+#line 3393 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 466: {
+        AST::TryStatement *node = new (pool) AST::TryStatement(sym(2).Statement, sym(3).Catch);
+        node->tryToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3402 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 467: {
+        AST::TryStatement *node = new (pool) AST::TryStatement(sym(2).Statement, sym(3).Finally);
+        node->tryToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3411 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 468: {
+        AST::TryStatement *node = new (pool) AST::TryStatement(sym(2).Statement, sym(3).Catch, sym(4).Finally);
+        node->tryToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3420 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 469: {
+        AST::Catch *node = new (pool) AST::Catch(sym(3).PatternElement, sym(5).Block);
+        node->catchToken = loc(1);
+        node->lparenToken = loc(2);
+        node->identifierToken = loc(3);
+        node->rparenToken = loc(4);
+        sym(1).Node = node;
+    } break;
+
+#line 3432 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 470: {
+        AST::Finally *node = new (pool) AST::Finally(sym(2).Block);
+        node->finallyToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3441 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 471: {
+        AST::PatternElement *node = new (pool) AST::PatternElement(stringRef(1));
+        node->identifierToken = loc(1);
+        node->scope = AST::VariableScope::Let;
+        sym(1).Node = node;
+    } break;
+
+#line 3451 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 472: {
+        AST::PatternElement *node = new (pool) AST::PatternElement(sym(1).Pattern);
+        node->scope = AST::VariableScope::Let;
+        sym(1).Node = node;
+    } break;
+
+#line 3461 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 474: {
+        AST::DebuggerStatement *node = new (pool) AST::DebuggerStatement();
+        node->debuggerToken = loc(1);
+        node->semicolonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3478 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 476: {
+        AST::FunctionDeclaration *node = new (pool) AST::FunctionDeclaration(stringRef(2), sym(4).FormalParameterList, sym(7).StatementList);
+        node->functionToken = loc(1);
+        node->identifierToken = loc(2);
+        node->lparenToken = loc(3);
+        node->rparenToken = loc(5);
+        node->lbraceToken = loc(6);
+        node->rbraceToken = loc(8);
+        sym(1).Node = node;
+    } break;
+
+#line 3494 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 478: {
+        AST::FunctionDeclaration *node = new (pool) AST::FunctionDeclaration(QStringRef(), sym(3).FormalParameterList, sym(6).StatementList);
+        node->functionToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        node->lbraceToken = loc(5);
+        node->rbraceToken = loc(7);
+        sym(1).Node = node;
+    } break;
+
+#line 3507 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 479: {
+        AST::FunctionExpression *node = new (pool) AST::FunctionExpression(stringRef(2), sym(4).FormalParameterList, sym(7).StatementList);
+        node->functionToken = loc(1);
+        if (! stringRef(2).isNull())
+          node->identifierToken = loc(2);
+        node->lparenToken = loc(3);
+        node->rparenToken = loc(5);
+        node->lbraceToken = loc(6);
+        node->rbraceToken = loc(8);
+        sym(1).Node = node;
+    } break;
+
+#line 3522 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 480: {
+        AST::FunctionExpression *node = new (pool) AST::FunctionExpression(QStringRef(), sym(3).FormalParameterList, sym(6).StatementList);
+        node->functionToken = loc(1);
+        node->lparenToken = loc(2);
+        node->rparenToken = loc(4);
+        node->lbraceToken = loc(5);
+        node->rbraceToken = loc(7);
+        sym(1).Node = node;
+    } break;
+
+#line 3537 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 482: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3544 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 483: {
+        AST::FormalParameterList *node = (new (pool) AST::FormalParameterList(nullptr, sym(1).PatternElement))->finish(pool);
+        sym(1).Node = node;
+    } break;
+
+#line 3552 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 484: 
+#line 3554 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 485: {
+        sym(1).Node = sym(1).FormalParameterList->finish(pool);
+    } break;
+
+#line 3561 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 486: {
+        AST::FormalParameterList *node = (new (pool) AST::FormalParameterList(sym(1).FormalParameterList, sym(3).PatternElement))->finish(pool);
+        sym(1).Node = node;
+    } break;
+
+#line 3569 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 487: {
+        AST::FormalParameterList *node = new (pool) AST::FormalParameterList(nullptr, sym(1).PatternElement);
+        sym(1).Node = node;
+    } break;
+
+#line 3578 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 488: {
+        AST::FormalParameterList *node = new (pool) AST::FormalParameterList(sym(1).FormalParameterList, sym(3).PatternElement);
+        sym(1).Node = node;
+    } break;
+
+#line 3588 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 490: {
+        ++functionNestingLevel;
+    } break;
+
+#line 3595 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 491: {
+        --functionNestingLevel;
+    } break;
+
+#line 3605 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 493: Q_FALLTHROUGH(); 
+#line 3607 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 494: {
+        AST::ReturnStatement *ret = new (pool) AST::ReturnStatement(sym(4).Expression);
+        ret->returnToken = sym(4).Node->firstSourceLocation();
+        ret->semicolonToken = sym(4).Node->lastSourceLocation();
+        AST::StatementList *statements = (new (pool) AST::StatementList(ret))->finish();
+        AST::FunctionExpression *f = new (pool) AST::FunctionExpression(QStringRef(), sym(1).FormalParameterList, statements);
+        f->isArrowFunction = true;
+        f->functionToken = sym(1).Node ? sym(1).Node->firstSourceLocation() : loc(1);
+        f->lbraceToken = sym(4).Node->firstSourceLocation();
+        f->rbraceToken = sym(4).Node->lastSourceLocation();
+        sym(1).Node = f;
+    } break;
+
+#line 3623 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 495: Q_FALLTHROUGH(); 
+#line 3625 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 496: {
+        AST::FunctionExpression *f = new (pool) AST::FunctionExpression(QStringRef(), sym(1).FormalParameterList, sym(6).StatementList);
+        f->isArrowFunction = true;
+        f->functionToken = sym(1).Node ? sym(1).Node->firstSourceLocation() : loc(1);
+        f->lbraceToken = loc(6);
+        f->rbraceToken = loc(7);
+        sym(1).Node = f;
+    } break;
+
+#line 3637 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 497: {
+        AST::PatternElement *e = new (pool) AST::PatternElement(stringRef(1), nullptr, AST::PatternElement::Binding);
+        e->identifierToken = loc(1);
+        sym(1).FormalParameterList = (new (pool) AST::FormalParameterList(nullptr, e))->finish(pool);
+    } break;
+
+#line 3648 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 498: {
+        if (coverExpressionType != CE_FormalParameterList) {
+            AST::NestedExpression *ne = static_cast<AST::NestedExpression *>(sym(1).Node);
+            AST::FormalParameterList *list = ne->expression->reparseAsFormalParameterList(pool);
+            if (!list) {
+                syntaxError(loc(1), "Invalid Arrow parameter list.");
+                return false;
+            }
+            sym(1).Node = list->finish(pool);
+        }
+    } break;
+
+#line 3666 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 499: {
+        if (lookaheadToken(lexer) == T_LBRACE)
+            pushToken(T_FORCE_BLOCK);
+    } break;
+
+#line 3674 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 500: {
+        AST::FunctionExpression *f = new (pool) AST::FunctionExpression(stringRef(1), sym(3).FormalParameterList, sym(6).StatementList);
+        f->functionToken = sym(1).PropertyName->firstSourceLocation();
+        f->lparenToken = loc(2);
+        f->rparenToken = loc(4);
+        f->lbraceToken = loc(5);
+        f->rbraceToken = loc(7);
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(1).PropertyName, f, AST::PatternProperty::Method);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3689 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 501: {
+        AST::FunctionExpression *f = new (pool) AST::FunctionExpression(stringRef(2), sym(4).FormalParameterList, sym(7).StatementList);
+        f->functionToken = sym(2).PropertyName->firstSourceLocation();
+        f->lparenToken = loc(3);
+        f->rparenToken = loc(5);
+        f->lbraceToken = loc(6);
+        f->rbraceToken = loc(8);
+        f->isGenerator = true;
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(2).PropertyName, f, AST::PatternProperty::Method);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3706 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 502: {
+        AST::FunctionExpression *f = new (pool) AST::FunctionExpression(stringRef(2), nullptr, sym(6).StatementList);
+        f->functionToken = sym(2).PropertyName->firstSourceLocation();
+        f->lparenToken = loc(3);
+        f->rparenToken = loc(4);
+        f->lbraceToken = loc(5);
+        f->rbraceToken = loc(7);
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(2).PropertyName, f, AST::PatternProperty::Getter);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3721 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 503: {
+        AST::FunctionExpression *f = new (pool) AST::FunctionExpression(stringRef(2), sym(4).FormalParameterList, sym(7).StatementList);
+        f->functionToken = sym(2).PropertyName->firstSourceLocation();
+        f->lparenToken = loc(3);
+        f->rparenToken = loc(5);
+        f->lbraceToken = loc(6);
+        f->rbraceToken = loc(8);
+        AST::PatternProperty *node = new (pool) AST::PatternProperty(sym(2).PropertyName, f, AST::PatternProperty::Setter);
+        node->colonToken = loc(2);
+        sym(1).Node = node;
+    } break;
+
+#line 3737 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 504: {
+        AST::FormalParameterList *node = (new (pool) AST::FormalParameterList(nullptr, sym(1).PatternElement))->finish(pool);
+        sym(1).Node = node;
+    } break;
+
+#line 3745 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 505: {
+        lexer->enterGeneratorBody();
+    } break;
+
+#line 3752 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 506: {
+        --functionNestingLevel;
+        lexer->leaveGeneratorBody();
+    } break;
+
+#line 3760 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 507: {
+        AST::FunctionDeclaration *node = new (pool) AST::FunctionDeclaration(stringRef(3), sym(5).FormalParameterList, sym(8).StatementList);
+        node->functionToken = loc(1);
+        node->identifierToken = loc(3);
+        node->lparenToken = loc(4);
+        node->rparenToken = loc(6);
+        node->lbraceToken = loc(7);
+        node->rbraceToken = loc(9);
+        node->isGenerator = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3776 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 509: {
+        AST::FunctionDeclaration *node = new (pool) AST::FunctionDeclaration(QStringRef(), sym(4).FormalParameterList, sym(7).StatementList);
+        node->functionToken = loc(1);
+        node->lparenToken = loc(3);
+        node->rparenToken = loc(5);
+        node->lbraceToken = loc(6);
+        node->rbraceToken = loc(8);
+        node->isGenerator = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3790 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 510: {
+        AST::FunctionExpression *node = new (pool) AST::FunctionExpression(stringRef(3), sym(5).FormalParameterList, sym(8).StatementList);
+        node->functionToken = loc(1);
+        if (!stringRef(3).isNull())
+          node->identifierToken = loc(3);
+        node->lparenToken = loc(4);
+        node->rparenToken = loc(6);
+        node->lbraceToken = loc(7);
+        node->rbraceToken = loc(9);
+        node->isGenerator = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3806 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 511: {
+        AST::FunctionExpression *node = new (pool) AST::FunctionExpression(QStringRef(), sym(4).FormalParameterList, sym(7).StatementList);
+        node->functionToken = loc(1);
+        node->lparenToken = loc(3);
+        node->rparenToken = loc(5);
+        node->lbraceToken = loc(6);
+        node->rbraceToken = loc(8);
+        node->isGenerator = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3822 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 513: Q_FALLTHROUGH(); 
+#line 3824 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 514: {
+        AST::YieldExpression *node = new (pool) AST::YieldExpression();
+        node->yieldToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3833 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 515: Q_FALLTHROUGH(); 
+#line 3835 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 516: {
+        AST::YieldExpression *node = new (pool) AST::YieldExpression(sym(3).Expression);
+        node->yieldToken = loc(1);
+        node->isYieldStar = true;
+        sym(1).Node = node;
+    } break;
+
+#line 3845 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 517: Q_FALLTHROUGH(); 
+#line 3847 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 518: {
+        AST::YieldExpression *node = new (pool) AST::YieldExpression(sym(2).Expression);
+        node->yieldToken = loc(1);
+        sym(1).Node = node;
+    } break;
+
+#line 3857 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 519: {
+        AST::ClassDeclaration *node = new (pool) AST::ClassDeclaration(stringRef(2), sym(3).Expression, sym(5).ClassElementList);
+        node->classToken = loc(1);
+        node->identifierToken = loc(2);
+        node->lbraceToken = loc(4);
+        node->rbraceToken = loc(6);
+        sym(1).Node = node;
+    } break;
+
+#line 3869 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 520: {
+        AST::ClassExpression *node = new (pool) AST::ClassExpression(stringRef(2), sym(3).Expression, sym(5).ClassElementList);
+        node->classToken = loc(1);
+        node->identifierToken = loc(2);
+        node->lbraceToken = loc(4);
+        node->rbraceToken = loc(6);
+        sym(1).Node = node;
+    } break;
+
+#line 3881 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 521: {
+        AST::ClassDeclaration *node = new (pool) AST::ClassDeclaration(QStringRef(), sym(2).Expression, sym(4).ClassElementList);
+        node->classToken = loc(1);
+        node->lbraceToken = loc(3);
+        node->rbraceToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 3892 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 522: {
+        AST::ClassExpression *node = new (pool) AST::ClassExpression(QStringRef(), sym(2).Expression, sym(4).ClassElementList);
+        node->classToken = loc(1);
+        node->lbraceToken = loc(3);
+        node->rbraceToken = loc(5);
+        sym(1).Node = node;
+    } break;
+
+#line 3905 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 524: {
+        lexer->setStaticIsKeyword(true);
+    } break;
+
+#line 3912 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 525: 
+#line 3914 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 526: {
+        lexer->setStaticIsKeyword(false);
+    } break;
+
+#line 3921 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 527: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3928 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 528: {
+        sym(1).Node = sym(2).Node;
+    } break;
+
+#line 3935 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 529: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3942 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 530: {
+        if (sym(1).Node)
+            sym(1).Node = sym(1).ClassElementList->finish();
+    } break;
+
+#line 3952 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 532: {
+        if (sym(1).Node) {
+            if (sym(2).Node)
+                sym(1).ClassElementList = sym(1).ClassElementList->append(sym(2).ClassElementList);
+        } else if (sym(2).Node) {
+            sym(1).Node = sym(2).Node;
+        }
+    } break;
+
+#line 3964 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 533: {
+        AST::ClassElementList *node = new (pool) AST::ClassElementList(sym(1).PatternProperty, false);
+        sym(1).Node = node;
+    } break;
+
+#line 3972 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 534: {
+        lexer->setStaticIsKeyword(true);
+        AST::ClassElementList *node = new (pool) AST::ClassElementList(sym(2).PatternProperty, true);
+        sym(1).Node = node;
+    } break;
+
+#line 3981 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 535: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3990 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 536: {
+        sym(1).Node = nullptr;
+    } break;
+
+#line 3999 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 538: {
+        sym(1).Node = new (pool) AST::Program(sym(1).StatementList->finish());
+    } break;
+
+#line 4006 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+  case 539: {
+        sym(1).Node = new (pool) AST::ESModule(sym(1).StatementList);
+    } break;
+
+#line 4012 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 540: {
+        sym(1).StatementList = sym(1).StatementList->finish();
+    } break;
+
+#line 4019 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 541: {
+        sym(1).StatementList = nullptr;
+    } break;
+
+#line 4029 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 544: {
+        sym(1).StatementList = sym(1).StatementList->append(sym(2).StatementList);
+    } break;
+
+#line 4036 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 545:  Q_FALLTHROUGH(); 
+#line 4038 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 546:  Q_FALLTHROUGH(); 
+#line 4040 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 547:  Q_FALLTHROUGH(); 
+#line 4042 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 548: {
+        sym(1).StatementList = new (pool) AST::StatementList(sym(1).Node);
+    } break;
+
+#line 4051 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 550: {
+        auto decl = new (pool) AST::ImportDeclaration(sym(2).ImportClause, sym(3).FromClause);
+        decl->importToken = loc(1);
+        sym(1).Node = decl;
+    } break;
+
+#line 4059 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 551: {
+        auto decl = new (pool) AST::ImportDeclaration(stringRef(2));
+        decl->importToken = loc(1);
+        decl->moduleSpecifierToken = loc(2);
+        sym(1).Node = decl;
+    } break;
+
+#line 4069 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 552: {
+        auto clause = new (pool) AST::ImportClause(stringRef(1));
+        clause->importedDefaultBindingToken = loc(1);
+        sym(1).ImportClause = clause;
+    } break;
+
+#line 4077 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 553: {
+        sym(1).ImportClause = new (pool) AST::ImportClause(sym(1).NameSpaceImport);
+    } break;
+
+#line 4083 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 554: {
+        sym(1).ImportClause = new (pool) AST::ImportClause(sym(1).NamedImports);
+    } break;
+
+#line 4089 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 555: {
+        auto importClause = new (pool) AST::ImportClause(stringRef(1), sym(3).NameSpaceImport);
+        importClause->importedDefaultBindingToken = loc(1);
+        sym(1).ImportClause = importClause;
+    } break;
+
+#line 4097 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 556: {
+        auto importClause = new (pool) AST::ImportClause(stringRef(1), sym(3).NamedImports);
+        importClause->importedDefaultBindingToken = loc(1);
+        sym(1).ImportClause = importClause;
+    } break;
+
+#line 4108 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 558: {
+        auto import = new (pool) AST::NameSpaceImport(stringRef(3));
+        import->starToken = loc(1);
+        import->importedBindingToken = loc(3);
+        sym(1).NameSpaceImport = import;
+    } break;
+
+#line 4118 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 559: {
+        auto namedImports = new (pool) AST::NamedImports();
+        namedImports->leftBraceToken = loc(1);
+        namedImports->rightBraceToken = loc(2);
+        sym(1).NamedImports = namedImports;
+    } break;
+
+#line 4127 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 560: {
+        auto namedImports = new (pool) AST::NamedImports(sym(2).ImportsList->finish());
+        namedImports->leftBraceToken = loc(1);
+        namedImports->rightBraceToken = loc(3);
+        sym(1).NamedImports = namedImports;
+    } break;
+
+#line 4136 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 561: {
+        auto namedImports = new (pool) AST::NamedImports(sym(2).ImportsList->finish());
+        namedImports->leftBraceToken = loc(1);
+        namedImports->rightBraceToken = loc(4);
+        sym(1).NamedImports = namedImports;
+    } break;
+
+#line 4146 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 562: {
+        auto clause = new (pool) AST::FromClause(stringRef(2));
+        clause->fromToken = loc(1);
+        clause->moduleSpecifierToken = loc(2);
+        sym(1).FromClause = clause;
+    } break;
+
+#line 4156 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 563: {
+        auto importsList = new (pool) AST::ImportsList(sym(1).ImportSpecifier);
+        importsList->importSpecifierToken = loc(1);
+        sym(1).ImportsList = importsList;
+    } break;
+
+#line 4164 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 564: {
+        auto importsList = new (pool) AST::ImportsList(sym(1).ImportsList, sym(3).ImportSpecifier);
+        importsList->importSpecifierToken = loc(3);
+        sym(1).ImportsList = importsList;
+    } break;
+
+#line 4173 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 565: {
+        auto importSpecifier = new (pool) AST::ImportSpecifier(stringRef(1));
+        importSpecifier->importedBindingToken = loc(1);
+        sym(1).ImportSpecifier = importSpecifier;
+    } break;
+
+#line 4181 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 566: {
+    auto importSpecifier = new (pool) AST::ImportSpecifier(stringRef(1), stringRef(3));
+    importSpecifier->identifierToken = loc(1);
+    importSpecifier->importedBindingToken = loc(3);
+    sym(1).ImportSpecifier = importSpecifier;
+    } break;
+
+#line 4198 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 569: {
+        int token = lookaheadToken(lexer);
+        if (token == T_FUNCTION || token == T_CLASS)
+            pushToken(T_FORCE_DECLARATION);
+    } break;
+
+#line 4207 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 570: {
+        auto exportDeclaration = new (pool) AST::ExportDeclaration(sym(3).FromClause);
+        exportDeclaration->exportToken = loc(1);
+        sym(1).ExportDeclaration = exportDeclaration;
+    } break;
+
+#line 4215 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 571: {
+        auto exportDeclaration = new (pool) AST::ExportDeclaration(sym(2).ExportClause, sym(3).FromClause);
+        exportDeclaration->exportToken = loc(1);
+        sym(1).ExportDeclaration = exportDeclaration;
+    } break;
+
+#line 4223 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 572: {
+        auto exportDeclaration = new (pool) AST::ExportDeclaration(sym(2).ExportClause);
+        exportDeclaration->exportToken = loc(1);
+        sym(1).ExportDeclaration = exportDeclaration;
+    } break;
+
+#line 4231 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+ case 573:  Q_FALLTHROUGH(); 
+#line 4233 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 574: {
+        auto exportDeclaration = new (pool) AST::ExportDeclaration(/*exportDefault=*/false, sym(2).Node);
+        exportDeclaration->exportToken = loc(1);
+        sym(1).ExportDeclaration = exportDeclaration;
+    } break;
+
+#line 4241 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 575: {
+        if (auto *f = AST::cast<AST::FunctionDeclaration*>(sym(5).Node)) {
+            if (f->name.isEmpty()) {
+                f->name = stringRef(2);
+                f->identifierToken = loc(2);
+            }
+        }
+    } Q_FALLTHROUGH();
+
+#line 4252 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 576: {
+        // Emulate 15.2.3.11
+        if (auto *cls = AST::cast<AST::ClassDeclaration*>(sym(5).Node)) {
+            if (cls->name.isEmpty()) {
+                cls->name = stringRef(2);
+                cls->identifierToken = loc(2);
+            }
+        }
+
+        auto exportDeclaration = new (pool) AST::ExportDeclaration(/*exportDefault=*/true, sym(5).Node);
+        exportDeclaration->exportToken = loc(1);
+        sym(1).ExportDeclaration = exportDeclaration;
+    } break;
+
+#line 4268 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 577: {
+        // if lhs is an identifier expression and rhs is an anonymous function expression, we need to assign the name of lhs to the function
+        if (auto *f = asAnonymousFunctionDefinition(sym(4).Node)) {
+            f->name = stringRef(2);
+        }
+        if (auto *c = asAnonymousClassDefinition(sym(4).Expression)) {
+            c->name = stringRef(2);
+        }
+
+        auto exportDeclaration = new (pool) AST::ExportDeclaration(/*exportDefault=*/true, sym(4).Node);
+        exportDeclaration->exportToken = loc(1);
+        sym(1).ExportDeclaration = exportDeclaration;
+    } break;
+
+#line 4285 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 578: {
+        auto exportClause = new (pool) AST::ExportClause();
+        exportClause->leftBraceToken = loc(1);
+        exportClause->rightBraceToken = loc(2);
+        sym(1).ExportClause = exportClause;
+    } break;
+
+#line 4294 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 579: {
+        auto exportClause = new (pool) AST::ExportClause(sym(2).ExportsList->finish());
+        exportClause->leftBraceToken = loc(1);
+        exportClause->rightBraceToken = loc(3);
+        sym(1).ExportClause = exportClause;
+    } break;
+
+#line 4303 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 580: {
+        auto exportClause = new (pool) AST::ExportClause(sym(2).ExportsList->finish());
+        exportClause->leftBraceToken = loc(1);
+        exportClause->rightBraceToken = loc(4);
+        sym(1).ExportClause = exportClause;
+    } break;
+
+#line 4313 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 581: {
+        sym(1).ExportsList = new (pool) AST::ExportsList(sym(1).ExportSpecifier);
+    } break;
+
+#line 4319 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 582: {
+        sym(1).ExportsList = new (pool) AST::ExportsList(sym(1).ExportsList, sym(3).ExportSpecifier);
+    } break;
+
+#line 4326 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 583: {
+        auto exportSpecifier = new (pool) AST::ExportSpecifier(stringRef(1));
+        exportSpecifier->identifierToken = loc(1);
+        sym(1).ExportSpecifier = exportSpecifier;
+    } break;
+
+#line 4334 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    case 584: {
+        auto exportSpecifier = new (pool) AST::ExportSpecifier(stringRef(1), stringRef(3));
+        exportSpecifier->identifierToken = loc(1);
+        exportSpecifier->exportedIdentifierToken = loc(3);
+        sym(1).ExportSpecifier = exportSpecifier;
+    } break;
+
+#line 4345 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+    // ------------ end of switch statement
+            } // switch
+            action = nt_action(state_stack[tos], lhs[r] - TERMINAL_COUNT);
+        } // if
+    } while (action != 0);
+
+#ifdef PARSER_DEBUG
+    qDebug() << "Done or error.";
+#endif
+
+    if (first_token == last_token) {
+        const int errorState = state_stack[tos];
+
+        // automatic insertion of `;'
+        if (yytoken != -1 && ((t_action(errorState, T_AUTOMATIC_SEMICOLON) && lexer->canInsertAutomaticSemicolon(yytoken))
+                              || t_action(errorState, T_COMPATIBILITY_SEMICOLON))) {
+#ifdef PARSER_DEBUG
+            qDebug() << "Inserting automatic semicolon.";
+#endif
+            SavedToken &tk = token_buffer[0];
+            tk.token = yytoken;
+            tk.dval = yylval;
+            tk.spell = yytokenspell;
+            tk.raw = yytokenraw;
+            tk.loc = yylloc;
+
+            yylloc = yyprevlloc;
+            yylloc.offset += yylloc.length;
+            yylloc.startColumn += yylloc.length;
+            yylloc.length = 0;
+
+            //const QString msg = QCoreApplication::translate("QQmlParser", "Missing `;'");
+            //diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Warning, yylloc, msg));
+
+            first_token = &token_buffer[0];
+            last_token = &token_buffer[1];
+
+            yytoken = T_SEMICOLON;
+            yylval = 0;
+
+            action = errorState;
+
+            goto _Lcheck_token;
+        }
+
+        hadErrors = true;
+
+        token_buffer[0].token = yytoken;
+        token_buffer[0].dval = yylval;
+        token_buffer[0].spell = yytokenspell;
+        token_buffer[0].raw = yytokenraw;
+        token_buffer[0].loc = yylloc;
+
+        token_buffer[1].token = yytoken       = lexer->lex();
+        token_buffer[1].dval  = yylval        = lexer->tokenValue();
+        token_buffer[1].spell = yytokenspell  = lexer->tokenSpell();
+        token_buffer[1].raw   = yytokenraw    = lexer->rawString();
+        token_buffer[1].loc   = yylloc        = location(lexer);
+
+        if (t_action(errorState, yytoken)) {
+#ifdef PARSER_DEBUG
+            qDebug() << "Parse error, trying to recover.";
+#endif
+            QString msg;
+            int token = token_buffer[0].token;
+            if (token < 0 || token >= TERMINAL_COUNT)
+                msg = QCoreApplication::translate("QQmlParser", "Syntax error");
+            else
+                msg = QCoreApplication::translate("QQmlParser", "Unexpected token `%1'").arg(QLatin1String(spell[token]));
+            diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
+
+            action = errorState;
+            goto _Lcheck_token;
+        }
+
+        static int tokens[] = {
+            T_PLUS,
+            T_EQ,
+
+            T_COMMA,
+            T_COLON,
+            T_SEMICOLON,
+
+            T_RPAREN, T_RBRACKET, T_RBRACE,
+
+            T_NUMERIC_LITERAL,
+            T_IDENTIFIER,
+
+            T_LPAREN, T_LBRACKET, T_LBRACE,
+
+            EOF_SYMBOL
+        };
+
+        for (int *tk = tokens; *tk != EOF_SYMBOL; ++tk) {
+            int a = t_action(errorState, *tk);
+            if (a > 0 && t_action(a, yytoken)) {
+#ifdef PARSER_DEBUG
+                qDebug() << "Parse error, trying to recover (2).";
+#endif
+                const QString msg = QCoreApplication::translate("QQmlParser", "Expected token `%1'").arg(QLatin1String(spell[*tk]));
+                diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
+
+                pushToken(*tk);
+                goto _Lcheck_token;
+            }
+        }
+
+        for (int tk = 1; tk < TERMINAL_COUNT; ++tk) {
+            if (tk == T_AUTOMATIC_SEMICOLON || tk == T_FEED_UI_PROGRAM    ||
+                tk == T_FEED_JS_STATEMENT   || tk == T_FEED_JS_EXPRESSION)
+               continue;
+
+            int a = t_action(errorState, tk);
+            if (a > 0 && t_action(a, yytoken)) {
+                const QString msg = QCoreApplication::translate("QQmlParser", "Expected token `%1'").arg(QLatin1String(spell[tk]));
+                diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
+
+                pushToken(tk);
+                goto _Lcheck_token;
+            }
+        }
+
+        const QString msg = QCoreApplication::translate("QQmlParser", "Syntax error");
+        diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, token_buffer[0].loc, msg));
+    }
+
+    return false;
+}
+
+QT_QML_END_NAMESPACE
+
+
diff --git a/qtdeclarative/src/qml/qqmljsparser_p.h b/qtdeclarative/src/qml/qqmljsparser_p.h
new file mode 100644
index 0000000..0270ecf
--- /dev/null
+++ b/qtdeclarative/src/qml/qqmljsparser_p.h
@@ -0,0 +1,316 @@
+
+#line 178 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtQml module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is automatically generated from qqmljs.g.
+// Changes should be made to that file, not here. Any change to this file will
+// be lost!
+//
+// To regenerate this file, run:
+//    qlalr --no-debug --no-lines --qt qqmljs.g
+//
+
+#ifndef QQMLJSPARSER_P_H
+#define QQMLJSPARSER_P_H
+
+#include <private/qqmljsglobal_p.h>
+#include <private/qqmljsgrammar_p.h>
+#include <private/qqmljsast_p.h>
+#include <private/qqmljsengine_p.h>
+
+#include <QtCore/qlist.h>
+#include <QtCore/qstring.h>
+
+QT_QML_BEGIN_NAMESPACE
+
+namespace QQmlJS {
+
+class Engine;
+
+class QML_PARSER_EXPORT Parser: protected QQmlJSGrammar
+{
+public:
+    union Value {
+      int ival;
+      double dval;
+      AST::VariableScope scope;
+      AST::ForEachType forEachType;
+      AST::ArgumentList *ArgumentList;
+      AST::CaseBlock *CaseBlock;
+      AST::CaseClause *CaseClause;
+      AST::CaseClauses *CaseClauses;
+      AST::Catch *Catch;
+      AST::DefaultClause *DefaultClause;
+      AST::Elision *Elision;
+      AST::ExpressionNode *Expression;
+      AST::TemplateLiteral *Template;
+      AST::Finally *Finally;
+      AST::FormalParameterList *FormalParameterList;
+      AST::FunctionDeclaration *FunctionDeclaration;
+      AST::Node *Node;
+      AST::PropertyName *PropertyName;
+      AST::Statement *Statement;
+      AST::StatementList *StatementList;
+      AST::Block *Block;
+      AST::VariableDeclarationList *VariableDeclarationList;
+      AST::Pattern *Pattern;
+      AST::PatternElement *PatternElement;
+      AST::PatternElementList *PatternElementList;
+      AST::PatternProperty *PatternProperty;
+      AST::PatternPropertyList *PatternPropertyList;
+      AST::ClassElementList *ClassElementList;
+      AST::ImportClause *ImportClause;
+      AST::FromClause *FromClause;
+      AST::NameSpaceImport *NameSpaceImport;
+      AST::ImportsList *ImportsList;
+      AST::NamedImports *NamedImports;
+      AST::ImportSpecifier *ImportSpecifier;
+      AST::ExportSpecifier *ExportSpecifier;
+      AST::ExportsList *ExportsList;
+      AST::ExportClause *ExportClause;
+      AST::ExportDeclaration *ExportDeclaration;
+
+      AST::UiProgram *UiProgram;
+      AST::UiHeaderItemList *UiHeaderItemList;
+      AST::UiPragma *UiPragma;
+      AST::UiImport *UiImport;
+      AST::UiParameterList *UiParameterList;
+      AST::UiPublicMember *UiPublicMember;
+      AST::UiObjectDefinition *UiObjectDefinition;
+      AST::UiObjectInitializer *UiObjectInitializer;
+      AST::UiObjectBinding *UiObjectBinding;
+      AST::UiScriptBinding *UiScriptBinding;
+      AST::UiArrayBinding *UiArrayBinding;
+      AST::UiObjectMember *UiObjectMember;
+      AST::UiObjectMemberList *UiObjectMemberList;
+      AST::UiArrayMemberList *UiArrayMemberList;
+      AST::UiQualifiedId *UiQualifiedId;
+      AST::UiEnumMemberList *UiEnumMemberList;
+    };
+
+public:
+    Parser(Engine *engine);
+    ~Parser();
+
+    // parse a UI program
+    bool parse() { ++functionNestingLevel; bool r = parse(T_FEED_UI_PROGRAM); --functionNestingLevel; return r; }
+    bool parseStatement() { return parse(T_FEED_JS_STATEMENT); }
+    bool parseExpression() { return parse(T_FEED_JS_EXPRESSION); }
+    bool parseUiObjectMember() { ++functionNestingLevel; bool r = parse(T_FEED_UI_OBJECT_MEMBER); --functionNestingLevel; return r; }
+    bool parseProgram() { return parse(T_FEED_JS_SCRIPT); }
+    bool parseScript() { return parse(T_FEED_JS_SCRIPT); }
+    bool parseModule() { return parse(T_FEED_JS_MODULE); }
+
+    AST::UiProgram *ast() const
+    { return AST::cast<AST::UiProgram *>(program); }
+
+    AST::Statement *statement() const
+    {
+        if (! program)
+            return 0;
+
+        return program->statementCast();
+    }
+
+    AST::ExpressionNode *expression() const
+    {
+        if (! program)
+            return 0;
+
+        return program->expressionCast();
+    }
+
+    AST::UiObjectMember *uiObjectMember() const
+    {
+        if (! program)
+            return 0;
+
+        return program->uiObjectMemberCast();
+    }
+
+    AST::Node *rootNode() const
+    { return program; }
+
+    QList<DiagnosticMessage> diagnosticMessages() const
+    { return diagnostic_messages; }
+
+    inline DiagnosticMessage diagnosticMessage() const
+    {
+        for (const DiagnosticMessage &d : diagnostic_messages) {
+            if (d.kind != DiagnosticMessage::Warning)
+                return d;
+        }
+
+        return DiagnosticMessage();
+    }
+
+    inline QString errorMessage() const
+    { return diagnosticMessage().message; }
+
+    inline int errorLineNumber() const
+    { return diagnosticMessage().loc.startLine; }
+
+    inline int errorColumnNumber() const
+    { return diagnosticMessage().loc.startColumn; }
+
+protected:
+    bool parse(int startToken);
+
+    void reallocateStack();
+
+    inline Value &sym(int index)
+    { return sym_stack [tos + index - 1]; }
+
+    inline QStringRef &stringRef(int index)
+    { return string_stack [tos + index - 1]; }
+
+    inline QStringRef &rawStringRef(int index)
+    { return rawString_stack [tos + index - 1]; }
+
+    inline AST::SourceLocation &loc(int index)
+    { return location_stack [tos + index - 1]; }
+
+    AST::UiQualifiedId *reparseAsQualifiedId(AST::ExpressionNode *expr);
+
+    void pushToken(int token);
+    int lookaheadToken(Lexer *lexer);
+
+    void syntaxError(const AST::SourceLocation &location, const char *message) {
+        diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, location, QLatin1String(message)));
+     }
+     void syntaxError(const AST::SourceLocation &location, const QString &message) {
+         diagnostic_messages.append(DiagnosticMessage(DiagnosticMessage::Error, location, message));
+      }
+
+protected:
+    Engine *driver;
+    MemoryPool *pool;
+    int tos = 0;
+    int stack_size = 0;
+    Value *sym_stack = nullptr;
+    int *state_stack = nullptr;
+    AST::SourceLocation *location_stack = nullptr;
+    QVector<QStringRef> string_stack;
+    QVector<QStringRef> rawString_stack;
+
+    AST::Node *program = nullptr;
+
+    // error recovery and lookahead handling
+    enum { TOKEN_BUFFER_SIZE = 5 };
+
+    struct SavedToken {
+       int token;
+       double dval;
+       AST::SourceLocation loc;
+       QStringRef spell;
+       QStringRef raw;
+    };
+
+    int yytoken = -1;
+    double yylval = 0.;
+    QStringRef yytokenspell;
+    QStringRef yytokenraw;
+    AST::SourceLocation yylloc;
+    AST::SourceLocation yyprevlloc;
+
+    SavedToken token_buffer[TOKEN_BUFFER_SIZE];
+    SavedToken *first_token = nullptr;
+    SavedToken *last_token = nullptr;
+
+    int functionNestingLevel = 0;
+
+    enum CoverExpressionType {
+        CE_Invalid,
+        CE_ParenthesizedExpression,
+        CE_FormalParameterList
+    };
+    AST::SourceLocation coverExpressionErrorLocation;
+    CoverExpressionType coverExpressionType = CE_Invalid;
+
+    QList<DiagnosticMessage> diagnostic_messages;
+};
+
+} // end of namespace QQmlJS
+
+
+
+#line 1525 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+#define J_SCRIPT_REGEXPLITERAL_RULE1 128
+
+#line 1537 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+#define J_SCRIPT_REGEXPLITERAL_RULE2 129
+
+#line 3032 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+#define J_SCRIPT_EXPRESSIONSTATEMENTLOOKAHEAD_RULE 421
+
+#line 3663 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+#define J_SCRIPT_CONCISEBODYLOOKAHEAD_RULE 499
+
+#line 4195 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+#define J_SCRIPT_EXPORTDECLARATIONLOOKAHEAD_RULE 569
+
+#line 4479 "/home/chpro/projects/genode/src/genode_qt5/contrib/qt-everywhere-src-5.12.4/qtdeclarative/src/qml/parser/qqmljs.g"
+
+QT_QML_END_NAMESPACE
+
+
+
+#endif // QQMLJSPARSER_P_H
diff --git a/qtdeclarative/src/qml/qtqml-config.h b/qtdeclarative/src/qml/qtqml-config.h
new file mode 100644
index 0000000..e04a385
--- /dev/null
+++ b/qtdeclarative/src/qml/qtqml-config.h
@@ -0,0 +1,2 @@
+#define QT_FEATURE_qml_debug -1
+#define QT_FEATURE_qml_network 1
diff --git a/qtdeclarative/src/qml/qtqml-config_p.h b/qtdeclarative/src/qml/qtqml-config_p.h
new file mode 100644
index 0000000..0aae3b5
--- /dev/null
+++ b/qtdeclarative/src/qml/qtqml-config_p.h
@@ -0,0 +1,11 @@
+#define QT_FEATURE_cxx14_make_unique 1
+#define QT_FEATURE_qml_animation 1
+#define QT_FEATURE_qml_delegate_model 1
+#define QT_FEATURE_qml_devtools 1
+#define QT_FEATURE_qml_list_model 1
+#define QT_FEATURE_qml_locale 1
+#define QT_FEATURE_qml_preview -1
+#define QT_FEATURE_qml_profiler -1
+#define QT_FEATURE_qml_sequence_object 1
+#define QT_FEATURE_qml_worker_script 1
+#define QT_FEATURE_qml_xml_http_request 1
diff --git a/qtdeclarative/src/qml/qtqml_tracepoints_p.h b/qtdeclarative/src/qml/qtqml_tracepoints_p.h
new file mode 100644
index 0000000..ff8d101
--- /dev/null
+++ b/qtdeclarative/src/qml/qtqml_tracepoints_p.h
@@ -0,0 +1 @@
+#include <private/qtrace_p.h>
diff --git a/qtdeclarative/src/quick/qtquick-config.h b/qtdeclarative/src/quick/qtquick-config.h
new file mode 100644
index 0000000..a224374
--- /dev/null
+++ b/qtdeclarative/src/quick/qtquick-config.h
@@ -0,0 +1 @@
+#define QT_FEATURE_d3d12 -1
diff --git a/qtdeclarative/src/quick/qtquick-config_p.h b/qtdeclarative/src/quick/qtquick-config_p.h
new file mode 100644
index 0000000..9c6e6e0
--- /dev/null
+++ b/qtdeclarative/src/quick/qtquick-config_p.h
@@ -0,0 +1,16 @@
+#define QT_FEATURE_quick_animatedimage 1
+#define QT_FEATURE_quick_shadereffect 1
+#define QT_FEATURE_quick_path 1
+#define QT_FEATURE_quick_canvas 1
+#define QT_FEATURE_quick_designer 1
+#define QT_FEATURE_quick_flipable 1
+#define QT_FEATURE_quick_gridview 1
+#define QT_FEATURE_quick_itemview 1
+#define QT_FEATURE_quick_listview 1
+#define QT_FEATURE_quick_sprite 1
+#define QT_FEATURE_quick_particles 1
+#define QT_FEATURE_quick_pathview 1
+#define QT_FEATURE_quick_positioners 1
+#define QT_FEATURE_quick_repeater 1
+#define QT_FEATURE_quick_tableview 1
+#define QT_FEATURE_quick_viewtransitions 1
