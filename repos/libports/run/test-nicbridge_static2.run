#
# Build
#

set build_components {
	core init
	drivers/timer drivers/input drivers/nic
	server/nic_bridge
	app/lighttpd
	app/fetchurl
	lib/vfs/lxip
	lib/vfs/lwip
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append_platform_drv_config

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>
	<start name="nic_bridge">
		<resource name="RAM" quantum="24M"/>
		<provides><service name="Nic"/></provides>
		<config>
			<policy label="lighttpd" ip_addr="10.0.2.55"/>
			<policy label="fetchurl" ip_addr="10.0.2.56"/>
		</config>
		<route>
			<service name="Nic"> <child name="nic_drv"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="lighttpd">
		<resource name="RAM" quantum="128M" />
		<config>
			<arg value="lighttpd" />
			<arg value="-f" />
			<arg value="/etc/lighttpd/lighttpd.conf" />
			<arg value="-D" />
			<libc stdin="/dev/null" stdout="/dev/log" stderr="/dev/log"
			      socket="/dev/socket">

				<vfs>
					<dir name="dev">
						<dir name="socket">
							<lxip ip_addr="10.0.2.55" netmask="255.255.255.0" gateway="10.0.2.1"/> </dir>
						<log/>
						<null/>
					</dir>
					<dir name="etc">
						<dir name="lighttpd">
							<inline name="lighttpd.conf">
# lighttpd configuration
server.port          = 80
server.document-root = "/website"
server.event-handler = "select"
server.network-backend = "write"
index-file.names     = (
  "index.xhtml", "index.html", "index.htm"
)
mimetype.assign      = (
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html"
)
							</inline>
						</dir>
					</dir>
					<dir name="website">
						<inline name="index.html">
<html>
	<head>
		<title>Hello</title>
	</head>
	<body>
		<p>Hello Genode!</p>
		<b>I am bold ;-)</b>
	</body>
</html>
						</inline>
					</dir>
				</vfs>
			</libc>
		</config>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="fetchurl">
		<resource name="RAM" quantum="8M"/>
		<config verbose="yes">
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket">
				<vfs>
					<dir name="dev">
						<log/> <null/> </dir>
						<dir name="socket">
							<lxip ip_addr="10.0.2.56" netmask="255.255.255.0" gateway="10.0.2.1"/> </dir>
					<dir name="tmp"> <ram/> </dir>
				</vfs>
			</libc>
			<fetch url="http://10.0.2.55/index.html" path="/tmp/index.html"/>
		</config>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init
	curl.lib.so
	fetchurl
	ld.lib.so
	libc.lib.so
	libm.lib.so
	lighttpd
	lxip.lib.so
	nic_bridge
	timer nic_drv
	vfs_lwip.lib.so
	vfs_lxip.lib.so
	zlib.lib.so
	libcrypto.lib.so
	libssh.lib.so
	libssl.lib.so
}


# platform-specific modules
lappend_if [have_spec linux] boot_modules fb_sdl

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -m 512 "

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user "
append qemu_args " -nographic -serial mon:stdio "

run_genode_until forever
