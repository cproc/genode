set build_components {
	core init
	drivers/timer drivers/nic
	lib/vfs/lwip
	test/libc_http_client
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

# don't use the dynamic linker for loading the lx_hybrid nic_drv on Linux
proc nic_drv_ld_attr {} {
	if {[have_spec linux]} { return {ld="no"} }
	return ""
}

append config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="nic_drv" } [nic_drv_ld_attr] {>
		<binary name="} [nic_drv_binary] {"/>
		<resource name="RAM" quantum="8M"/>
		<provides> <service name="Nic"/> </provides>
	</start>

	<start name="test-libc_http_client" caps="200">
		<resource name="RAM" quantum="48M"/>
		<config>
			<vfs>
				<dir name="dev"> <log/> </dir>
				<dir name="socket">
					<lwip dhcp="yes"/>
				</dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket" />
		</config>
	</start>
}

append_platform_drv_config

append config {
</config>
}

install_config $config

append boot_modules {
	core init timer } [nic_drv_binary] {
	ld.lib.so libc.lib.so vfs.lib.so posix.lib.so
	libm.lib.so pthread.lib.so
	vfs_lwip.lib.so
	test-libc_http_client
}

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -nographic"

run_genode_until forever
