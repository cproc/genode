#
# Build
#

build { core init server/ram_fs test/libc_vfs_write }

create_boot_directory

#
# Generate config
#

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="ram_fs">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="File_system"/> </provides>
		<config> <default-policy root="/" writeable="yes"/> </config>
	</start>
	<start name="test-libc_vfs_write">
		<resource name="RAM" quantum="2M"/>
		<config>
			<vfs>
				<dir name="tmp"> <fs/> </dir>
				<dir name="dev"> <log/> </dir>
			</vfs>
			<libc stdout="/dev/log" cwd="/tmp"/>
		</config>
	</start>
</config>
}

install_config $config

#
# Boot modules
#

build_boot_image {
	core init
	ld.lib.so libc.lib.so libm.lib.so pthread.lib.so
	ram_fs test-libc_vfs_write
}

#
# Execute test case
#

append qemu_args "  -nographic "

run_genode_until forever
#run_genode_until {.*child "test-libc_vfs_write" exited with exit value 0.*} 60
