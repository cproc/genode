

              ===============================================
              Release notes for the Genode OS Framework 24.08
              ===============================================

                               Genode Labs



; intro
; @nfeske


Base framework and OS-level infrastructure
##########################################

Cultivation of C++20 programming style
======================================

[https://genode.org/documentation/release-notes/23.05#New_tool_chain_based_on_GCC_12.3__C__20_enabled_by_default - One year ago],
we enabled C++20 as default. With the current release, we took the chance to
update the codebase according to this version of the standard.

:C++20 function template syntax:
  The 'auto' keyword can be used in many places where template types had to be
  declared manually. We updated all sources of the base framework accordingly.

:Using 'using' instead of 'typedef':
  C-style type aliases are no longer used within the framework.

:util/geometry.h:
  The header has been moved from the os repository to base repository.
  'Point', 'Area', and 'Rect' have been turned into plain compound types,
  making 'x', 'y', 'w', 'h', 'at', and 'area' accessible without a method call.
  'Rect' is now represented as a tuple of 'Point' and 'Area', which is the most
  common form of initialization.
  The companion utilities have been updated ('constexpr', eliminating out parameters)
  as well.

:/util/color.h:
  The 'Color' type has been converted from a class to a POD type by replacing
  the constructors by the named create functions 'rgb', 'clamped_rgb',
  and 'clamped_rgba'. This enables the initialization of color values using
  the '{ .r = ... }' syntax and makes the type usable in const expressions.
  The change also narrows the type for the color components and alpha values to
  'uint8_t'. So possible integer overflows of computed values are detected
  by '-Wconversion'.


Reduced reliance on the C++ exception mechanism
===============================================

In [https://genode.org/documentation/release-notes/21.11#New_pattern_for_C___error_handling - version 21.11],
we introduced the 'Attempt' pattern as an alternative to exception-based error
handling. While gradually applying this pattern, in particular for new
introduced interfaces, we observed our code becoming more rigid and concrete,
leaving no condition unconsidered. Given this added assurance, we ultimately
decided to remove the reliance on C++ exceptions from the base framework over
time. The current release takes a huge leap in this direction.

:base/id_space.h:
  A new 'Id_space::apply' overload takes a second functor 'missing_fn' as
  argument, which is called whenever the lookup fails. It thereby allows the
  use of the 'Id_space' utility without 'Unknown_id' exceptions.

:util/xml_node.h:
  The two 'Xml_node::attribute' accessors have been removed along with
  the 'Nonexistent_attribute' exception.
  Attributes are generally accessed via the 'attribute_value' method, which
  handles the case via a default value.

:Core RPC interfaces:
  Exceptions have been entirely removed from the RPC interfaces provided
  the core component, namely 'Trace', 'Pd', 'Cpu', 'Rm', 'Region_map'.

  While touching these interfaces, we took the opportunity for modernization
  and consolidation of both the interfaces and their implementation. E.g.,
  core's trace service received a welcome facelift, e.g., the former use of
  basic types got replaced by dedicated types.

  The revised 'Region_map' interface uses an 'Attr' compound struct for
  specifying arguments to the 'attach' operation, which makes the intent of
  client code more obvious. The operation returns a 'Range' instead of a
  'Local_addr' now. The 'Region_map::State' type got renamed to 'Fault'.

:base/child.h:
  The 'Child_policy::Nonexistent_id_space' exception has been removed by
  making the 'server_id_space' mandatory for each policy.
  The former 'Child::Process' and 'Child::Process::Loaded_executable' classes
  got replaced by static functions that return failure conditions as return
  values, eliminating the use of C++ exceptions by the child framework.

The overall ambition of cutting back the use of C++ exceptions is not limited
to the base framework but can be observed for critical components as well.
In particular, the NIC router received a profound rework in this respect.


Tightened GUI-session interface
===============================

On our [https://genode.org/about/road-map - road map], we anticipated
intensive work on user-facing topics, many being related to graphical user
interfaces. While approaching these topics, we sensed that the clean
implementation of our ideas demands a revisit of the framework's existing GUI
infrastructure, in particular the GUI-session interface as provided by the
nitpicker GUI server and the window manager. Note that we barely touched this
corner of the framework in the past ten years since version
[https://genode.org/documentation/release-notes/14.08#New_GUI_architecture - 14.08].
The changes are as follows.

* The 'Gui::Session::session_control' RPC function got removed because its
  functionality has long been superseded by the window manager and layouter.

* The interfaces and components received a thorough coding-style update,
  embracing C++20, avoiding plain pointers, using 'Attr' structs for passing
  attributes, removing the notion of invalid handles/IDs, replacing
  basic types by dedicated types, and removing the use C++ exceptions.

* The out-of-RAM and out-of-caps conditions are now consistently handled by
  the 'Gui::Connection', which does no longer inherit the 'Gui::Session'
  interface and can thereby introduce tailored result types.

* The creation of top-level views and child views are now two distinct
  operations ('view' and 'child_view').

* The access of the subsumed framebuffer and input interfaces is now
  mediated by the plain public members 'Connection::framebuffer' and 'input'.
  This simplifies the client-side code. E.g., '_gui.input()->pending()'
  becomes '_gui.input.pending()'.

* Corner cases of view-stacking operations are now expressed as dedicated
  commands. The new stacking commands are FRONT, BACK, FRONT_OF, and BEHIND_OF.

* View handles are managed as 'Id_space' and hence named view IDs now.
  The allocation of view IDs has been moved from the server side to the
  client, which gives clients more flexibility and reduces the surface of
  possible error conditions between client and server.
  To ease the client-side ID management, the 'Gui::Connection' hosts
  a 'view_ids' ID space for optional use. E.g., the new 'Top_level_view'
  class uses this ID space for ID allocation. This class accommodates the
  most typical use case of opening a single window.

* The creation of new views accepts initial view attributes now,
  which accommodate typical client use cases with less code.


Fostered consistency of naming
==============================

Within our code base, we are ardent about consistency. However, two relics
from the infancy of the project remained standing out like sore thumbs. First,
the '_drv' suffix of driver executables violated our established
[https://genode.org/documentation/developer-resources/conventions - style]
of naming things without artificial abbreviations.
Second, the plural naming of the _<repo>/src/drivers/_ directory used to be
inconsistent with the sibling directories _test/_, _app/_, _server/_.
The current release rectifies both inconsistencies. The '_drv' suffix has been
dropped and the directory has been renamed to _driver/_.


Device drivers
##############

Linux device-driver environment (DDE)
=====================================

We last adapted Linux DDE for kernel 6.1 in May/August 2023. According to
our plan of approximately one update per year, it was time to roll up our
sleeves for the adaption to Linux 6.6 LTS and ready our driver base for
future (especially PC) platforms. With this release, we limited our efforts
to the emulation library itself as well as virt_linux and pc_linux driver
ports.

Thus from now on, PC platforms use Linux driver sources of kernel version
6.6.47 for USB host controllers and devices, Wifi and Ethernet adapters,
Intel display, lxip TCP/IP protocols, and wireguard. Non-x86 platforms were
updated for USB devices and network protocols only, but will be adapted in future
releases step-by-step. All drivers work as drop-in-replacements of older
versions with respect to integration and configuration.

Our Wifi driver port was amended by an online quality update concerning the
currently established connection, which can be enabled by the
'update_quality_interval' configuration attribute. By this feature, user
interfaces are enabled to reflect connection-quality changes almost
instantly. Additionally, we added support for Intel AX200/9560 wireless
adapters and restored support for Wifi devices found in Thinkpad T430
notebooks.

During this release cycle, we analyzed a significant network throughput drop
resp. CPU load increase when using the
[https://github.com/genodelabs/genode/issues/5151 - PC Ethernet driver].
We eventually traced the effect to runtime overhead originating from our DDE
memory allocator and the positive impact of a simple allocation-cache
implementation confirmed our suspicion veritable. Hence, we replaced our
custom allocator by the Linux kernel-internal SLUB allocator that is based
on page/folio allocation. The folio API is well hidden in the kernel
internals, still in flux, and offers only incomplete (resp. outdated)
documentation, which required quite a bit of research efforts reading and
understanding the kernel's implementation.

In the end, we improved our emulation implementation sufficiently and
managed to get the PC NIC driver to work robustly with gigabit performance
and a CPU load reduced by 25-40% on Intel Kaby/Tiger Lake notebooks.


Platform driver
===============

During ACPI suspend, the PCI bridges in the system may forget their
PCI configuration. On resume, this configuration needs to be restored so that
all PCI devices behind the bridge become usable again. With this release, we
added support to the pci_decode component to report all relevant information, which is
then picked up by the platform driver after an ACPI resume to re-configure the used PCI
bridges.


Improvements for NXP's i.MX family
==================================

; @skalk

commit 4a5c073ed849ec6a39e841a36083a338cfa23f8c
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Tue May 21 13:20:56 2024 +0200

    nic/fec: use linux-imx 6.1.20
    
    This commit introduces an updated driver that uses the current
    linux-imx (6.1.20) version.

commit 2f33a1d428ea097038c1e4a4e4d4cee002926cab
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Mon May 27 14:02:10 2024 +0200

    framebuffer/imx8mq: use linux-imx 6.1.20
    
    This commit introduces an updated driver that uses the current
    linux-imx (6.1.20) version.
    
    It also contains a unified test run-script that works on both the
    EVK as well as the MNT Reform2. The HDMI port on the later device
    can be exercised by changing the device-tree route to
    'imx8mq_fb-mnt_reform2-hdmi.dtb'.

commit 5b4fc047fa4ac6541192158c156e09eb5c570c14
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Jun 10 16:28:40 2024 +0200

    sd_card/imx8mq: use linux-imx 6.1.20
    
    This commit introduces an updated driver that uses the current
    linux-imx (6.1.20) version.

commit b021cd0813e1be3377be3f25bdc028e83f35f23a
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Mon Jun 3 15:21:52 2024 +0200

    Remove old DDE Linux MNT Reform 2 snippets

commit a2f5e04f3e2dc7ee33837551818c0974965e6ddf
Author: Alice Domage <alice.domage@gapfruit.com>
Date:   Tue Feb 27 15:28:49 2024 +0100

    imx8mp_iot_gate: add base-hw kernel support

commit 5d51d49145326c2605298e57686b3f2814d5110a
Author: Alice Domage <alice.domage@gapfruit.com>
Date:   Thu Mar 14 17:02:50 2024 +0100

    add: imx8mp_platform
    
    The driver is duplicated from imx8mq and adapted for imx8mp

commit accedf54777754068874c6d5079e3e876b893710
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed May 22 15:51:52 2024 +0200

    imx8m*_platform: unification & disable clocks
    
    * Unify System-Reset-Controller, General-Power-Controller, and
      common parts of the Central-Clock-Module in between
      i.MX 8M Quad & 8M Plus SoC
    * Fix regression: root clocks, gates and plls not necessary get
      disabled by default

commit b58d781660697a1fa96784c111f5cc4d829a5eb4
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon May 27 16:02:17 2024 +0200

    imx8mp_platform: correct set/unset of PLLs
    
    The enable-output-gate bits of the PLL 1416 and 1443 are not equal.
    Implement the correct protocol to enable/disable the PLL, and to ensure
    that it isn't bypassed.

commit 56b1574e041a028b4265252600b8f519b723c9d7
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Jun 6 15:33:57 2024 +0200

    imx8mp_platform: setup IOMUX controller

commit 1a52e69ca6afea4bc8e50e7bb23c29334f4326ac
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Jun 6 15:34:49 2024 +0200

    simple EEPROM over I2C reader for i.MX 8M IOT gate

commit b0e230d042fcfba19fb5c7ba6235c9725bcc178c
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Jun 6 15:36:36 2024 +0200

    stmmac_nic: initial support for imx8mp_iot_gate

commit b739035f4ab3a9765134d019eab7ad7f006b684a
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jun 11 14:40:06 2024 +0200

    fec_nic: add support for i.MX 8M IOT gateway

commit fdfe9f8ca1363d8b4e7b0730e700c268431d2325
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jun 11 15:20:50 2024 +0200

    imx8mq_sd_card: add support for i.MX 8M IOT gateway

commit 49d6b6272a6db36958f207a670653200640077c9
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Jun 17 12:49:22 2024 +0200

    imx8mp_platform: implement system reset mechanism
    
    - Consume system state ROM analogue to PC platform driver
    - Use first watchdog timer as mechanism to reset system
    - Keep first and second watchdog timer's clocks alive,
      the second one is intended to be used by the secure world (ATF)

commit 501709d5f4a440be01594b7f583232ce50c6693b
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Jun 17 13:54:39 2024 +0200

    imx8mp_iot_gate: add GPIO controllers to devices
    
    - Add missing gpio2, gpio3, gpio4, and gpio5 to board devices ROM

commit 133d92a0caa64a0028f4ba237dc84d92fc752324
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jun 18 13:29:55 2024 +0200

    imx8mp_iot_gate: add ECSPI device to board ROM
    
    - the IOT gateway uses only the second ECSPI from NXP's i.MX 8M Plus SoC

commit 6306d8f00d2aedda5d8032ee24e30c3faf590eb2
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jun 19 11:41:38 2024 +0200

    imx7d_sabre: move all board specifics to imx repo
    
    Ref genodelabs/genode#5252

commit cd8fb1ebe0afd39b4fa3d8297fc09e41d9129c91
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jun 19 13:43:48 2024 +0200

    tz_vmm: move trustzone example into imx repo
    
    Ref genodelabs/genode#5252

commit 1eadf43f32391ce3b249bc7c60458a4bab90dd9a
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jun 19 13:56:51 2024 +0200

    synaptics_dsx_touch: move driver to imx repository
    
    Ref genodelabs/genode#5252

commit ea5c632a4c8b61bc2c2b0cbf422678dd11b18190
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jun 19 14:03:17 2024 +0200

    imx8q_evk_i2c: move driver to imx repository
    
    Ref genodelabs/genode#5252

commit 32984ab438c67f0e8e319ddf7a3bfba6d3cde1aa
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jun 19 14:52:12 2024 +0200

    imx*_sd_card: move drivers to imx repository
    
    Ref genodelabs/genode#5252

commit b844240e89f6a574fe6716850d45232101c853ee
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jun 19 16:48:59 2024 +0200

    move remaining imx53 related files to imx repo
    
    Ref genodelabs/genode#5252

commit 2b3fb1c72da3ce428523555447ea90256591d8dd
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Jun 20 14:17:02 2024 +0200

    hw: adapt to removal of cortex* directories
    
    Ref genodelabs/genode#5253

commit a8d02b398d71d69d1a3ee7a715ce3f22b9f76ae6
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jun 25 12:02:23 2024 +0200

    add pin driver with Pin_state, Pin_control, and IRQ
    
    - To replace the legacy GPIO session interface with the
      newer Pin_state, Pin_control and IRQ session

commit 0b7f89c50eaf24862d397aad2e8506d88d11f4e2
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jun 25 12:06:07 2024 +0200

    adapt components and run-scripts to use pin driver

commit 745313f056676ddebbd9c364dd9dfc123c53ca5b
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Wed Jun 26 15:49:34 2024 +0200

    timer: add EPIT 2 standalone timer
    
    Based upon new Timer schema of genode#5138 and derived from
    from former epit timer of Genode base repository, which got replaced by
    this timer.


Libraries and applications
##########################

Qt6 application framework
=========================

; @cproc

commit d0c35b9d2f798634af23111657d3918f8d45f7fb
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Mon Aug 19 11:17:52 2024 +0200

    libports: add Qt6
    
    Fixes #5325


Mesa version 24.0.8
===================

With release
[https://genode.org/documentation/release-notes/24.05#Mesa_updated_to_version_24.0.1 - 24.05],
we updated Mesa to major version 24. During the past few
months, we improved the memory allocation and synchronization for Intel's Iris
driver and as a side effect updated Mesa to version 24.0.8.


Platforms
#########

Execution on bare hardware (base-hw)
====================================

; @skalk

commit 391a919a2dfb62769f21463072441284e328f15f
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Jul 3 14:44:15 2024 +0200

    hw: move stack into cpu local mem area
    
    Ref genodelabs/genode#5310

commit 080b3f0f1ef22a5b8b233ffa1624b5e460d6ecae
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Jul 4 14:50:14 2024 +0200

    hw: move cpu kernel object into cpu local area
    
    Fix genodelabs/genode#5310


NOVA microhypervisor
====================

The kernel received support to handle the x86 CPU FPU extension
[https://de.wikipedia.org/wiki/Advanced_Vector_Extensions - AVX], which is a
family of SIMD instruction extensions used for optimized
implementations of mathematical algorithms, e.g., it is used in multimedia
applications. In principle, the kernel has to detect the available AVX versions,
e.g., AVX, AVX-2, AVX-512. Depending on the version, it has to save and restore
additional FPU state during thread switching.
Beside the general availability to Genode applications, the Seoul VMM got
enabled as a first user of the feature. The VMM now announces the AVX feature
to the guest VMs, so that the guest kernel can enable it and guest user
applications can utilize it, e.g., for web browser and video de-/coding
use-cases. The feature got tested with Seoul for Intel and AMD systems.

Additionally, the Genode core roottask now supports Intel SoCs with e-Core
only CPUs, formerly named Intel ATOM CPUs and nowadays branded as Intel
n-Series CPUs.

Finally, the kernel now supports the freeing of vCPU related data structures
during VM destruction, got optimized to reduce resource overhead during cross
CPU IPC and improved VM MSR exit handling.


Build system and tools
######################

Improved reproducibility
========================

The demand for reproducible builds has been increasing during the past few
years. The main hindrance that makes builds unreproducible are timestamps. On
Genode, especially components that produce TAR files suffered from this
limitation, since the date of the archived data was set to the time of
archiving. To avoid this issue, we introduce an customizable global TAR_OPT in
Genode's build system that sets the date of the archived files to the date of
the epoch and the user/group to one. As a starting point, we added the TAR_OPT to
the Qt5-build process while other targets will incrementally follow.

Additionally, we enabled our Rump-kernel port to be reproducible.


Goa SDK
=======

User-level debugging
~~~~~~~~~~~~~~~~~~~~

After the addition of on-target debugging on Sculpt OS in
[https://genode.org/documentation/release-notes/24.05#On-target_debugging_using_the_GNU_debugger__GDB_ - Genode 24.05],
it was about time to equip Goa with debugging support as well. For this purpose,
the tool received an optional '--debug' command-line switch, which instructs Goa
to consider
[https://genode.org/documentation/release-notes/23.11#Debug_information_for_depot_binaries - dbg archives]
in its download, export and publish steps.

When provided with this switch on 'goa run', the tool also creates a
_<project-name>.gdb_ file in the project's _var/_ directory. This file contains
initialization commands for the GNU debugger (GDB) and can be passed to GDB
via the '--command' argument.

The _Goa testbed_ package and preset have been updated accordingly to make use
of our debug monitor. The default NIC router configuration on Sculpt OS now
comprises an additional _gdb_ domain that is intended to accommodate a single
client to which the router forwards port 9999 of the _uplink_ domain. This is
intended for making the testbed's debug monitor available as a remote GDB target.
Note that these changes will become effective with the next Sculpt release.
In the meantime, you may cherry-pick the
[https://github.com/genodelabs/genode/commit/aeb42b0983143e6fe0a01f7f5316612709da1a9d - corresponding commit].

Along with debugging support, Goa also received a '--with-backtrace' switch and
a 'backtrace' command. The former instructs the tool to preserve frame-pointer
information by supplying the '-fno-omit-frame-pointer' flag to GCC. The
'goa backtrace' command is a shortcut for 'goa run --debug --with-backtrace' that
additionally passes the log output to our
[https://genode.org/documentation/release-notes/24.02#Convenient_parsing_of_backtraces - backtrace tool].

For detailed instructions, please refer to the corresponding
[https://genodians.org/jschlatow/2024-07-31-goa-gdb - Genodians article].


Meson build system
~~~~~~~~~~~~~~~~~~

Projects like Qemu, glib, and Mesa have switched to the Python based
[https://mesonbuild.com - Meson] build system. Mesa, for example, produces a
large number of generated C/C++ files using Meson features. In order to ease the
porting effort of Meson based projects to Genode, we have added basic support for
this build system to Goa.

A Meson project can be built and executed like any other Goa-supported build
system with the addition that there can be a _meson_args_ file (analogously to
_cmake_args_ for CMake) where additional arguments can be passed to the meson
command. Otherwise, Goa will look for a _meson.build_ file in the _src_
directory, which identifies the projects build system as Meson.

As a simple test, you can checkout the _hello_meson_ example in the _examples_
directory of Goa.

At the current stage, only binary targets for the x86_64 architecture are supported by
Goa/Meson. Shared libraries and ARM support will be addressed next.


Rust & Cargo
~~~~~~~~~~~~

From Rust 1.77 onward, the binary distribution of the _std_ library
('x86_64-unknown-freebsd') assumes that the underlying OS kernel supports
thread-local storage via the FS segment register on x86.
As Genode does not provide a TLS area via FS, TLS accesses by the library
would end up in invalid memory, which renders the binary version of
the std library unusable on Genode.
In response, we have implemented a custom Genode target profile for Rust, which
allows us to still leverage the FreeBSD port of Rust's standard library while
using the _emulated_ TLS model. In order to compile the parts of the std
library used by an application for the custom profile, we have moved to using
a _nightly_ Rust tool chain. For detailed instructions for setting up the
tool chain, head over to the
[https://genodians.org/atopia/2024-08-27-building-rust-with-a-custom-profile - blog post]
at Genodians.org.
