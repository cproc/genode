proc binary_name_ld_lib_so { } { return "ld-foc.lib.so" }
proc binary_name_core_o    { } { return "core-foc.o"    }
proc binary_name_timer     { } { return "foc_timer_drv" }


proc run_boot_string { } { return "\nL4 Bootstrapper" }


proc core_link_address { } {

	if {[have_spec x86      ]} { return "0x01100000" }
	if {[have_spec arndale  ]} { return "0x80100000" }
	if {[have_spec rpi      ]} { return "0x00800000" }
	if {[have_spec panda    ]} { return "0xa0000000" }
	if {[have_spec pbxa9    ]} { return "0x76000000" }
	if {[have_spec odroid_x2]} { return "0x80100000" }
	if {[have_spec imx53    ]} { return "0x70140000" }

	puts stderr "Error: platform not supported, core link address unknown"
	exit 1
}


proc fiasco_serial_esc_arg { } { return "-serial_esc " }


##
# Reset the target system via the Fiasco.OC kernel debugger
#
proc reset_target { {spawn_id_arg -1} } {
	global spawn_id
	if { $spawn_id_arg == -1 } {
		set spawn_id_arg $spawn_id
	}
	send -i $spawn_id_arg "\033^^"
}


proc l4_build_dir { } { return "[pwd]/var/libcache/syscall-foc/build" }


proc kernel_binary { } { return "[pwd]/var/libcache/kernel-foc/build/fiasco" }


proc l4_bin_dir { } {

	if {[have_spec x86_32]}  { return "[l4_build_dir]/bin/x86_586" }
	if {[have_spec x86_64]}  { return "[l4_build_dir]/bin/amd64_K8" }
	if {[have_spec arm_v7a]} { return "[l4_build_dir]/bin/arm_armv7a" }
	if {[have_spec arm_v6]}  { return "[l4_build_dir]/bin/arm_armv6" }

	puts stderr "Error: Cannot determine bin directory"
	exit 1
}


proc run_boot_dir_x86 {binaries} {

	build { lib/ld/foc kernel/foc }

	build_core_image $binaries

	exec mkdir [run_dir]/foc
	exec cp [kernel_binary]         [run_dir]/foc/kernel
	exec cp [l4_bin_dir]/l4f/sigma0 [run_dir]/foc
	exec cp [l4_bin_dir]/bootstrap  [run_dir]/foc

	if {[have_include "image/iso"] || [have_include "image/disk"]} {

		#
		# Install isolinux/GRUB files and bender
		#
		install_iso_bootloader_to_run_dir

		#
		# Generate grub config file
		#
		# The core binary is part of the 'binaries' list but it must
		# appear right after 'sigma0' as boot module. Hence the special case.
		#
		set fh [open "[run_dir]/boot/grub/menu.lst" "WRONLY CREAT TRUNC"]
		puts $fh "timeout 0"
		puts $fh "default 0"
		puts $fh "\ntitle Genode on Fiasco.OC"
		puts $fh " kernel /boot/bender"
		puts $fh " module /foc/bootstrap"
		puts $fh " module /foc/kernel [fiasco_serial_esc_arg]"
		puts $fh " module /foc/sigma0"
		puts $fh " module /image.elf"
		close $fh
	}

	#
	# Build image
	#
	run_image

	if {[have_include "load/tftp"]} {
		#
		# Install PXE bootloader pulsar
		#
		install_pxe_bootloader_to_run_dir

		#
		# Generate pulsar config file
		#
		set fh [open "[run_dir]/config-52-54-00-12-34-56" "WRONLY CREAT TRUNC"]
		puts $fh " exec /boot/bender"
		puts $fh " load /foc/bootstrap"
		puts $fh " load /foc/kernel -serial_esc"
		puts $fh " load /foc/sigma0"
		puts $fh " load /image.elf"
		close $fh

		generate_tftp_config
	}

	if {[have_include "load/ipxe"]} {
		create_ipxe_iso_config
		update_ipxe_boot_dir
		create_symlink_for_iso
	}
}


proc run_boot_dir_arm { binaries } {

	global run_target

	build { lib/ld/foc kernel/foc }

	build_core_image $binaries

	#
	# Generate bootstrap config
	#
	set fh [open "[run_dir]/modules.list" "WRONLY CREAT TRUNC"]

	puts $fh "modaddr 0x01100000\n"
	puts $fh "entry    genode"
	puts $fh "kernel   [kernel_binary] [fiasco_serial_esc_arg]"
	puts $fh "roottask image.elf"
	close $fh

	set gen_img_cmd "make -C [l4_build_dir]/source O=[l4_build_dir] E=genode "
	append gen_img_cmd "MODULES_LIST=[pwd]/[run_dir]/modules.list "
	append gen_img_cmd "MODULE_SEARCH_PATH=[pwd]/[run_dir]:[pwd]:[l4_build_dir] "
	append gen_img_cmd "SYSTEM_TARGET=[cross_dev_prefix] elfimage"

	set pid [eval "spawn sh -c \"$gen_img_cmd\""]
	expect { eof { } }
	if {[lindex [wait $pid] end] != 0} {
		puts stderr "Error: single-image creation failed"
		exit -4
	}

	exec cp [run_dir]/image.elf [run_dir]/core.elf
	exec cp [l4_bin_dir]/bootstrap.elf [run_dir]/image.elf
	run_image [run_dir]/image.elf

	puts "\nboot image: [run_dir]/image.elf\n"

	# set symbolic link to image.elf file in TFTP directory for PXE boot
	if {[have_include "load/tftp"]} {
		set tftp_base_dir [load_tftp_base_dir]
		set tftp_offset_dir [load_tftp_offset_dir]

		exec rm -rf $tftp_base_dir$tftp_offset_dir
		exec mkdir $tftp_base_dir$tftp_offset_dir
		exec ln -sf [pwd]/[run_dir]/image.elf $tftp_base_dir$tftp_offset_dir/image.elf
		if {[have_include "image/uboot"]} {
			exec ln -sf [pwd]/[run_dir]/uImage $tftp_base_dir$tftp_offset_dir/uImage
		}
	}
}


##
# Populate boot directory with binaries on fiasco.OC
#
proc run_boot_dir {binaries} {

	if {[have_spec x86]} { return [run_boot_dir_x86 $binaries] }
	if {[have_spec arm]} { return [run_boot_dir_arm $binaries] }
}
