#
# \brief  Test for using the lwIP TCP/IP stack
# \author Norman Feske
# \date   2011-05-22
#
# This test case executes a small HTTP server on Genode running on qemu. When
# the HTTP server is up, a HTTP request to the server is performed using
# 'lynx'. The response is validated against a known pattern.
#
# The test uses qemu's "-net user" option, redirecting Genode's port 80 to the
# host's port 5555. Consequently, it cannot be executed on non-qemu test
# environments (i.e., the test won't work with the Linux version of Genode).
#
# Please make sure to include a nic driver in your build configuration. E.g.,
# on the x86 platform, you may enable the 'linux_drivers' repository.
#

#
# TODO: Add support for Linux via user-level networking (using the
#       tun/tap proxy driver at os/src/drivers/nic/linux)
#
if {[have_spec linux]} {
    puts "Run script does not support Linux."; exit 0 }

#requires_installation_of lynx

#
# Build
#

build {
	core init
	drivers/pci drivers/timer drivers/nic drivers/uart app/gdb_monitor
	test/issue339 server/ram_fs
}

create_boot_directory

#
# Generate config
#

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="ram_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<content>
				<dir name="/">
					<rom name="fstream.txt" as="fstream.txt"/>
				</dir>
			</content>
			<policy label="" root="/" writeable="yes" />
		</config>
	</start>
	<start name="uart_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Terminal"/> </provides>
		<config>
			<policy label="gdb_monitor" uart="1"/>
		</config>
	</start>
	<start name="timer">
		<resource name="RAM" quantum="568K"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="nic_drv">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Nic"/> </provides>
	</start>
	<start name="gdb_monitor">
		<resource name="RAM" quantum="5M"/>
		<config>
			<target name="test-issue339"/>
			<preserve name="RAM" quantum="4M"/>
		</config>
	</start> }

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="PCI"/> </provides>
	</start> }

append config {
</config>
}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer
	nic_drv
	ld.lib.so libc.lib.so libc_log.lib.so lwip.lib.so test-issue339 ram_fs
	libc_lock_pipe.lib.so libc_terminal.lib.so uart_drv gdb_monitor libc_fs.lib.so
}

# platform-specific modules
lappend_if [have_spec pci] boot_modules pci_drv

build_boot_image $boot_modules

#
# Execute test case
#

# qemu config
append qemu_args " -m 128 -nographic "

# connect comport 0 to stdio
append qemu_args " -serial mon:stdio "

# connect comport 1 with TCP port $local_port
set local_port 5556
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait "

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user -redir tcp:5555::80 "

run_genode_until {.*Remote debugging using /dev/terminal.*} 30

puts "GDB monitor is up, starting GDB in a new terminal"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds "-ex \"target remote localhost:$local_port\" "


# don't ask for y/n when loading a new symbol file
append gdb_cmds {-ex "set interactive-mode off" }

# load the symbols of ld.lib.so
append gdb_cmds {-ex "symbol-file bin/ld.lib.so" }

# set a breakpoint in the 'call_main()' function
append gdb_cmds {-ex "b call_main" }

# continue execution until the breakpoint triggers
append gdb_cmds {-ex "c" }

# delete the 'call_main()' breakpoint
append gdb_cmds {-ex "delete 1" }

# load the symbols of the test application
append gdb_cmds {-ex "symbol-file bin/test-issue339" }

# set a breakpoint in the application's 'main()' function
append gdb_cmds {-ex "b main" }

# load the symbols of loaded shared libraries
append gdb_cmds {-ex "sharedlibrary" }

# continue execution until the breakpoint triggers
append gdb_cmds {-ex "c" }

# delete the 'main()' breakpoint
append gdb_cmds {-ex "delete 2" }

# ask the user for confirmations again
append gdb_cmds {-ex "set interactive-mode auto" }

puts "command: [gdb] bin/test-issue339 $gdb_cmds"

#exec [terminal] -e "ddd --debugger \"[gdb] bin/test-issue339 $gdb_cmds" &
exec ddd --debugger "[gdb] bin/test-issue339 $gdb_cmds" &

interact

#run_genode_until {.*Start the server loop \.\.\..*} 30
#
#set uri "http://localhost:5555/"
#
#puts "http server is up, try to query website $uri"
#
##set website [exec lynx -dump $uri]
#
#puts "response:\n$website"
#
#if {![regexp {Welcome to our lwIP HTTP server!} $website dummy]} {
#    puts stderr "Query returned unexpected website"
#    exit 2;
#}
#
#puts "test succeeded"

# vi: set ft=tcl :
